(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[10],{

/***/ "./node_modules/@mtproto/core/index.js":
/*!*********************************************!*\
  !*** ./node_modules/@mtproto/core/index.js ***!
  \*********************************************/
/*! exports provided: MTProto, getSRPParams */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _src_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/index.js */ \"./node_modules/@mtproto/core/src/index.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"MTProto\", function() { return _src_index_js__WEBPACK_IMPORTED_MODULE_0__[\"MTProto\"]; });\n\n/* harmony import */ var _src_utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/utils/crypto/index.js */ \"./node_modules/@mtproto/core/src/utils/crypto/index.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"getSRPParams\", function() { return _src_utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__[\"getSRPParams\"]; });\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9pbmRleC5qcz8zZTc0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQXlDO0FBQ2tCOztBQUUxQiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AbXRwcm90by9jb3JlL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTVRQcm90byB9IGZyb20gJy4vc3JjL2luZGV4LmpzJztcbmltcG9ydCB7IGdldFNSUFBhcmFtcyB9IGZyb20gJy4vc3JjL3V0aWxzL2NyeXB0by9pbmRleC5qcyc7XG5cbmV4cG9ydCB7IE1UUHJvdG8sIGdldFNSUFBhcmFtcyB9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@mtproto/core/index.js\n");

/***/ }),

/***/ "./node_modules/@mtproto/core/src/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@mtproto/core/src/index.js ***!
  \*************************************************/
/*! exports provided: MTProto */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MTProto\", function() { return MTProto; });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _rpc_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rpc/index.js */ \"./node_modules/@mtproto/core/src/rpc/index.js\");\n/* harmony import */ var _storage_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./storage/index.js */ \"./node_modules/@mtproto/core/src/storage/index.js\");\n\n\n\n\nconst TEST_DC_LIST = [\n  {\n    id: 1,\n    ip: '149.154.175.10',\n    port: 80,\n    test: true,\n  },\n  {\n    id: 2,\n    ip: '149.154.167.40',\n    port: 443,\n    test: true,\n  },\n  {\n    id: 3,\n    ip: '149.154.175.117',\n    port: 443,\n    test: true,\n  },\n];\n\nconst PRODUCTION_DC_LIST = [\n  {\n    id: 1,\n    ip: '149.154.175.53',\n    port: 443,\n  },\n  {\n    id: 2,\n    ip: '149.154.167.51',\n    port: 443,\n  },\n  {\n    id: 3,\n    ip: '149.154.175.100',\n    port: 443,\n  },\n  {\n    id: 4,\n    ip: '149.154.167.92',\n    port: 443,\n  },\n  {\n    id: 5,\n    ip: '91.108.56.128',\n    port: 443,\n  },\n];\n\nclass MTProto {\n  constructor(options) {\n    const { api_id, api_hash, test = false, customLocalStorage } = options;\n\n    this.api_id = api_id;\n    this.api_hash = api_hash;\n\n    this.initConnectionParams = {};\n\n    this.dcList = test ? TEST_DC_LIST : PRODUCTION_DC_LIST;\n\n    this.customLocalStorage = customLocalStorage;\n\n    this.updates = new events__WEBPACK_IMPORTED_MODULE_0___default.a();\n\n    this.rpcs = {};\n\n    this.storage = new _storage_index_js__WEBPACK_IMPORTED_MODULE_2__[\"Storage\"]('', { customLocalStorage });\n  }\n\n  async call(method, params = {}, options = {}) {\n    const { syncAuth = true } = options;\n\n    const dcId = options.dcId || (await this.storage.get('defaultDcId')) || 2;\n\n    this.createRPC(dcId);\n\n    return this.rpcs[dcId].call(method, params).then(result => {\n      if (syncAuth && result._ === 'auth.authorization') {\n        return this.syncAuth(dcId).then(() => result);\n      }\n\n      return result;\n    });\n  }\n\n  syncAuth(dcId) {\n    const promises = [];\n\n    this.dcList.forEach(dc => {\n      if (dcId === dc.id) {\n        return;\n      }\n\n      const promise = this.call(\n        'auth.exportAuthorization',\n        {\n          dc_id: dc.id,\n        },\n        { dcId }\n      )\n        .then(result => {\n          return this.call(\n            'auth.importAuthorization',\n            {\n              id: result.id,\n              bytes: result.bytes,\n            },\n            { dcId: dc.id, syncAuth: false }\n          );\n        })\n        .catch(error => {\n          console.warn(`Error when copy auth to DC ${dc.id}:`, error);\n\n          return Promise.resolve();\n        });\n\n      promises.push(promise);\n    });\n\n    return Promise.all(promises);\n  }\n\n  setDefaultDc(dcId) {\n    return this.storage.set('defaultDcId', dcId);\n  }\n\n  createRPC(dcId) {\n    if (dcId in this.rpcs) {\n      return;\n    }\n\n    const dc = this.dcList.find(({ id }) => id === dcId);\n\n    if (!dc) {\n      console.warn(`Don't find DC ${dcId}`);\n\n      return;\n    }\n\n    const { api_id, api_hash, updates, customLocalStorage } = this;\n\n    this.rpcs[dcId] = new _rpc_index_js__WEBPACK_IMPORTED_MODULE_1__[\"RPC\"]({\n      api_id,\n      api_hash,\n      dc,\n      updates,\n      storage: new _storage_index_js__WEBPACK_IMPORTED_MODULE_2__[\"Storage\"](dc.id, { customLocalStorage }),\n      getInitConnectionParams: () => this.initConnectionParams,\n    });\n  }\n\n  updateInitConnectionParams(params) {\n    this.initConnectionParams = params;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvaW5kZXguanM/Njc1MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBa0M7QUFDRztBQUNROztBQUU3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBLFdBQVcscURBQXFEOztBQUVoRTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBLHVCQUF1Qiw2Q0FBWTs7QUFFbkM7O0FBRUEsdUJBQXVCLHlEQUFPLE1BQU0scUJBQXFCO0FBQ3pEOztBQUVBLGdDQUFnQyxjQUFjO0FBQzlDLFdBQVcsa0JBQWtCOztBQUU3Qjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxxREFBcUQsTUFBTTs7QUFFM0Q7QUFDQSxTQUFTOztBQUVUO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQ0FBa0MsS0FBSzs7QUFFdkM7QUFDQSxvQ0FBb0MsS0FBSzs7QUFFekM7QUFDQTs7QUFFQSxXQUFXLGdEQUFnRDs7QUFFM0QsMEJBQTBCLGlEQUFHO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHlEQUFPLFNBQVMscUJBQXFCO0FBQ3hEO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVtQiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AbXRwcm90by9jb3JlL3NyYy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRzJztcbmltcG9ydCB7IFJQQyB9IGZyb20gJy4vcnBjL2luZGV4LmpzJztcbmltcG9ydCB7IFN0b3JhZ2UgfSBmcm9tICcuL3N0b3JhZ2UvaW5kZXguanMnO1xuXG5jb25zdCBURVNUX0RDX0xJU1QgPSBbXG4gIHtcbiAgICBpZDogMSxcbiAgICBpcDogJzE0OS4xNTQuMTc1LjEwJyxcbiAgICBwb3J0OiA4MCxcbiAgICB0ZXN0OiB0cnVlLFxuICB9LFxuICB7XG4gICAgaWQ6IDIsXG4gICAgaXA6ICcxNDkuMTU0LjE2Ny40MCcsXG4gICAgcG9ydDogNDQzLFxuICAgIHRlc3Q6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBpZDogMyxcbiAgICBpcDogJzE0OS4xNTQuMTc1LjExNycsXG4gICAgcG9ydDogNDQzLFxuICAgIHRlc3Q6IHRydWUsXG4gIH0sXG5dO1xuXG5jb25zdCBQUk9EVUNUSU9OX0RDX0xJU1QgPSBbXG4gIHtcbiAgICBpZDogMSxcbiAgICBpcDogJzE0OS4xNTQuMTc1LjUzJyxcbiAgICBwb3J0OiA0NDMsXG4gIH0sXG4gIHtcbiAgICBpZDogMixcbiAgICBpcDogJzE0OS4xNTQuMTY3LjUxJyxcbiAgICBwb3J0OiA0NDMsXG4gIH0sXG4gIHtcbiAgICBpZDogMyxcbiAgICBpcDogJzE0OS4xNTQuMTc1LjEwMCcsXG4gICAgcG9ydDogNDQzLFxuICB9LFxuICB7XG4gICAgaWQ6IDQsXG4gICAgaXA6ICcxNDkuMTU0LjE2Ny45MicsXG4gICAgcG9ydDogNDQzLFxuICB9LFxuICB7XG4gICAgaWQ6IDUsXG4gICAgaXA6ICc5MS4xMDguNTYuMTI4JyxcbiAgICBwb3J0OiA0NDMsXG4gIH0sXG5dO1xuXG5jbGFzcyBNVFByb3RvIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIGNvbnN0IHsgYXBpX2lkLCBhcGlfaGFzaCwgdGVzdCA9IGZhbHNlLCBjdXN0b21Mb2NhbFN0b3JhZ2UgfSA9IG9wdGlvbnM7XG5cbiAgICB0aGlzLmFwaV9pZCA9IGFwaV9pZDtcbiAgICB0aGlzLmFwaV9oYXNoID0gYXBpX2hhc2g7XG5cbiAgICB0aGlzLmluaXRDb25uZWN0aW9uUGFyYW1zID0ge307XG5cbiAgICB0aGlzLmRjTGlzdCA9IHRlc3QgPyBURVNUX0RDX0xJU1QgOiBQUk9EVUNUSU9OX0RDX0xJU1Q7XG5cbiAgICB0aGlzLmN1c3RvbUxvY2FsU3RvcmFnZSA9IGN1c3RvbUxvY2FsU3RvcmFnZTtcblxuICAgIHRoaXMudXBkYXRlcyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIHRoaXMucnBjcyA9IHt9O1xuXG4gICAgdGhpcy5zdG9yYWdlID0gbmV3IFN0b3JhZ2UoJycsIHsgY3VzdG9tTG9jYWxTdG9yYWdlIH0pO1xuICB9XG5cbiAgYXN5bmMgY2FsbChtZXRob2QsIHBhcmFtcyA9IHt9LCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IHN5bmNBdXRoID0gdHJ1ZSB9ID0gb3B0aW9ucztcblxuICAgIGNvbnN0IGRjSWQgPSBvcHRpb25zLmRjSWQgfHwgKGF3YWl0IHRoaXMuc3RvcmFnZS5nZXQoJ2RlZmF1bHREY0lkJykpIHx8IDI7XG5cbiAgICB0aGlzLmNyZWF0ZVJQQyhkY0lkKTtcblxuICAgIHJldHVybiB0aGlzLnJwY3NbZGNJZF0uY2FsbChtZXRob2QsIHBhcmFtcykudGhlbihyZXN1bHQgPT4ge1xuICAgICAgaWYgKHN5bmNBdXRoICYmIHJlc3VsdC5fID09PSAnYXV0aC5hdXRob3JpemF0aW9uJykge1xuICAgICAgICByZXR1cm4gdGhpcy5zeW5jQXV0aChkY0lkKS50aGVuKCgpID0+IHJlc3VsdCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG4gIH1cblxuICBzeW5jQXV0aChkY0lkKSB7XG4gICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcblxuICAgIHRoaXMuZGNMaXN0LmZvckVhY2goZGMgPT4ge1xuICAgICAgaWYgKGRjSWQgPT09IGRjLmlkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMuY2FsbChcbiAgICAgICAgJ2F1dGguZXhwb3J0QXV0aG9yaXphdGlvbicsXG4gICAgICAgIHtcbiAgICAgICAgICBkY19pZDogZGMuaWQsXG4gICAgICAgIH0sXG4gICAgICAgIHsgZGNJZCB9XG4gICAgICApXG4gICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2FsbChcbiAgICAgICAgICAgICdhdXRoLmltcG9ydEF1dGhvcml6YXRpb24nLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpZDogcmVzdWx0LmlkLFxuICAgICAgICAgICAgICBieXRlczogcmVzdWx0LmJ5dGVzLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHsgZGNJZDogZGMuaWQsIHN5bmNBdXRoOiBmYWxzZSB9XG4gICAgICAgICAgKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oYEVycm9yIHdoZW4gY29weSBhdXRoIHRvIERDICR7ZGMuaWR9OmAsIGVycm9yKTtcblxuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIHByb21pc2VzLnB1c2gocHJvbWlzZSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICB9XG5cbiAgc2V0RGVmYXVsdERjKGRjSWQpIHtcbiAgICByZXR1cm4gdGhpcy5zdG9yYWdlLnNldCgnZGVmYXVsdERjSWQnLCBkY0lkKTtcbiAgfVxuXG4gIGNyZWF0ZVJQQyhkY0lkKSB7XG4gICAgaWYgKGRjSWQgaW4gdGhpcy5ycGNzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGMgPSB0aGlzLmRjTGlzdC5maW5kKCh7IGlkIH0pID0+IGlkID09PSBkY0lkKTtcblxuICAgIGlmICghZGMpIHtcbiAgICAgIGNvbnNvbGUud2FybihgRG9uJ3QgZmluZCBEQyAke2RjSWR9YCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7IGFwaV9pZCwgYXBpX2hhc2gsIHVwZGF0ZXMsIGN1c3RvbUxvY2FsU3RvcmFnZSB9ID0gdGhpcztcblxuICAgIHRoaXMucnBjc1tkY0lkXSA9IG5ldyBSUEMoe1xuICAgICAgYXBpX2lkLFxuICAgICAgYXBpX2hhc2gsXG4gICAgICBkYyxcbiAgICAgIHVwZGF0ZXMsXG4gICAgICBzdG9yYWdlOiBuZXcgU3RvcmFnZShkYy5pZCwgeyBjdXN0b21Mb2NhbFN0b3JhZ2UgfSksXG4gICAgICBnZXRJbml0Q29ubmVjdGlvblBhcmFtczogKCkgPT4gdGhpcy5pbml0Q29ubmVjdGlvblBhcmFtcyxcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZUluaXRDb25uZWN0aW9uUGFyYW1zKHBhcmFtcykge1xuICAgIHRoaXMuaW5pdENvbm5lY3Rpb25QYXJhbXMgPSBwYXJhbXM7XG4gIH1cbn1cblxuZXhwb3J0IHsgTVRQcm90byB9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@mtproto/core/src/index.js\n");

/***/ }),

/***/ "./node_modules/@mtproto/core/src/rpc/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@mtproto/core/src/rpc/index.js ***!
  \*****************************************************/
/*! exports provided: RPC */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RPC\", function() { return RPC; });\n/* harmony import */ var big_integer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! big-integer */ \"./node_modules/big-integer/BigInteger.js\");\n/* harmony import */ var big_integer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(big_integer__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash.debounce */ \"./node_modules/lodash.debounce/index.js\");\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_debounce__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _transport_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../transport/index.js */ \"./node_modules/@mtproto/core/src/transport/index.browser.js\");\n/* harmony import */ var _tl_serializer_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tl/serializer/index.js */ \"./node_modules/@mtproto/core/src/tl/serializer/index.js\");\n/* harmony import */ var _tl_deserializer_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../tl/deserializer/index.js */ \"./node_modules/@mtproto/core/src/tl/deserializer/index.js\");\n/* harmony import */ var _utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/common/index.js */ \"./node_modules/@mtproto/core/src/utils/common/index.js\");\n/* harmony import */ var _utils_pq_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/pq/index.js */ \"./node_modules/@mtproto/core/src/utils/pq/index.js\");\n/* harmony import */ var _utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/crypto/index.js */ \"./node_modules/@mtproto/core/src/utils/crypto/index.js\");\n/* harmony import */ var _utils_rsa_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/rsa/index.js */ \"./node_modules/@mtproto/core/src/utils/rsa/index.js\");\n/* harmony import */ var _utils_common_logger_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/common/logger/index.js */ \"./node_modules/@mtproto/core/src/utils/common/logger/index.js\");\n\n\n\n\n\n\n\n\n\n\n\nconst logger = Object(_utils_common_logger_index_js__WEBPACK_IMPORTED_MODULE_9__[\"createLogger\"])('RPC');\n\nclass RPC {\n  constructor({\n    api_id,\n    api_hash,\n    dc,\n    updates,\n    storage,\n    getInitConnectionParams,\n  }) {\n    this.api_id = api_id;\n    this.api_hash = api_hash;\n    this.dc = dc;\n    this.updates = updates;\n    this.getInitConnectionParams = getInitConnectionParams;\n\n    this.messagesWaitResponse = new Map();\n    this.messagesWaitAuth = [];\n    this.pendingAcks = [];\n    this.isReady = false;\n\n    this.storage = storage;\n\n    this.updateSession();\n\n    this.transport = new _transport_index_js__WEBPACK_IMPORTED_MODULE_2__[\"Transport\"](this.dc);\n\n    this.transport.on('open', this.handleTransportOpen.bind(this));\n    this.transport.on('close', this.handleTransportClose.bind(this));\n    this.transport.on('error', this.handleTransportError.bind(this));\n    this.transport.on('message', this.handleTransportMessage.bind(this));\n\n    this.sendAcks = lodash_debounce__WEBPACK_IMPORTED_MODULE_1___default()(() => {\n      if (!this.pendingAcks.length) {\n        return;\n      }\n\n      const serializer = new _tl_serializer_index_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n\n      serializer.predicate({\n        _: 'mt_msgs_ack',\n        msg_ids: this.pendingAcks,\n      });\n\n      const bytes = serializer.getBytes();\n\n      this.pendingAcks = [];\n\n      this.sendEncryptedMessage(bytes, {\n        isContentRelated: false,\n      });\n    }, 500);\n  }\n\n  async handleTransportError(payload) {\n    const { type } = payload;\n\n    console.warn('Transport error:', payload);\n\n    // https://core.telegram.org/mtproto/mtproto-transports#transport-errors\n    if (type === 'transport') {\n      // Auth key not found\n      if (payload.code === 404) {\n        await this.storage.pSet('authKey', null);\n        await this.storage.pSet('serverSalt', null);\n      }\n\n      // transport flood\n      if (payload.code === 429) {\n        console.warn('Transport flood');\n      }\n    }\n  }\n\n  async handleTransportOpen(event) {\n    const authKey = await this.storage.pGet('authKey');\n    const serverSalt = await this.storage.pGet('serverSalt');\n\n    if (authKey && serverSalt) {\n      this.handleMessage = this.handleEncryptedMessage;\n      this.isReady = true;\n      this.sendWaitMessages();\n\n      // This request is necessary to ensure that you start interacting with the server. If we have not made any request, the server will not send us updates.\n      this.call('help.getConfig')\n        .then(result => {\n          // TODO: Handle config\n        })\n        .catch(error => {\n          console.log(`Error when calling the method help.getConfig:`, error);\n        });\n    } else {\n      this.nonce = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"getRandomBytes\"])(16);\n      this.handleMessage = this.handlePQResponse;\n      this.sendPlainMessage({ _: 'mt_req_pq_multi', nonce: this.nonce });\n    }\n  }\n\n  async handleTransportClose(event) {\n    this.isReady = false;\n  }\n\n  async handleTransportMessage(buffer) {\n    this.handleMessage(buffer);\n  }\n\n  async handlePQResponse(buffer) {\n    const deserializer = new _tl_deserializer_index_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](buffer);\n    deserializer.long(); // auth_key_id\n    deserializer.long(); // msg_id\n    deserializer.int32(); // msg_len\n\n    const responsePQ = deserializer.predicate();\n    const {\n      pq,\n      nonce,\n      server_nonce,\n      server_public_key_fingerprints,\n    } = responsePQ;\n\n    if (!Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"bytesIsEqual\"])(this.nonce, nonce)) {\n      throw new Error('The nonce are not equal');\n    }\n\n    const publicKey = await Object(_utils_rsa_index_js__WEBPACK_IMPORTED_MODULE_8__[\"getRsaKeyByFingerprints\"])(\n      server_public_key_fingerprints\n    );\n\n    const [p, q] = Object(_utils_pq_index_js__WEBPACK_IMPORTED_MODULE_6__[\"pqPrimeFactorization\"])(pq);\n\n    this.newNonce = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"getRandomBytes\"])(32);\n    this.serverNonce = server_nonce;\n\n    const serializer = new _tl_serializer_index_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n\n    serializer.predicate({\n      _: 'mt_p_q_inner_data',\n      pq: pq,\n      p: p,\n      q: q,\n      nonce: this.nonce,\n      server_nonce: this.serverNonce,\n      new_nonce: this.newNonce,\n    });\n\n    const data = serializer.getBytes();\n    const dataHash = await Object(_utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__[\"SHA1\"])(data);\n\n    const innerData = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"getRandomBytes\"])(255);\n    innerData.set(dataHash);\n    innerData.set(data, dataHash.length);\n\n    const encryptedData = new _utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__[\"RSA\"](publicKey).encrypt(innerData);\n\n    this.sendPlainMessage({\n      _: 'mt_req_DH_params',\n      nonce: this.nonce,\n      server_nonce: this.serverNonce,\n      p: p,\n      q: q,\n      public_key_fingerprint: publicKey.fingerprint,\n      encrypted_data: encryptedData,\n    });\n\n    this.handleMessage = this.handleDHParams;\n  }\n\n  async handleDHParams(buffer) {\n    const deserializer = new _tl_deserializer_index_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](buffer);\n    deserializer.long(); // auth_key_id\n    deserializer.long(); // msg_id\n    deserializer.int32(); // msg_len\n\n    const serverDH = deserializer.predicate();\n    const { nonce, server_nonce, encrypted_answer } = serverDH;\n\n    if (!Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"bytesIsEqual\"])(this.nonce, nonce)) {\n      throw new Error('The nonce are not equal');\n    }\n\n    if (!Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"bytesIsEqual\"])(this.serverNonce, server_nonce)) {\n      throw new Error('The server_nonce are not equal');\n    }\n\n    this.tmpAesKey = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"concatBytes\"])(\n      await Object(_utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__[\"SHA1\"])(Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"concatBytes\"])(this.newNonce, this.serverNonce)),\n      (await Object(_utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__[\"SHA1\"])(Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"concatBytes\"])(this.serverNonce, this.newNonce))).slice(0, 12)\n    );\n    this.tmpAesIV = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"concatBytes\"])(\n      (await Object(_utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__[\"SHA1\"])(Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"concatBytes\"])(this.serverNonce, this.newNonce))).slice(12, 20),\n      await Object(_utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__[\"SHA1\"])(Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"concatBytes\"])(this.newNonce, this.newNonce)),\n      this.newNonce.slice(0, 4)\n    );\n\n    const decryptedData = new _utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__[\"AES\"].IGE(this.tmpAesKey, this.tmpAesIV).decrypt(\n      encrypted_answer\n    );\n    const innerDataHash = decryptedData.slice(0, 20);\n    const innerDeserializer = new _tl_deserializer_index_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](decryptedData.slice(20).buffer);\n    const serverDHInnerData = innerDeserializer.predicate();\n\n    if (\n      !Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"bytesIsEqual\"])(\n        innerDataHash,\n        await Object(_utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__[\"SHA1\"])(decryptedData.slice(20, 20 + innerDeserializer.offset))\n      )\n    ) {\n      throw new Error('Invalid hash in DH params decrypted data');\n    }\n\n    await this.storage.set(\n      'timeOffset',\n      Math.floor(Date.now() / 1000) - serverDHInnerData.server_time\n    );\n\n    this.dhPrime = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"bytesToBigInt\"])(serverDHInnerData.dh_prime);\n    this.g = big_integer__WEBPACK_IMPORTED_MODULE_0___default()(serverDHInnerData.g);\n    this.gA = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"bytesToBigInt\"])(serverDHInnerData.g_a);\n\n    this.verifyDhParams(this.g, this.dhPrime, this.gA);\n\n    this.generateDH();\n  }\n\n  verifyDhParams(g, dhPrime, gA) {\n    if (g.toJSNumber() !== 3) {\n      throw new Error('Server_DH_inner_data.g must be equal to 3');\n    }\n\n    if (\n      dhPrime.toString(16) !==\n      'c71caeb9c6b1c9048e6c522f70f13f73980d40238e3e21c14934d037563d930f48198a0aa7c14058229493d22530f4dbfa336f6e0ac925139543aed44cce7c3720fd51f69458705ac68cd4fe6b6b13abdc9746512969328454f18faf8c595f642477fe96bb2a941d5bcd1d4ac8cc49880708fa9b378e3c4f3a9060bee67cf9a4a4a695811051907e162753b56b0f6b410dba74d8a84b2a14b3144e0ef1284754fd17ed950d5965b4b9dd46582db1178d169c6bc465b0d6ff9ca3928fef5b9ae4e418fc15e83ebea0f87fa9ff5eed70050ded2849f47bf959d956850ce929851f0d8115f635b105ee2e4e15d04b2454bf6f4fadf034b10403119cd8e3b92fcc5b'\n    ) {\n      throw new Error('Server_DH_inner_data.dh_prime incorrect');\n    }\n\n    if (gA.lesserOrEquals(big_integer__WEBPACK_IMPORTED_MODULE_0___default.a.one)) {\n      throw new Error('Server_DH_inner_data.g_a incorrect: g_a <= 1');\n    }\n\n    if (gA.greaterOrEquals(dhPrime.minus(big_integer__WEBPACK_IMPORTED_MODULE_0___default.a.one))) {\n      throw new Error(\n        'Server_DH_inner_data.g_a incorrect: g_a >= dh_prime - 1'\n      );\n    }\n\n    const twoPow = big_integer__WEBPACK_IMPORTED_MODULE_0___default()(2).pow(2048 - 64);\n\n    if (gA.lesser(twoPow)) {\n      throw new Error('Server_DH_inner_data.g_a incorrect: g_a < 2^{2048-64}');\n    }\n\n    if (gA.greaterOrEquals(dhPrime.minus(twoPow))) {\n      throw new Error(\n        'Server_DH_inner_data.g_a incorrect: g_a >= dh_prime - 2^{2048-64}'\n      );\n    }\n  }\n\n  async generateDH(retryId = 0) {\n    const b = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"bytesToBigInt\"])(Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"getRandomBytes\"])(256));\n    const authKey = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"bigIntToBytes\"])(this.gA.modPow(b, this.dhPrime));\n    const serverSalt = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"xorBytes\"])(\n      this.newNonce.slice(0, 8),\n      this.serverNonce.slice(0, 8)\n    );\n\n    await this.storage.pSet('authKey', Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"bytesToBytesRaw\"])(authKey));\n    await this.storage.pSet('serverSalt', Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"bytesToBytesRaw\"])(serverSalt));\n\n    this.authKeyAuxHash = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"bytesToBytesRaw\"])((await Object(_utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__[\"SHA1\"])(authKey)).slice(0, 8));\n\n    const serializer = new _tl_serializer_index_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n\n    serializer.predicate({\n      _: 'mt_client_DH_inner_data',\n      nonce: this.nonce,\n      server_nonce: this.serverNonce,\n      retry_id: retryId,\n      g_b: Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"bigIntToBytes\"])(this.g.modPow(b, this.dhPrime)),\n    });\n\n    const innerData = serializer.getBytes();\n\n    const innerDataHash = await Object(_utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__[\"SHA1\"])(innerData);\n    const paddingLength = 16 - ((innerDataHash.length + innerData.length) % 16);\n\n    const encryptedData = new _utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__[\"AES\"].IGE(this.tmpAesKey, this.tmpAesIV).encrypt(\n      Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"concatBytes\"])(innerDataHash, innerData, Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"getRandomBytes\"])(paddingLength))\n    );\n\n    this.sendPlainMessage({\n      _: 'mt_set_client_DH_params',\n      nonce: this.nonce,\n      server_nonce: this.serverNonce,\n      encrypted_data: encryptedData,\n    });\n\n    this.handleMessage = this.handleDHAnswer;\n  }\n\n  async handleDHAnswer(buffer) {\n    const deserializer = new _tl_deserializer_index_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](buffer);\n    deserializer.long(); // auth_key_id\n    deserializer.long(); // msg_id\n    deserializer.int32(); // msg_len\n\n    const serverDHAnswer = deserializer.predicate();\n\n    const { nonce, server_nonce } = serverDHAnswer;\n\n    if (!Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"bytesIsEqual\"])(this.nonce, nonce)) {\n      throw new Error('The nonce are not equal');\n    }\n\n    if (!Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"bytesIsEqual\"])(this.serverNonce, server_nonce)) {\n      throw new Error('The server_nonce are not equal');\n    }\n\n    if (serverDHAnswer._ === 'mt_dh_gen_ok') {\n      const hash = (\n        await Object(_utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__[\"SHA1\"])(Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"concatBytes\"])(this.newNonce, [1], this.authKeyAuxHash))\n      ).slice(4, 20);\n\n      if (!Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"bytesIsEqual\"])(hash, serverDHAnswer.new_nonce_hash1)) {\n        throw new Error(`Invalid hash in mt_dh_gen_ok`);\n      }\n\n      this.handleMessage = this.handleEncryptedMessage;\n      this.isReady = true;\n      this.sendWaitMessages();\n\n      return;\n    }\n\n    if (serverDHAnswer._ === 'mt_dh_gen_retry') {\n      const hash = (\n        await Object(_utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__[\"SHA1\"])(Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"concatBytes\"])(this.newNonce, [2], this.authKeyAuxHash))\n      ).slice(4, 20);\n\n      if (!Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"bytesIsEqual\"])(hash, serverDHAnswer.new_nonce_hash2)) {\n        throw new Error(`Invalid hash in mt_dh_gen_retry`);\n      }\n\n      this.generateDH(this.authKeyAuxHash);\n\n      return;\n    }\n\n    if (serverDHAnswer._ === 'mt_dh_gen_fail') {\n      const hash = (\n        await Object(_utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__[\"SHA1\"])(Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"concatBytes\"])(this.newNonce, [3], this.authKeyAuxHash))\n      ).slice(4, 20);\n\n      if (!Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"bytesIsEqual\"])(hash, serverDHAnswer.new_nonce_hash3)) {\n        throw new Error(`Invalid hash in mt_dh_gen_fail`);\n      }\n\n      throw new Error(`mt_dh_gen_fail`);\n    }\n\n    throw new Error(`Invalid Set_client_DH_params_answer: ${serverDHAnswer}`);\n  }\n\n  async sendWaitMessages() {\n    this.messagesWaitAuth.forEach(message => {\n      const { method, params, resolve, reject } = message;\n      this.call(method, params).then(resolve).catch(reject);\n    });\n\n    this.messagesWaitAuth = [];\n  }\n\n  async handleEncryptedMessage(buffer) {\n    const authKey = await this.storage.pGetBytes('authKey');\n\n    const deserializer = new _tl_deserializer_index_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](buffer);\n    const authKeyId = deserializer.long();\n    const messageKey = deserializer.int128();\n\n    const encryptedData = deserializer.byteView.slice(deserializer.offset);\n\n    const plaintextData = (\n      await this.getAESInstance(authKey, messageKey, true)\n    ).decrypt(encryptedData);\n\n    const computedMessageKey = (\n      await Object(_utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__[\"SHA256\"])(Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"concatBytes\"])(authKey.slice(96, 128), plaintextData))\n    ).slice(8, 24);\n\n    if (!Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"bytesIsEqual\"])(messageKey, computedMessageKey)) {\n      console.warn(`Incorrect msg_key`);\n\n      return;\n    }\n\n    const plainDeserializer = new _tl_deserializer_index_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](plaintextData.buffer);\n\n    const salt = plainDeserializer.long();\n    const sessionId = plainDeserializer.long();\n    const messageId = plainDeserializer.long();\n    const seqNo = plainDeserializer.uint32();\n    const length = plainDeserializer.uint32();\n\n    if (length > plaintextData.length) {\n      console.warn(\n        `Length in message ${messageId} to exceed the plaintext length:`,\n        `${length} > ${plaintextData.length}`\n      );\n\n      return;\n    }\n\n    if (length % 4 !== 0) {\n      console.warn(\n        `Length ${length} in message ${messageId} is not a multiple of four`\n      );\n\n      return;\n    }\n\n    logger.bytes({\n      name: 'handleEncryptedMessage plainDeserializer.byteView',\n      bytes: plainDeserializer.byteView,\n    });\n\n    const result = plainDeserializer.predicate();\n\n    logger.log({\n      name: 'handleEncryptedMessage result',\n      result,\n    });\n\n    this.handleDecryptedMessage(result, { messageId, seqNo });\n  }\n\n  async handleDecryptedMessage(message, params = {}) {\n    const { messageId } = params;\n\n    if (big_integer__WEBPACK_IMPORTED_MODULE_0___default()(messageId).isEven()) {\n      console.warn(`Message id from server is even:`, message);\n\n      return;\n    }\n\n    if (message._ === 'mt_msg_container') {\n      message.messages.forEach(message => {\n        this.handleDecryptedMessage(message.body, {\n          messageId: message.msg_id,\n        });\n      });\n\n      return;\n    }\n\n    if (['mt_bad_server_salt', 'mt_bad_msg_notification'].includes(message._)) {\n      if (message.error_code === 48) {\n        await this.storage.pSet(\n          'serverSalt',\n          Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"longToBytesRaw\"])(message.new_server_salt)\n        );\n      }\n\n      if ([16, 17].includes(message.error_code)) {\n        const serverTime = big_integer__WEBPACK_IMPORTED_MODULE_0___default()(messageId).shiftRight(32).toJSNumber();\n        const timeOffset = Math.floor(Date.now() / 1000) - serverTime;\n\n        await this.storage.set('timeOffset', timeOffset);\n        this.lastMessageId = [0, 0];\n      }\n\n      const waitMessage = this.messagesWaitResponse.get(message.bad_msg_id);\n\n      if (waitMessage) {\n        this.call(waitMessage.method, waitMessage.params)\n          .then(waitMessage.resolve)\n          .catch(waitMessage.reject);\n        this.messagesWaitResponse.delete(message.bad_msg_id);\n      } else {\n        console.warn(`${message._} for a non-existent message:`, message);\n      }\n\n      return;\n    }\n\n    if (message._ === 'mt_new_session_created') {\n      this.ackMessage(messageId);\n      await this.storage.pSet(\n        'serverSalt',\n        Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"longToBytesRaw\"])(message.server_salt)\n      );\n\n      return;\n    }\n\n    if (message._ === 'mt_msgs_ack') {\n      return;\n    }\n\n    if (message._ === 'mt_rpc_result') {\n      this.ackMessage(messageId);\n\n      const waitMessage = this.messagesWaitResponse.get(message.req_msg_id);\n\n      if (message.result._ === 'mt_rpc_error') {\n        waitMessage.reject(message.result);\n      } else {\n        waitMessage.resolve(message.result);\n      }\n\n      this.messagesWaitResponse.delete(message.req_msg_id);\n\n      return;\n    }\n\n    this.ackMessage(messageId);\n    this.updates.emit(message._, message);\n  }\n\n  async ackMessage(messageId) {\n    this.pendingAcks.push(messageId);\n\n    this.sendAcks();\n  }\n\n  async call(method, params = {}) {\n    if (!this.isReady) {\n      return new Promise((resolve, reject) => {\n        this.messagesWaitAuth.push({ method, params, resolve, reject });\n      });\n    }\n\n    const initConnectionParams = {\n      api_id: this.api_id,\n      device_model: '@mtproto/core',\n      system_version: '5.0.0',\n      app_version: '1.0.0',\n      system_lang_code: 'en',\n      lang_code: 'en',\n      ...this.getInitConnectionParams(),\n    };\n\n    const serializer = new _tl_serializer_index_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n\n    serializer.predicate({\n      _: 'invokeWithLayer',\n      layer: 113,\n      query: {\n        _: 'initConnection',\n        ...initConnectionParams,\n        query: {\n          _: method,\n          api_id: this.api_id,\n          api_hash: this.api_hash,\n          ...params,\n        },\n      },\n    });\n\n    logger.log({\n      name: 'call params',\n      params,\n    });\n\n    const bytes = serializer.getBytes();\n\n    logger.bytes({\n      name: 'call bytes',\n      bytes,\n    });\n\n    return new Promise(async (resolve, reject) => {\n      const messageId = await this.sendEncryptedMessage(bytes);\n      const messageIdAsKey = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"intsToLong\"])(messageId[0], messageId[1]);\n\n      this.messagesWaitResponse.set(messageIdAsKey, {\n        method,\n        params,\n        resolve,\n        reject,\n      });\n    });\n  }\n\n  // https://core.telegram.org/mtproto/description#schematic-presentation-of-messages\n  // Encrypted Message:\n  // 1. auth_key_id (int64)\n  // 2. msg_key (int128)\n  // 3. encrypted_data\n  // encrypted_data:\n  // 4. salt (int64)\n  // 5. session_id (int64)\n  // 6. message_id (int64)\n  // 7. seq_no (int32)\n  // 8. message_data_length (int32)\n  // 9. message_data\n  // 10. padding 12..1024\n  async sendEncryptedMessage(data, options = {}) {\n    const { isContentRelated = true } = options;\n\n    const authKey = await this.storage.pGetBytes('authKey');\n    const serverSalt = await this.storage.pGetBytes('serverSalt');\n    const messageId = await this.getMessageId();\n    const seqNo = this.getSeqNo(isContentRelated);\n    const minPadding = 12;\n    const unpadded = (32 + data.length + minPadding) % 16;\n    const padding = minPadding + (unpadded ? 16 - unpadded : 0);\n\n    const plainDataSerializer = new _tl_serializer_index_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n    plainDataSerializer.bytesRaw(serverSalt);\n    plainDataSerializer.bytesRaw(this.sessionId);\n    plainDataSerializer.long(messageId);\n    plainDataSerializer.int32(seqNo);\n    plainDataSerializer.uint32(data.length);\n    plainDataSerializer.bytesRaw(data);\n    plainDataSerializer.bytesRaw(Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"getRandomBytes\"])(padding));\n\n    const plainData = plainDataSerializer.getBytes();\n\n    const messageKeyLarge = await Object(_utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__[\"SHA256\"])(\n      Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"concatBytes\"])(authKey.slice(88, 120), plainData)\n    );\n    const messageKey = messageKeyLarge.slice(8, 24);\n    const encryptedData = (\n      await this.getAESInstance(authKey, messageKey, false)\n    ).encrypt(plainData);\n\n    const authKeyId = (await Object(_utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__[\"SHA1\"])(authKey)).slice(-8);\n    const serializer = new _tl_serializer_index_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n    serializer.bytesRaw(authKeyId);\n    serializer.bytesRaw(messageKey);\n    serializer.bytesRaw(encryptedData);\n\n    this.transport.send(serializer.getBytes());\n\n    return messageId;\n  }\n\n  async sendPlainMessage(params) {\n    const serializer = new _tl_serializer_index_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n    serializer.predicate(params);\n\n    const requestBytes = serializer.getBytes();\n    const requestLength = requestBytes.length;\n\n    const header = new _tl_serializer_index_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n    header.long([0, 0]); // auth_key_id (8)\n    header.long(await this.getMessageId()); // msg_id (8)\n    header.uint32(requestLength); // request_length (4)\n\n    const headerBytes = header.getBytes();\n    const headerLength = headerBytes.length;\n\n    const resultBuffer = new ArrayBuffer(headerLength + requestLength);\n    const resultBytes = new Uint8Array(resultBuffer);\n\n    resultBytes.set(headerBytes);\n    resultBytes.set(requestBytes, headerLength);\n\n    this.transport.send(resultBytes);\n  }\n\n  async getMessageId() {\n    const timeOffset = await this.storage.get('timeOffset');\n\n    const timeTicks = Date.now();\n    const timeSec = Math.floor(timeTicks / 1000) + timeOffset;\n    const timeMSec = timeTicks % 1000;\n    const random = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"getRandomInt\"])(0xffff);\n\n    const { lastMessageId } = this;\n\n    let messageId = [timeSec, (timeMSec << 21) | (random << 3) | 4];\n\n    if (\n      lastMessageId[0] > messageId[0] ||\n      (lastMessageId[0] == messageId[0] && lastMessageId[1] >= messageId[1])\n    ) {\n      messageId = [lastMessageId[0], lastMessageId[1] + 4];\n    }\n\n    this.lastMessageId = messageId;\n\n    return messageId;\n  }\n\n  getSeqNo(isContentRelated = true) {\n    let seqNo = this.seqNo * 2;\n\n    if (isContentRelated) {\n      seqNo += 1;\n      this.seqNo += 1;\n    }\n\n    return seqNo;\n  }\n\n  updateSession() {\n    this.seqNo = 0;\n    this.sessionId = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"getRandomBytes\"])(8);\n    this.lastMessageId = [\n      0, // low\n      0, // high\n    ];\n  }\n\n  async getAESInstance(authKey, messageKey, isServer) {\n    const x = isServer ? 8 : 0;\n    const sha256a = await Object(_utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__[\"SHA256\"])(\n      Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"concatBytes\"])(messageKey, authKey.slice(x, 36 + x))\n    );\n    const sha256b = await Object(_utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__[\"SHA256\"])(\n      Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"concatBytes\"])(authKey.slice(40 + x, 76 + x), messageKey)\n    );\n    const aesKey = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"concatBytes\"])(\n      sha256a.slice(0, 8),\n      sha256b.slice(8, 24),\n      sha256a.slice(24, 32)\n    );\n    const aesIV = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_5__[\"concatBytes\"])(\n      sha256b.slice(0, 8),\n      sha256a.slice(8, 24),\n      sha256b.slice(24, 32)\n    );\n    return new _utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__[\"AES\"].IGE(aesKey, aesIV);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@mtproto/core/src/rpc/index.js\n");

/***/ }),

/***/ "./node_modules/@mtproto/core/src/storage/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@mtproto/core/src/storage/index.js ***!
  \*********************************************************/
/*! exports provided: Storage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Storage\", function() { return Storage; });\n/* harmony import */ var _local_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./local/index.js */ \"./node_modules/@mtproto/core/src/storage/local/index.browser.js\");\n\n\nconst cache = {};\n\nclass Storage {\n  constructor(prefix, options = {}) {\n    this._prefix = prefix;\n\n    const { customLocalStorage = Object(_local_index_js__WEBPACK_IMPORTED_MODULE_0__[\"getLocalStorage\"])() } = options;\n\n    this.localStorage = customLocalStorage;\n  }\n\n  setPrefix(prefix) {\n    this._prefix = prefix;\n  }\n\n  pSet(name, value) {\n    const key = `${this._prefix}${name}`;\n\n    return this.set(key, value);\n  }\n\n  async pGetBytes(name) {\n    const result = await this.pGet(name);\n\n    return new Uint8Array(result);\n  }\n\n  pGet(name) {\n    const key = `${this._prefix}${name}`;\n\n    return this.get(key);\n  }\n\n  async set(key, value) {\n    cache[key] = value;\n\n    const result = await this.localStorage.setItem(key, JSON.stringify(value));\n\n    return result;\n  }\n\n  async get(key) {\n    if (key in cache) {\n      return cache[key];\n    }\n\n    const fromLocalStorage = await this.localStorage.getItem(key);\n\n    if (fromLocalStorage) {\n      cache[key] = JSON.parse(fromLocalStorage);\n\n      return cache[key];\n    }\n\n    return null;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvc3RvcmFnZS9pbmRleC5qcz8wMWE5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFtRDs7QUFFbkQ7O0FBRUE7QUFDQSxrQ0FBa0M7QUFDbEM7O0FBRUEsV0FBVyxzQkFBc0IsdUVBQWUsSUFBSTs7QUFFcEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsYUFBYSxFQUFFLEtBQUs7O0FBRXZDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLGFBQWEsRUFBRSxLQUFLOztBQUV2QztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVtQiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AbXRwcm90by9jb3JlL3NyYy9zdG9yYWdlL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0TG9jYWxTdG9yYWdlIH0gZnJvbSAnLi9sb2NhbC9pbmRleC5qcyc7XG5cbmNvbnN0IGNhY2hlID0ge307XG5cbmNsYXNzIFN0b3JhZ2Uge1xuICBjb25zdHJ1Y3RvcihwcmVmaXgsIG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuX3ByZWZpeCA9IHByZWZpeDtcblxuICAgIGNvbnN0IHsgY3VzdG9tTG9jYWxTdG9yYWdlID0gZ2V0TG9jYWxTdG9yYWdlKCkgfSA9IG9wdGlvbnM7XG5cbiAgICB0aGlzLmxvY2FsU3RvcmFnZSA9IGN1c3RvbUxvY2FsU3RvcmFnZTtcbiAgfVxuXG4gIHNldFByZWZpeChwcmVmaXgpIHtcbiAgICB0aGlzLl9wcmVmaXggPSBwcmVmaXg7XG4gIH1cblxuICBwU2V0KG5hbWUsIHZhbHVlKSB7XG4gICAgY29uc3Qga2V5ID0gYCR7dGhpcy5fcHJlZml4fSR7bmFtZX1gO1xuXG4gICAgcmV0dXJuIHRoaXMuc2V0KGtleSwgdmFsdWUpO1xuICB9XG5cbiAgYXN5bmMgcEdldEJ5dGVzKG5hbWUpIHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnBHZXQobmFtZSk7XG5cbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkocmVzdWx0KTtcbiAgfVxuXG4gIHBHZXQobmFtZSkge1xuICAgIGNvbnN0IGtleSA9IGAke3RoaXMuX3ByZWZpeH0ke25hbWV9YDtcblxuICAgIHJldHVybiB0aGlzLmdldChrZXkpO1xuICB9XG5cbiAgYXN5bmMgc2V0KGtleSwgdmFsdWUpIHtcbiAgICBjYWNoZVtrZXldID0gdmFsdWU7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBhc3luYyBnZXQoa2V5KSB7XG4gICAgaWYgKGtleSBpbiBjYWNoZSkge1xuICAgICAgcmV0dXJuIGNhY2hlW2tleV07XG4gICAgfVxuXG4gICAgY29uc3QgZnJvbUxvY2FsU3RvcmFnZSA9IGF3YWl0IHRoaXMubG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcblxuICAgIGlmIChmcm9tTG9jYWxTdG9yYWdlKSB7XG4gICAgICBjYWNoZVtrZXldID0gSlNPTi5wYXJzZShmcm9tTG9jYWxTdG9yYWdlKTtcblxuICAgICAgcmV0dXJuIGNhY2hlW2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IHsgU3RvcmFnZSB9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@mtproto/core/src/storage/index.js\n");

/***/ }),

/***/ "./node_modules/@mtproto/core/src/storage/local/index.browser.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@mtproto/core/src/storage/local/index.browser.js ***!
  \***********************************************************************/
/*! exports provided: getLocalStorage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLocalStorage\", function() { return getLocalStorage; });\nfunction getLocalStorage() {\n  return window.localStorage;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvc3RvcmFnZS9sb2NhbC9pbmRleC5icm93c2VyLmpzP2MxNDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTs7QUFFMkIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvc3RvcmFnZS9sb2NhbC9pbmRleC5icm93c2VyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZ2V0TG9jYWxTdG9yYWdlKCkge1xuICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbn1cblxuZXhwb3J0IHsgZ2V0TG9jYWxTdG9yYWdlIH07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mtproto/core/src/storage/local/index.browser.js\n");

/***/ }),

/***/ "./node_modules/@mtproto/core/src/tl/builder/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@mtproto/core/src/tl/builder/index.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nconst builderMap = {\n  'mt_vector': function(params) {\n    this.int32(481674261);\n  },\n  'mt_resPQ': function(params) {\n    this.int32(85337187);\n    this.int128(params.nonce);\n    this.int128(params.server_nonce);\n    this.bytes(params.pq);\n    this.vector(this.long, params.server_public_key_fingerprints);\n  },\n  'mt_p_q_inner_data': function(params) {\n    this.int32(-2083955988);\n    this.bytes(params.pq);\n    this.bytes(params.p);\n    this.bytes(params.q);\n    this.int128(params.nonce);\n    this.int128(params.server_nonce);\n    this.int256(params.new_nonce);\n  },\n  'mt_p_q_inner_data_dc': function(params) {\n    this.int32(-1443537003);\n    this.bytes(params.pq);\n    this.bytes(params.p);\n    this.bytes(params.q);\n    this.int128(params.nonce);\n    this.int128(params.server_nonce);\n    this.int256(params.new_nonce);\n    this.int(params.dc);\n  },\n  'mt_p_q_inner_data_temp': function(params) {\n    this.int32(1013613780);\n    this.bytes(params.pq);\n    this.bytes(params.p);\n    this.bytes(params.q);\n    this.int128(params.nonce);\n    this.int128(params.server_nonce);\n    this.int256(params.new_nonce);\n    this.int(params.expires_in);\n  },\n  'mt_p_q_inner_data_temp_dc': function(params) {\n    this.int32(1459478408);\n    this.bytes(params.pq);\n    this.bytes(params.p);\n    this.bytes(params.q);\n    this.int128(params.nonce);\n    this.int128(params.server_nonce);\n    this.int256(params.new_nonce);\n    this.int(params.dc);\n    this.int(params.expires_in);\n  },\n  'mt_server_DH_params_fail': function(params) {\n    this.int32(2043348061);\n    this.int128(params.nonce);\n    this.int128(params.server_nonce);\n    this.int128(params.new_nonce_hash);\n  },\n  'mt_server_DH_params_ok': function(params) {\n    this.int32(-790100132);\n    this.int128(params.nonce);\n    this.int128(params.server_nonce);\n    this.bytes(params.encrypted_answer);\n  },\n  'mt_server_DH_inner_data': function(params) {\n    this.int32(-1249309254);\n    this.int128(params.nonce);\n    this.int128(params.server_nonce);\n    this.int(params.g);\n    this.bytes(params.dh_prime);\n    this.bytes(params.g_a);\n    this.int(params.server_time);\n  },\n  'mt_client_DH_inner_data': function(params) {\n    this.int32(1715713620);\n    this.int128(params.nonce);\n    this.int128(params.server_nonce);\n    this.long(params.retry_id);\n    this.bytes(params.g_b);\n  },\n  'mt_dh_gen_ok': function(params) {\n    this.int32(1003222836);\n    this.int128(params.nonce);\n    this.int128(params.server_nonce);\n    this.int128(params.new_nonce_hash1);\n  },\n  'mt_dh_gen_retry': function(params) {\n    this.int32(1188831161);\n    this.int128(params.nonce);\n    this.int128(params.server_nonce);\n    this.int128(params.new_nonce_hash2);\n  },\n  'mt_dh_gen_fail': function(params) {\n    this.int32(-1499615742);\n    this.int128(params.nonce);\n    this.int128(params.server_nonce);\n    this.int128(params.new_nonce_hash3);\n  },\n  'mt_rpc_result': function(params) {\n    this.int32(-212046591);\n    this.long(params.req_msg_id);\n    this.predicate(params.result);\n  },\n  'mt_rpc_error': function(params) {\n    this.int32(558156313);\n    this.int(params.error_code);\n    this.string(params.error_message);\n  },\n  'mt_rpc_answer_unknown': function(params) {\n    this.int32(1579864942);\n  },\n  'mt_rpc_answer_dropped_running': function(params) {\n    this.int32(-847714938);\n  },\n  'mt_rpc_answer_dropped': function(params) {\n    this.int32(-1539647305);\n    this.long(params.msg_id);\n    this.int(params.seq_no);\n    this.int(params.bytes);\n  },\n  'mt_future_salt': function(params) {\n    this.int32(155834844);\n    this.int(params.valid_since);\n    this.int(params.valid_until);\n    this.long(params.salt);\n  },\n  'mt_future_salts': function(params) {\n    this.int32(-1370486635);\n    this.long(params.req_msg_id);\n    this.int(params.now);\n    this.vector(this.predicate, params.salts);\n  },\n  'mt_pong': function(params) {\n    this.int32(880243653);\n    this.long(params.msg_id);\n    this.long(params.ping_id);\n  },\n  'mt_new_session_created': function(params) {\n    this.int32(-1631450872);\n    this.long(params.first_msg_id);\n    this.long(params.unique_id);\n    this.long(params.server_salt);\n  },\n  'mt_msg_container': function(params) {\n    this.int32(1945237724);\n    this.vector(this.predicate, params.messages);\n  },\n  'mt_message': function(params) {\n    this.int32(1538843921);\n    this.long(params.msg_id);\n    this.int(params.seqno);\n    this.int(params.bytes);\n    this.predicate(params.body);\n  },\n  'mt_msg_copy': function(params) {\n    this.int32(-530561358);\n    this.predicate(params.orig_message);\n  },\n  'mt_gzip_packed': function(params) {\n    this.int32(812830625);\n    this.bytes(params.packed_data);\n  },\n  'mt_msgs_ack': function(params) {\n    this.int32(1658238041);\n    this.vector(this.long, params.msg_ids);\n  },\n  'mt_bad_msg_notification': function(params) {\n    this.int32(-1477445615);\n    this.long(params.bad_msg_id);\n    this.int(params.bad_msg_seqno);\n    this.int(params.error_code);\n  },\n  'mt_bad_server_salt': function(params) {\n    this.int32(-307542917);\n    this.long(params.bad_msg_id);\n    this.int(params.bad_msg_seqno);\n    this.int(params.error_code);\n    this.long(params.new_server_salt);\n  },\n  'mt_msg_resend_req': function(params) {\n    this.int32(2105940488);\n    this.vector(this.long, params.msg_ids);\n  },\n  'mt_msg_resend_ans_req': function(params) {\n    this.int32(-2045723925);\n    this.vector(this.long, params.msg_ids);\n  },\n  'mt_msgs_state_req': function(params) {\n    this.int32(-630588590);\n    this.vector(this.long, params.msg_ids);\n  },\n  'mt_msgs_state_info': function(params) {\n    this.int32(81704317);\n    this.long(params.req_msg_id);\n    this.bytes(params.info);\n  },\n  'mt_msgs_all_info': function(params) {\n    this.int32(-1933520591);\n    this.vector(this.long, params.msg_ids);\n    this.bytes(params.info);\n  },\n  'mt_msg_detailed_info': function(params) {\n    this.int32(661470918);\n    this.long(params.msg_id);\n    this.long(params.answer_msg_id);\n    this.int(params.bytes);\n    this.int(params.status);\n  },\n  'mt_msg_new_detailed_info': function(params) {\n    this.int32(-2137147681);\n    this.long(params.answer_msg_id);\n    this.int(params.bytes);\n    this.int(params.status);\n  },\n  'mt_bind_auth_key_inner': function(params) {\n    this.int32(1973679973);\n    this.long(params.nonce);\n    this.long(params.temp_auth_key_id);\n    this.long(params.perm_auth_key_id);\n    this.long(params.temp_session_id);\n    this.int(params.expires_at);\n  },\n  'mt_destroy_auth_key_ok': function(params) {\n    this.int32(-161422892);\n  },\n  'mt_destroy_auth_key_none': function(params) {\n    this.int32(178201177);\n  },\n  'mt_destroy_auth_key_fail': function(params) {\n    this.int32(-368010477);\n  },\n  'mt_destroy_session_ok': function(params) {\n    this.int32(-501201412);\n    this.long(params.session_id);\n  },\n  'mt_destroy_session_none': function(params) {\n    this.int32(1658015945);\n    this.long(params.session_id);\n  },\n  'mt_req_pq': function(params) {\n    this.int32(1615239032);\n    this.int128(params.nonce);\n  },\n  'mt_req_pq_multi': function(params) {\n    this.int32(-1099002127);\n    this.int128(params.nonce);\n  },\n  'mt_req_DH_params': function(params) {\n    this.int32(-686627650);\n    this.int128(params.nonce);\n    this.int128(params.server_nonce);\n    this.bytes(params.p);\n    this.bytes(params.q);\n    this.long(params.public_key_fingerprint);\n    this.bytes(params.encrypted_data);\n  },\n  'mt_set_client_DH_params': function(params) {\n    this.int32(-184262881);\n    this.int128(params.nonce);\n    this.int128(params.server_nonce);\n    this.bytes(params.encrypted_data);\n  },\n  'mt_rpc_drop_answer': function(params) {\n    this.int32(1491380032);\n    this.long(params.req_msg_id);\n  },\n  'mt_get_future_salts': function(params) {\n    this.int32(-1188971260);\n    this.int(params.num);\n  },\n  'mt_ping': function(params) {\n    this.int32(2059302892);\n    this.long(params.ping_id);\n  },\n  'mt_ping_delay_disconnect': function(params) {\n    this.int32(-213746804);\n    this.long(params.ping_id);\n    this.int(params.disconnect_delay);\n  },\n  'mt_http_wait': function(params) {\n    this.int32(-1835453025);\n    this.int(params.max_delay);\n    this.int(params.wait_after);\n    this.int(params.max_wait);\n  },\n  'mt_destroy_auth_key': function(params) {\n    this.int32(-784117408);\n  },\n  'mt_destroy_session': function(params) {\n    this.int32(-414113498);\n    this.long(params.session_id);\n  },\n  'boolFalse': function(params) {\n    this.int32(3162085175);\n  },\n  'boolTrue': function(params) {\n    this.int32(2574415285);\n  },\n  'true': function(params) {\n    this.int32(1072550713);\n  },\n  'vector': function(params) {\n    this.int32(481674261);\n  },\n  'error': function(params) {\n    this.int32(3300522427);\n    this.int(params.code);\n    this.string(params.text);\n  },\n  'null': function(params) {\n    this.int32(1450380236);\n  },\n  'inputPeerEmpty': function(params) {\n    this.int32(2134579434);\n  },\n  'inputPeerSelf': function(params) {\n    this.int32(2107670217);\n  },\n  'inputPeerChat': function(params) {\n    this.int32(396093539);\n    this.int(params.chat_id);\n  },\n  'inputPeerUser': function(params) {\n    this.int32(2072935910);\n    this.int(params.user_id);\n    this.long(params.access_hash);\n  },\n  'inputPeerChannel': function(params) {\n    this.int32(548253432);\n    this.int(params.channel_id);\n    this.long(params.access_hash);\n  },\n  'inputPeerUserFromMessage': function(params) {\n    this.int32(398123750);\n    this.predicate(params.peer);\n    this.int(params.msg_id);\n    this.int(params.user_id);\n  },\n  'inputPeerChannelFromMessage': function(params) {\n    this.int32(2627073979);\n    this.predicate(params.peer);\n    this.int(params.msg_id);\n    this.int(params.channel_id);\n  },\n  'inputUserEmpty': function(params) {\n    this.int32(3112732367);\n  },\n  'inputUserSelf': function(params) {\n    this.int32(4156666175);\n  },\n  'inputUser': function(params) {\n    this.int32(3626575894);\n    this.int(params.user_id);\n    this.long(params.access_hash);\n  },\n  'inputUserFromMessage': function(params) {\n    this.int32(756118935);\n    this.predicate(params.peer);\n    this.int(params.msg_id);\n    this.int(params.user_id);\n  },\n  'inputPhoneContact': function(params) {\n    this.int32(4086478836);\n    this.long(params.client_id);\n    this.string(params.phone);\n    this.string(params.first_name);\n    this.string(params.last_name);\n  },\n  'inputFile': function(params) {\n    this.int32(4113560191);\n    this.long(params.id);\n    this.int(params.parts);\n    this.string(params.name);\n    this.string(params.md5_checksum);\n  },\n  'inputFileBig': function(params) {\n    this.int32(4199484341);\n    this.long(params.id);\n    this.int(params.parts);\n    this.string(params.name);\n  },\n  'inputMediaEmpty': function(params) {\n    this.int32(2523198847);\n  },\n  'inputMediaUploadedPhoto': function(params) {\n    this.int32(505969924);\n    const flags = (this.has(params.stickers) << 0) | (this.has(params.ttl_seconds) << 1);\n    this.int32(flags);\n    this.predicate(params.file);\n    this.flagVector(this.predicate, params.stickers);\n    this.flag(this.int, params.ttl_seconds);\n  },\n  'inputMediaPhoto': function(params) {\n    this.int32(3015312949);\n    const flags = (this.has(params.ttl_seconds) << 0);\n    this.int32(flags);\n    this.predicate(params.id);\n    this.flag(this.int, params.ttl_seconds);\n  },\n  'inputMediaGeoPoint': function(params) {\n    this.int32(4190388548);\n    this.predicate(params.geo_point);\n  },\n  'inputMediaContact': function(params) {\n    this.int32(4171988475);\n    this.string(params.phone_number);\n    this.string(params.first_name);\n    this.string(params.last_name);\n    this.string(params.vcard);\n  },\n  'inputMediaUploadedDocument': function(params) {\n    this.int32(1530447553);\n    const flags = (this.has(params.nosound_video) << 3) | (this.has(params.thumb) << 2) | (this.has(params.stickers) << 0) | (this.has(params.ttl_seconds) << 1);\n    this.int32(flags);\n    this.predicate(params.file);\n    this.flag(this.predicate, params.thumb);\n    this.string(params.mime_type);\n    this.vector(this.predicate, params.attributes);\n    this.flagVector(this.predicate, params.stickers);\n    this.flag(this.int, params.ttl_seconds);\n  },\n  'inputMediaDocument': function(params) {\n    this.int32(598418386);\n    const flags = (this.has(params.ttl_seconds) << 0);\n    this.int32(flags);\n    this.predicate(params.id);\n    this.flag(this.int, params.ttl_seconds);\n  },\n  'inputMediaVenue': function(params) {\n    this.int32(3242007569);\n    this.predicate(params.geo_point);\n    this.string(params.title);\n    this.string(params.address);\n    this.string(params.provider);\n    this.string(params.venue_id);\n    this.string(params.venue_type);\n  },\n  'inputMediaGifExternal': function(params) {\n    this.int32(1212395773);\n    this.string(params.url);\n    this.string(params.q);\n  },\n  'inputMediaPhotoExternal': function(params) {\n    this.int32(3854302746);\n    const flags = (this.has(params.ttl_seconds) << 0);\n    this.int32(flags);\n    this.string(params.url);\n    this.flag(this.int, params.ttl_seconds);\n  },\n  'inputMediaDocumentExternal': function(params) {\n    this.int32(4216511641);\n    const flags = (this.has(params.ttl_seconds) << 0);\n    this.int32(flags);\n    this.string(params.url);\n    this.flag(this.int, params.ttl_seconds);\n  },\n  'inputMediaGame': function(params) {\n    this.int32(3544138739);\n    this.predicate(params.id);\n  },\n  'inputMediaInvoice': function(params) {\n    this.int32(4108359363);\n    const flags = (this.has(params.photo) << 0);\n    this.int32(flags);\n    this.string(params.title);\n    this.string(params.description);\n    this.flag(this.predicate, params.photo);\n    this.predicate(params.invoice);\n    this.bytes(params.payload);\n    this.string(params.provider);\n    this.predicate(params.provider_data);\n    this.string(params.start_param);\n  },\n  'inputMediaGeoLive': function(params) {\n    this.int32(3461251837);\n    const flags = (this.has(params.stopped) << 0) | (this.has(params.period) << 1);\n    this.int32(flags);\n    this.predicate(params.geo_point);\n    this.flag(this.int, params.period);\n  },\n  'inputMediaPoll': function(params) {\n    this.int32(261416433);\n    const flags = (this.has(params.correct_answers) << 0) | (this.has(params.solution) << 1) | (this.has(params.solution_entities) << 1);\n    this.int32(flags);\n    this.predicate(params.poll);\n    this.flagVector(this.bytes, params.correct_answers);\n    this.flag(this.string, params.solution);\n    this.flagVector(this.predicate, params.solution_entities);\n  },\n  'inputMediaDice': function(params) {\n    this.int32(3866083195);\n    this.string(params.emoticon);\n  },\n  'inputChatPhotoEmpty': function(params) {\n    this.int32(480546647);\n  },\n  'inputChatUploadedPhoto': function(params) {\n    this.int32(2457621940);\n    this.predicate(params.file);\n  },\n  'inputChatPhoto': function(params) {\n    this.int32(2303962423);\n    this.predicate(params.id);\n  },\n  'inputGeoPointEmpty': function(params) {\n    this.int32(3837862870);\n  },\n  'inputGeoPoint': function(params) {\n    this.int32(4088900809);\n    this.double(params.lat);\n    this.double(params.long);\n  },\n  'inputPhotoEmpty': function(params) {\n    this.int32(483901197);\n  },\n  'inputPhoto': function(params) {\n    this.int32(1001634122);\n    this.long(params.id);\n    this.long(params.access_hash);\n    this.bytes(params.file_reference);\n  },\n  'inputFileLocation': function(params) {\n    this.int32(3755650017);\n    this.long(params.volume_id);\n    this.int(params.local_id);\n    this.long(params.secret);\n    this.bytes(params.file_reference);\n  },\n  'inputEncryptedFileLocation': function(params) {\n    this.int32(4112735573);\n    this.long(params.id);\n    this.long(params.access_hash);\n  },\n  'inputDocumentFileLocation': function(params) {\n    this.int32(3134223748);\n    this.long(params.id);\n    this.long(params.access_hash);\n    this.bytes(params.file_reference);\n    this.string(params.thumb_size);\n  },\n  'inputSecureFileLocation': function(params) {\n    this.int32(3418877480);\n    this.long(params.id);\n    this.long(params.access_hash);\n  },\n  'inputTakeoutFileLocation': function(params) {\n    this.int32(700340377);\n  },\n  'inputPhotoFileLocation': function(params) {\n    this.int32(1075322878);\n    this.long(params.id);\n    this.long(params.access_hash);\n    this.bytes(params.file_reference);\n    this.string(params.thumb_size);\n  },\n  'inputPhotoLegacyFileLocation': function(params) {\n    this.int32(3627312883);\n    this.long(params.id);\n    this.long(params.access_hash);\n    this.bytes(params.file_reference);\n    this.long(params.volume_id);\n    this.int(params.local_id);\n    this.long(params.secret);\n  },\n  'inputPeerPhotoFileLocation': function(params) {\n    this.int32(668375447);\n    const flags = (this.has(params.big) << 0);\n    this.int32(flags);\n    this.predicate(params.peer);\n    this.long(params.volume_id);\n    this.int(params.local_id);\n  },\n  'inputStickerSetThumb': function(params) {\n    this.int32(230353641);\n    this.predicate(params.stickerset);\n    this.long(params.volume_id);\n    this.int(params.local_id);\n  },\n  'peerUser': function(params) {\n    this.int32(2645671021);\n    this.int(params.user_id);\n  },\n  'peerChat': function(params) {\n    this.int32(3134252475);\n    this.int(params.chat_id);\n  },\n  'peerChannel': function(params) {\n    this.int32(3185435954);\n    this.int(params.channel_id);\n  },\n  'storage.fileUnknown': function(params) {\n    this.int32(2861972229);\n  },\n  'storage.filePartial': function(params) {\n    this.int32(1086091090);\n  },\n  'storage.fileJpeg': function(params) {\n    this.int32(8322574);\n  },\n  'storage.fileGif': function(params) {\n    this.int32(3403786975);\n  },\n  'storage.filePng': function(params) {\n    this.int32(172975040);\n  },\n  'storage.filePdf': function(params) {\n    this.int32(2921222285);\n  },\n  'storage.fileMp3': function(params) {\n    this.int32(1384777335);\n  },\n  'storage.fileMov': function(params) {\n    this.int32(1258941372);\n  },\n  'storage.fileMp4': function(params) {\n    this.int32(3016663268);\n  },\n  'storage.fileWebp': function(params) {\n    this.int32(276907596);\n  },\n  'userEmpty': function(params) {\n    this.int32(537022650);\n    this.int(params.id);\n  },\n  'user': function(params) {\n    this.int32(2474924225);\n    const flags = (this.has(params.self) << 10) | (this.has(params.contact) << 11) | (this.has(params.mutual_contact) << 12) | (this.has(params.deleted) << 13) | (this.has(params.bot) << 14) | (this.has(params.bot_chat_history) << 15) | (this.has(params.bot_nochats) << 16) | (this.has(params.verified) << 17) | (this.has(params.restricted) << 18) | (this.has(params.min) << 20) | (this.has(params.bot_inline_geo) << 21) | (this.has(params.support) << 23) | (this.has(params.scam) << 24) | (this.has(params.access_hash) << 0) | (this.has(params.first_name) << 1) | (this.has(params.last_name) << 2) | (this.has(params.username) << 3) | (this.has(params.phone) << 4) | (this.has(params.photo) << 5) | (this.has(params.status) << 6) | (this.has(params.bot_info_version) << 14) | (this.has(params.restriction_reason) << 18) | (this.has(params.bot_inline_placeholder) << 19) | (this.has(params.lang_code) << 22);\n    this.int32(flags);\n    this.int(params.id);\n    this.flag(this.long, params.access_hash);\n    this.flag(this.string, params.first_name);\n    this.flag(this.string, params.last_name);\n    this.flag(this.string, params.username);\n    this.flag(this.string, params.phone);\n    this.flag(this.predicate, params.photo);\n    this.flag(this.predicate, params.status);\n    this.flag(this.int, params.bot_info_version);\n    this.flagVector(this.predicate, params.restriction_reason);\n    this.flag(this.string, params.bot_inline_placeholder);\n    this.flag(this.string, params.lang_code);\n  },\n  'userProfilePhotoEmpty': function(params) {\n    this.int32(1326562017);\n  },\n  'userProfilePhoto': function(params) {\n    this.int32(3973537164);\n    this.long(params.photo_id);\n    this.predicate(params.photo_small);\n    this.predicate(params.photo_big);\n    this.int(params.dc_id);\n  },\n  'userStatusEmpty': function(params) {\n    this.int32(164646985);\n  },\n  'userStatusOnline': function(params) {\n    this.int32(3988339017);\n    this.int(params.expires);\n  },\n  'userStatusOffline': function(params) {\n    this.int32(9203775);\n    this.int(params.was_online);\n  },\n  'userStatusRecently': function(params) {\n    this.int32(3798942449);\n  },\n  'userStatusLastWeek': function(params) {\n    this.int32(129960444);\n  },\n  'userStatusLastMonth': function(params) {\n    this.int32(2011940674);\n  },\n  'chatEmpty': function(params) {\n    this.int32(2611140608);\n    this.int(params.id);\n  },\n  'chat': function(params) {\n    this.int32(1004149726);\n    const flags = (this.has(params.creator) << 0) | (this.has(params.kicked) << 1) | (this.has(params.left) << 2) | (this.has(params.deactivated) << 5) | (this.has(params.migrated_to) << 6) | (this.has(params.admin_rights) << 14) | (this.has(params.default_banned_rights) << 18);\n    this.int32(flags);\n    this.int(params.id);\n    this.string(params.title);\n    this.predicate(params.photo);\n    this.int(params.participants_count);\n    this.int(params.date);\n    this.int(params.version);\n    this.flag(this.predicate, params.migrated_to);\n    this.flag(this.predicate, params.admin_rights);\n    this.flag(this.predicate, params.default_banned_rights);\n  },\n  'chatForbidden': function(params) {\n    this.int32(120753115);\n    this.int(params.id);\n    this.string(params.title);\n  },\n  'channel': function(params) {\n    this.int32(3541734942);\n    const flags = (this.has(params.creator) << 0) | (this.has(params.left) << 2) | (this.has(params.broadcast) << 5) | (this.has(params.verified) << 7) | (this.has(params.megagroup) << 8) | (this.has(params.restricted) << 9) | (this.has(params.signatures) << 11) | (this.has(params.min) << 12) | (this.has(params.scam) << 19) | (this.has(params.has_link) << 20) | (this.has(params.has_geo) << 21) | (this.has(params.slowmode_enabled) << 22) | (this.has(params.access_hash) << 13) | (this.has(params.username) << 6) | (this.has(params.restriction_reason) << 9) | (this.has(params.admin_rights) << 14) | (this.has(params.banned_rights) << 15) | (this.has(params.default_banned_rights) << 18) | (this.has(params.participants_count) << 17);\n    this.int32(flags);\n    this.int(params.id);\n    this.flag(this.long, params.access_hash);\n    this.string(params.title);\n    this.flag(this.string, params.username);\n    this.predicate(params.photo);\n    this.int(params.date);\n    this.int(params.version);\n    this.flagVector(this.predicate, params.restriction_reason);\n    this.flag(this.predicate, params.admin_rights);\n    this.flag(this.predicate, params.banned_rights);\n    this.flag(this.predicate, params.default_banned_rights);\n    this.flag(this.int, params.participants_count);\n  },\n  'channelForbidden': function(params) {\n    this.int32(681420594);\n    const flags = (this.has(params.broadcast) << 5) | (this.has(params.megagroup) << 8) | (this.has(params.until_date) << 16);\n    this.int32(flags);\n    this.int(params.id);\n    this.long(params.access_hash);\n    this.string(params.title);\n    this.flag(this.int, params.until_date);\n  },\n  'chatFull': function(params) {\n    this.int32(461151667);\n    const flags = (this.has(params.can_set_username) << 7) | (this.has(params.has_scheduled) << 8) | (this.has(params.chat_photo) << 2) | (this.has(params.bot_info) << 3) | (this.has(params.pinned_msg_id) << 6) | (this.has(params.folder_id) << 11);\n    this.int32(flags);\n    this.int(params.id);\n    this.string(params.about);\n    this.predicate(params.participants);\n    this.flag(this.predicate, params.chat_photo);\n    this.predicate(params.notify_settings);\n    this.predicate(params.exported_invite);\n    this.flagVector(this.predicate, params.bot_info);\n    this.flag(this.int, params.pinned_msg_id);\n    this.flag(this.int, params.folder_id);\n  },\n  'channelFull': function(params) {\n    this.int32(4041631530);\n    const flags = (this.has(params.can_view_participants) << 3) | (this.has(params.can_set_username) << 6) | (this.has(params.can_set_stickers) << 7) | (this.has(params.hidden_prehistory) << 10) | (this.has(params.can_view_stats) << 12) | (this.has(params.can_set_location) << 16) | (this.has(params.has_scheduled) << 19) | (this.has(params.participants_count) << 0) | (this.has(params.admins_count) << 1) | (this.has(params.kicked_count) << 2) | (this.has(params.banned_count) << 2) | (this.has(params.online_count) << 13) | (this.has(params.migrated_from_chat_id) << 4) | (this.has(params.migrated_from_max_id) << 4) | (this.has(params.pinned_msg_id) << 5) | (this.has(params.stickerset) << 8) | (this.has(params.available_min_id) << 9) | (this.has(params.folder_id) << 11) | (this.has(params.linked_chat_id) << 14) | (this.has(params.location) << 15) | (this.has(params.slowmode_seconds) << 17) | (this.has(params.slowmode_next_send_date) << 18) | (this.has(params.stats_dc) << 12);\n    this.int32(flags);\n    this.int(params.id);\n    this.string(params.about);\n    this.flag(this.int, params.participants_count);\n    this.flag(this.int, params.admins_count);\n    this.flag(this.int, params.kicked_count);\n    this.flag(this.int, params.banned_count);\n    this.flag(this.int, params.online_count);\n    this.int(params.read_inbox_max_id);\n    this.int(params.read_outbox_max_id);\n    this.int(params.unread_count);\n    this.predicate(params.chat_photo);\n    this.predicate(params.notify_settings);\n    this.predicate(params.exported_invite);\n    this.vector(this.predicate, params.bot_info);\n    this.flag(this.int, params.migrated_from_chat_id);\n    this.flag(this.int, params.migrated_from_max_id);\n    this.flag(this.int, params.pinned_msg_id);\n    this.flag(this.predicate, params.stickerset);\n    this.flag(this.int, params.available_min_id);\n    this.flag(this.int, params.folder_id);\n    this.flag(this.int, params.linked_chat_id);\n    this.flag(this.predicate, params.location);\n    this.flag(this.int, params.slowmode_seconds);\n    this.flag(this.int, params.slowmode_next_send_date);\n    this.flag(this.int, params.stats_dc);\n    this.int(params.pts);\n  },\n  'chatParticipant': function(params) {\n    this.int32(3369552190);\n    this.int(params.user_id);\n    this.int(params.inviter_id);\n    this.int(params.date);\n  },\n  'chatParticipantCreator': function(params) {\n    this.int32(3658699658);\n    this.int(params.user_id);\n  },\n  'chatParticipantAdmin': function(params) {\n    this.int32(3805733942);\n    this.int(params.user_id);\n    this.int(params.inviter_id);\n    this.int(params.date);\n  },\n  'chatParticipantsForbidden': function(params) {\n    this.int32(4237298731);\n    const flags = (this.has(params.self_participant) << 0);\n    this.int32(flags);\n    this.int(params.chat_id);\n    this.flag(this.predicate, params.self_participant);\n  },\n  'chatParticipants': function(params) {\n    this.int32(1061556205);\n    this.int(params.chat_id);\n    this.vector(this.predicate, params.participants);\n    this.int(params.version);\n  },\n  'chatPhotoEmpty': function(params) {\n    this.int32(935395612);\n  },\n  'chatPhoto': function(params) {\n    this.int32(1197267925);\n    this.predicate(params.photo_small);\n    this.predicate(params.photo_big);\n    this.int(params.dc_id);\n  },\n  'messageEmpty': function(params) {\n    this.int32(2212879956);\n    this.int(params.id);\n  },\n  'message': function(params) {\n    this.int32(1160515173);\n    const flags = (this.has(params.out) << 1) | (this.has(params.mentioned) << 4) | (this.has(params.media_unread) << 5) | (this.has(params.silent) << 13) | (this.has(params.post) << 14) | (this.has(params.from_scheduled) << 18) | (this.has(params.legacy) << 19) | (this.has(params.edit_hide) << 21) | (this.has(params.from_id) << 8) | (this.has(params.fwd_from) << 2) | (this.has(params.via_bot_id) << 11) | (this.has(params.reply_to_msg_id) << 3) | (this.has(params.media) << 9) | (this.has(params.reply_markup) << 6) | (this.has(params.entities) << 7) | (this.has(params.views) << 10) | (this.has(params.edit_date) << 15) | (this.has(params.post_author) << 16) | (this.has(params.grouped_id) << 17) | (this.has(params.restriction_reason) << 22);\n    this.int32(flags);\n    this.int(params.id);\n    this.flag(this.int, params.from_id);\n    this.predicate(params.to_id);\n    this.flag(this.predicate, params.fwd_from);\n    this.flag(this.int, params.via_bot_id);\n    this.flag(this.int, params.reply_to_msg_id);\n    this.int(params.date);\n    this.string(params.message);\n    this.flag(this.predicate, params.media);\n    this.flag(this.predicate, params.reply_markup);\n    this.flagVector(this.predicate, params.entities);\n    this.flag(this.int, params.views);\n    this.flag(this.int, params.edit_date);\n    this.flag(this.string, params.post_author);\n    this.flag(this.long, params.grouped_id);\n    this.flagVector(this.predicate, params.restriction_reason);\n  },\n  'messageService': function(params) {\n    this.int32(2652479990);\n    const flags = (this.has(params.out) << 1) | (this.has(params.mentioned) << 4) | (this.has(params.media_unread) << 5) | (this.has(params.silent) << 13) | (this.has(params.post) << 14) | (this.has(params.legacy) << 19) | (this.has(params.from_id) << 8) | (this.has(params.reply_to_msg_id) << 3);\n    this.int32(flags);\n    this.int(params.id);\n    this.flag(this.int, params.from_id);\n    this.predicate(params.to_id);\n    this.flag(this.int, params.reply_to_msg_id);\n    this.int(params.date);\n    this.predicate(params.action);\n  },\n  'messageMediaEmpty': function(params) {\n    this.int32(1038967584);\n  },\n  'messageMediaPhoto': function(params) {\n    this.int32(1766936791);\n    const flags = (this.has(params.photo) << 0) | (this.has(params.ttl_seconds) << 2);\n    this.int32(flags);\n    this.flag(this.predicate, params.photo);\n    this.flag(this.int, params.ttl_seconds);\n  },\n  'messageMediaGeo': function(params) {\n    this.int32(1457575028);\n    this.predicate(params.geo);\n  },\n  'messageMediaContact': function(params) {\n    this.int32(3421653312);\n    this.string(params.phone_number);\n    this.string(params.first_name);\n    this.string(params.last_name);\n    this.string(params.vcard);\n    this.int(params.user_id);\n  },\n  'messageMediaUnsupported': function(params) {\n    this.int32(2676290718);\n  },\n  'messageMediaDocument': function(params) {\n    this.int32(2628808919);\n    const flags = (this.has(params.document) << 0) | (this.has(params.ttl_seconds) << 2);\n    this.int32(flags);\n    this.flag(this.predicate, params.document);\n    this.flag(this.int, params.ttl_seconds);\n  },\n  'messageMediaWebPage': function(params) {\n    this.int32(2737690112);\n    this.predicate(params.webpage);\n  },\n  'messageMediaVenue': function(params) {\n    this.int32(784356159);\n    this.predicate(params.geo);\n    this.string(params.title);\n    this.string(params.address);\n    this.string(params.provider);\n    this.string(params.venue_id);\n    this.string(params.venue_type);\n  },\n  'messageMediaGame': function(params) {\n    this.int32(4256272392);\n    this.predicate(params.game);\n  },\n  'messageMediaInvoice': function(params) {\n    this.int32(2220168007);\n    const flags = (this.has(params.shipping_address_requested) << 1) | (this.has(params.test) << 3) | (this.has(params.photo) << 0) | (this.has(params.receipt_msg_id) << 2);\n    this.int32(flags);\n    this.string(params.title);\n    this.string(params.description);\n    this.flag(this.predicate, params.photo);\n    this.flag(this.int, params.receipt_msg_id);\n    this.string(params.currency);\n    this.long(params.total_amount);\n    this.string(params.start_param);\n  },\n  'messageMediaGeoLive': function(params) {\n    this.int32(2084316681);\n    this.predicate(params.geo);\n    this.int(params.period);\n  },\n  'messageMediaPoll': function(params) {\n    this.int32(1272375192);\n    this.predicate(params.poll);\n    this.predicate(params.results);\n  },\n  'messageMediaDice': function(params) {\n    this.int32(1065280907);\n    this.int(params.value);\n    this.string(params.emoticon);\n  },\n  'messageActionEmpty': function(params) {\n    this.int32(3064919984);\n  },\n  'messageActionChatCreate': function(params) {\n    this.int32(2791541658);\n    this.string(params.title);\n    this.vector(this.int, params.users);\n  },\n  'messageActionChatEditTitle': function(params) {\n    this.int32(3047280218);\n    this.string(params.title);\n  },\n  'messageActionChatEditPhoto': function(params) {\n    this.int32(2144015272);\n    this.predicate(params.photo);\n  },\n  'messageActionChatDeletePhoto': function(params) {\n    this.int32(2514746351);\n  },\n  'messageActionChatAddUser': function(params) {\n    this.int32(1217033015);\n    this.vector(this.int, params.users);\n  },\n  'messageActionChatDeleteUser': function(params) {\n    this.int32(2997787404);\n    this.int(params.user_id);\n  },\n  'messageActionChatJoinedByLink': function(params) {\n    this.int32(4171036136);\n    this.int(params.inviter_id);\n  },\n  'messageActionChannelCreate': function(params) {\n    this.int32(2513611922);\n    this.string(params.title);\n  },\n  'messageActionChatMigrateTo': function(params) {\n    this.int32(1371385889);\n    this.int(params.channel_id);\n  },\n  'messageActionChannelMigrateFrom': function(params) {\n    this.int32(2958420718);\n    this.string(params.title);\n    this.int(params.chat_id);\n  },\n  'messageActionPinMessage': function(params) {\n    this.int32(2495428845);\n  },\n  'messageActionHistoryClear': function(params) {\n    this.int32(2679813636);\n  },\n  'messageActionGameScore': function(params) {\n    this.int32(2460428406);\n    this.long(params.game_id);\n    this.int(params.score);\n  },\n  'messageActionPaymentSentMe': function(params) {\n    this.int32(2402399015);\n    const flags = (this.has(params.info) << 0) | (this.has(params.shipping_option_id) << 1);\n    this.int32(flags);\n    this.string(params.currency);\n    this.long(params.total_amount);\n    this.bytes(params.payload);\n    this.flag(this.predicate, params.info);\n    this.flag(this.string, params.shipping_option_id);\n    this.predicate(params.charge);\n  },\n  'messageActionPaymentSent': function(params) {\n    this.int32(1080663248);\n    this.string(params.currency);\n    this.long(params.total_amount);\n  },\n  'messageActionPhoneCall': function(params) {\n    this.int32(2162236031);\n    const flags = (this.has(params.video) << 2) | (this.has(params.reason) << 0) | (this.has(params.duration) << 1);\n    this.int32(flags);\n    this.long(params.call_id);\n    this.flag(this.predicate, params.reason);\n    this.flag(this.int, params.duration);\n  },\n  'messageActionScreenshotTaken': function(params) {\n    this.int32(1200788123);\n  },\n  'messageActionCustomAction': function(params) {\n    this.int32(4209418070);\n    this.string(params.message);\n  },\n  'messageActionBotAllowed': function(params) {\n    this.int32(2884218878);\n    this.string(params.domain);\n  },\n  'messageActionSecureValuesSentMe': function(params) {\n    this.int32(455635795);\n    this.vector(this.predicate, params.values);\n    this.predicate(params.credentials);\n  },\n  'messageActionSecureValuesSent': function(params) {\n    this.int32(3646710100);\n    this.vector(this.predicate, params.types);\n  },\n  'messageActionContactSignUp': function(params) {\n    this.int32(4092747638);\n  },\n  'dialog': function(params) {\n    this.int32(739712882);\n    const flags = (this.has(params.pinned) << 2) | (this.has(params.unread_mark) << 3) | (this.has(params.pts) << 0) | (this.has(params.draft) << 1) | (this.has(params.folder_id) << 4);\n    this.int32(flags);\n    this.predicate(params.peer);\n    this.int(params.top_message);\n    this.int(params.read_inbox_max_id);\n    this.int(params.read_outbox_max_id);\n    this.int(params.unread_count);\n    this.int(params.unread_mentions_count);\n    this.predicate(params.notify_settings);\n    this.flag(this.int, params.pts);\n    this.flag(this.predicate, params.draft);\n    this.flag(this.int, params.folder_id);\n  },\n  'dialogFolder': function(params) {\n    this.int32(1908216652);\n    const flags = (this.has(params.pinned) << 2);\n    this.int32(flags);\n    this.predicate(params.folder);\n    this.predicate(params.peer);\n    this.int(params.top_message);\n    this.int(params.unread_muted_peers_count);\n    this.int(params.unread_unmuted_peers_count);\n    this.int(params.unread_muted_messages_count);\n    this.int(params.unread_unmuted_messages_count);\n  },\n  'photoEmpty': function(params) {\n    this.int32(590459437);\n    this.long(params.id);\n  },\n  'photo': function(params) {\n    this.int32(3497329829);\n    const flags = (this.has(params.has_stickers) << 0);\n    this.int32(flags);\n    this.long(params.id);\n    this.long(params.access_hash);\n    this.bytes(params.file_reference);\n    this.int(params.date);\n    this.vector(this.predicate, params.sizes);\n    this.int(params.dc_id);\n  },\n  'photoSizeEmpty': function(params) {\n    this.int32(236446268);\n    this.string(params.type);\n  },\n  'photoSize': function(params) {\n    this.int32(2009052699);\n    this.string(params.type);\n    this.predicate(params.location);\n    this.int(params.w);\n    this.int(params.h);\n    this.int(params.size);\n  },\n  'photoCachedSize': function(params) {\n    this.int32(3920049402);\n    this.string(params.type);\n    this.predicate(params.location);\n    this.int(params.w);\n    this.int(params.h);\n    this.bytes(params.bytes);\n  },\n  'photoStrippedSize': function(params) {\n    this.int32(3769678894);\n    this.string(params.type);\n    this.bytes(params.bytes);\n  },\n  'geoPointEmpty': function(params) {\n    this.int32(286776671);\n  },\n  'geoPoint': function(params) {\n    this.int32(43446532);\n    this.double(params.long);\n    this.double(params.lat);\n    this.long(params.access_hash);\n  },\n  'auth.sentCode': function(params) {\n    this.int32(1577067778);\n    const flags = (this.has(params.next_type) << 1) | (this.has(params.timeout) << 2);\n    this.int32(flags);\n    this.predicate(params.type);\n    this.string(params.phone_code_hash);\n    this.flag(this.predicate, params.next_type);\n    this.flag(this.int, params.timeout);\n  },\n  'auth.authorization': function(params) {\n    this.int32(3439659286);\n    const flags = (this.has(params.tmp_sessions) << 0);\n    this.int32(flags);\n    this.flag(this.int, params.tmp_sessions);\n    this.predicate(params.user);\n  },\n  'auth.authorizationSignUpRequired': function(params) {\n    this.int32(1148485274);\n    const flags = (this.has(params.terms_of_service) << 0);\n    this.int32(flags);\n    this.flag(this.predicate, params.terms_of_service);\n  },\n  'auth.exportedAuthorization': function(params) {\n    this.int32(3751189549);\n    this.int(params.id);\n    this.bytes(params.bytes);\n  },\n  'inputNotifyPeer': function(params) {\n    this.int32(3099351820);\n    this.predicate(params.peer);\n  },\n  'inputNotifyUsers': function(params) {\n    this.int32(423314455);\n  },\n  'inputNotifyChats': function(params) {\n    this.int32(1251338318);\n  },\n  'inputNotifyBroadcasts': function(params) {\n    this.int32(2983951486);\n  },\n  'inputPeerNotifySettings': function(params) {\n    this.int32(2621249934);\n    const flags = (this.has(params.show_previews) << 0) | (this.has(params.silent) << 1) | (this.has(params.mute_until) << 2) | (this.has(params.sound) << 3);\n    this.int32(flags);\n    this.flag(this.Bool, params.show_previews);\n    this.flag(this.Bool, params.silent);\n    this.flag(this.int, params.mute_until);\n    this.flag(this.string, params.sound);\n  },\n  'peerNotifySettings': function(params) {\n    this.int32(2941295904);\n    const flags = (this.has(params.show_previews) << 0) | (this.has(params.silent) << 1) | (this.has(params.mute_until) << 2) | (this.has(params.sound) << 3);\n    this.int32(flags);\n    this.flag(this.Bool, params.show_previews);\n    this.flag(this.Bool, params.silent);\n    this.flag(this.int, params.mute_until);\n    this.flag(this.string, params.sound);\n  },\n  'peerSettings': function(params) {\n    this.int32(2172921549);\n    const flags = (this.has(params.report_spam) << 0) | (this.has(params.add_contact) << 1) | (this.has(params.block_contact) << 2) | (this.has(params.share_contact) << 3) | (this.has(params.need_contacts_exception) << 4) | (this.has(params.report_geo) << 5);\n    this.int32(flags);\n  },\n  'wallPaper': function(params) {\n    this.int32(2755118061);\n    this.long(params.id);\n    const flags = (this.has(params.creator) << 0) | (this.has(params.default) << 1) | (this.has(params.pattern) << 3) | (this.has(params.dark) << 4) | (this.has(params.settings) << 2);\n    this.int32(flags);\n    this.long(params.access_hash);\n    this.string(params.slug);\n    this.predicate(params.document);\n    this.flag(this.predicate, params.settings);\n  },\n  'wallPaperNoFile': function(params) {\n    this.int32(2331249445);\n    const flags = (this.has(params.default) << 1) | (this.has(params.dark) << 4) | (this.has(params.settings) << 2);\n    this.int32(flags);\n    this.flag(this.predicate, params.settings);\n  },\n  'inputReportReasonSpam': function(params) {\n    this.int32(1490799288);\n  },\n  'inputReportReasonViolence': function(params) {\n    this.int32(505595789);\n  },\n  'inputReportReasonPornography': function(params) {\n    this.int32(777640226);\n  },\n  'inputReportReasonChildAbuse': function(params) {\n    this.int32(2918469347);\n  },\n  'inputReportReasonOther': function(params) {\n    this.int32(3782503690);\n    this.string(params.text);\n  },\n  'inputReportReasonCopyright': function(params) {\n    this.int32(2609510714);\n  },\n  'inputReportReasonGeoIrrelevant': function(params) {\n    this.int32(3688169197);\n  },\n  'userFull': function(params) {\n    this.int32(3992026130);\n    const flags = (this.has(params.blocked) << 0) | (this.has(params.phone_calls_available) << 4) | (this.has(params.phone_calls_private) << 5) | (this.has(params.can_pin_message) << 7) | (this.has(params.has_scheduled) << 12) | (this.has(params.about) << 1) | (this.has(params.profile_photo) << 2) | (this.has(params.bot_info) << 3) | (this.has(params.pinned_msg_id) << 6) | (this.has(params.folder_id) << 11);\n    this.int32(flags);\n    this.predicate(params.user);\n    this.flag(this.string, params.about);\n    this.predicate(params.settings);\n    this.flag(this.predicate, params.profile_photo);\n    this.predicate(params.notify_settings);\n    this.flag(this.predicate, params.bot_info);\n    this.flag(this.int, params.pinned_msg_id);\n    this.int(params.common_chats_count);\n    this.flag(this.int, params.folder_id);\n  },\n  'contact': function(params) {\n    this.int32(4178692500);\n    this.int(params.user_id);\n    this.Bool(params.mutual);\n  },\n  'importedContact': function(params) {\n    this.int32(3489825848);\n    this.int(params.user_id);\n    this.long(params.client_id);\n  },\n  'contactBlocked': function(params) {\n    this.int32(1444661369);\n    this.int(params.user_id);\n    this.int(params.date);\n  },\n  'contactStatus': function(params) {\n    this.int32(3546811489);\n    this.int(params.user_id);\n    this.predicate(params.status);\n  },\n  'contacts.contactsNotModified': function(params) {\n    this.int32(3075189202);\n  },\n  'contacts.contacts': function(params) {\n    this.int32(3941105218);\n    this.vector(this.predicate, params.contacts);\n    this.int(params.saved_count);\n    this.vector(this.predicate, params.users);\n  },\n  'contacts.importedContacts': function(params) {\n    this.int32(2010127419);\n    this.vector(this.predicate, params.imported);\n    this.vector(this.predicate, params.popular_invites);\n    this.vector(this.long, params.retry_contacts);\n    this.vector(this.predicate, params.users);\n  },\n  'contacts.blocked': function(params) {\n    this.int32(471043349);\n    this.vector(this.predicate, params.blocked);\n    this.vector(this.predicate, params.users);\n  },\n  'contacts.blockedSlice': function(params) {\n    this.int32(2416444065);\n    this.int(params.count);\n    this.vector(this.predicate, params.blocked);\n    this.vector(this.predicate, params.users);\n  },\n  'messages.dialogs': function(params) {\n    this.int32(364538944);\n    this.vector(this.predicate, params.dialogs);\n    this.vector(this.predicate, params.messages);\n    this.vector(this.predicate, params.chats);\n    this.vector(this.predicate, params.users);\n  },\n  'messages.dialogsSlice': function(params) {\n    this.int32(1910543603);\n    this.int(params.count);\n    this.vector(this.predicate, params.dialogs);\n    this.vector(this.predicate, params.messages);\n    this.vector(this.predicate, params.chats);\n    this.vector(this.predicate, params.users);\n  },\n  'messages.dialogsNotModified': function(params) {\n    this.int32(4041467286);\n    this.int(params.count);\n  },\n  'messages.messages': function(params) {\n    this.int32(2356252295);\n    this.vector(this.predicate, params.messages);\n    this.vector(this.predicate, params.chats);\n    this.vector(this.predicate, params.users);\n  },\n  'messages.messagesSlice': function(params) {\n    this.int32(3371027998);\n    const flags = (this.has(params.inexact) << 1) | (this.has(params.next_rate) << 0);\n    this.int32(flags);\n    this.int(params.count);\n    this.flag(this.int, params.next_rate);\n    this.vector(this.predicate, params.messages);\n    this.vector(this.predicate, params.chats);\n    this.vector(this.predicate, params.users);\n  },\n  'messages.channelMessages': function(params) {\n    this.int32(2569416247);\n    const flags = (this.has(params.inexact) << 1);\n    this.int32(flags);\n    this.int(params.pts);\n    this.int(params.count);\n    this.vector(this.predicate, params.messages);\n    this.vector(this.predicate, params.chats);\n    this.vector(this.predicate, params.users);\n  },\n  'messages.messagesNotModified': function(params) {\n    this.int32(1951620897);\n    this.int(params.count);\n  },\n  'messages.chats': function(params) {\n    this.int32(1694474197);\n    this.vector(this.predicate, params.chats);\n  },\n  'messages.chatsSlice': function(params) {\n    this.int32(2631405892);\n    this.int(params.count);\n    this.vector(this.predicate, params.chats);\n  },\n  'messages.chatFull': function(params) {\n    this.int32(3856126364);\n    this.predicate(params.full_chat);\n    this.vector(this.predicate, params.chats);\n    this.vector(this.predicate, params.users);\n  },\n  'messages.affectedHistory': function(params) {\n    this.int32(3025955281);\n    this.int(params.pts);\n    this.int(params.pts_count);\n    this.int(params.offset);\n  },\n  'inputMessagesFilterEmpty': function(params) {\n    this.int32(1474492012);\n  },\n  'inputMessagesFilterPhotos': function(params) {\n    this.int32(2517214492);\n  },\n  'inputMessagesFilterVideo': function(params) {\n    this.int32(2680163941);\n  },\n  'inputMessagesFilterPhotoVideo': function(params) {\n    this.int32(1458172132);\n  },\n  'inputMessagesFilterDocument': function(params) {\n    this.int32(2665345416);\n  },\n  'inputMessagesFilterUrl': function(params) {\n    this.int32(2129714567);\n  },\n  'inputMessagesFilterGif': function(params) {\n    this.int32(4291323271);\n  },\n  'inputMessagesFilterVoice': function(params) {\n    this.int32(1358283666);\n  },\n  'inputMessagesFilterMusic': function(params) {\n    this.int32(928101534);\n  },\n  'inputMessagesFilterChatPhotos': function(params) {\n    this.int32(975236280);\n  },\n  'inputMessagesFilterPhoneCalls': function(params) {\n    this.int32(2160695144);\n    const flags = (this.has(params.missed) << 0);\n    this.int32(flags);\n  },\n  'inputMessagesFilterRoundVoice': function(params) {\n    this.int32(2054952868);\n  },\n  'inputMessagesFilterRoundVideo': function(params) {\n    this.int32(3041516115);\n  },\n  'inputMessagesFilterMyMentions': function(params) {\n    this.int32(3254314650);\n  },\n  'inputMessagesFilterGeo': function(params) {\n    this.int32(3875695885);\n  },\n  'inputMessagesFilterContacts': function(params) {\n    this.int32(3764575107);\n  },\n  'updateNewMessage': function(params) {\n    this.int32(522914557);\n    this.predicate(params.message);\n    this.int(params.pts);\n    this.int(params.pts_count);\n  },\n  'updateMessageID': function(params) {\n    this.int32(1318109142);\n    this.int(params.id);\n    this.long(params.random_id);\n  },\n  'updateDeleteMessages': function(params) {\n    this.int32(2718806245);\n    this.vector(this.int, params.messages);\n    this.int(params.pts);\n    this.int(params.pts_count);\n  },\n  'updateUserTyping': function(params) {\n    this.int32(1548249383);\n    this.int(params.user_id);\n    this.predicate(params.action);\n  },\n  'updateChatUserTyping': function(params) {\n    this.int32(2590370335);\n    this.int(params.chat_id);\n    this.int(params.user_id);\n    this.predicate(params.action);\n  },\n  'updateChatParticipants': function(params) {\n    this.int32(125178264);\n    this.predicate(params.participants);\n  },\n  'updateUserStatus': function(params) {\n    this.int32(469489699);\n    this.int(params.user_id);\n    this.predicate(params.status);\n  },\n  'updateUserName': function(params) {\n    this.int32(2805148531);\n    this.int(params.user_id);\n    this.string(params.first_name);\n    this.string(params.last_name);\n    this.string(params.username);\n  },\n  'updateUserPhoto': function(params) {\n    this.int32(2503031564);\n    this.int(params.user_id);\n    this.int(params.date);\n    this.predicate(params.photo);\n    this.Bool(params.previous);\n  },\n  'updateNewEncryptedMessage': function(params) {\n    this.int32(314359194);\n    this.predicate(params.message);\n    this.int(params.qts);\n  },\n  'updateEncryptedChatTyping': function(params) {\n    this.int32(386986326);\n    this.int(params.chat_id);\n  },\n  'updateEncryption': function(params) {\n    this.int32(3030575245);\n    this.predicate(params.chat);\n    this.int(params.date);\n  },\n  'updateEncryptedMessagesRead': function(params) {\n    this.int32(956179895);\n    this.int(params.chat_id);\n    this.int(params.max_date);\n    this.int(params.date);\n  },\n  'updateChatParticipantAdd': function(params) {\n    this.int32(3930787420);\n    this.int(params.chat_id);\n    this.int(params.user_id);\n    this.int(params.inviter_id);\n    this.int(params.date);\n    this.int(params.version);\n  },\n  'updateChatParticipantDelete': function(params) {\n    this.int32(1851755554);\n    this.int(params.chat_id);\n    this.int(params.user_id);\n    this.int(params.version);\n  },\n  'updateDcOptions': function(params) {\n    this.int32(2388564083);\n    this.vector(this.predicate, params.dc_options);\n  },\n  'updateUserBlocked': function(params) {\n    this.int32(2163009562);\n    this.int(params.user_id);\n    this.Bool(params.blocked);\n  },\n  'updateNotifySettings': function(params) {\n    this.int32(3200411887);\n    this.predicate(params.peer);\n    this.predicate(params.notify_settings);\n  },\n  'updateServiceNotification': function(params) {\n    this.int32(3957614617);\n    const flags = (this.has(params.popup) << 0) | (this.has(params.inbox_date) << 1);\n    this.int32(flags);\n    this.flag(this.int, params.inbox_date);\n    this.string(params.type);\n    this.string(params.message);\n    this.predicate(params.media);\n    this.vector(this.predicate, params.entities);\n  },\n  'updatePrivacy': function(params) {\n    this.int32(3996854058);\n    this.predicate(params.key);\n    this.vector(this.predicate, params.rules);\n  },\n  'updateUserPhone': function(params) {\n    this.int32(314130811);\n    this.int(params.user_id);\n    this.string(params.phone);\n  },\n  'updateReadHistoryInbox': function(params) {\n    this.int32(2627162079);\n    const flags = (this.has(params.folder_id) << 0);\n    this.int32(flags);\n    this.flag(this.int, params.folder_id);\n    this.predicate(params.peer);\n    this.int(params.max_id);\n    this.int(params.still_unread_count);\n    this.int(params.pts);\n    this.int(params.pts_count);\n  },\n  'updateReadHistoryOutbox': function(params) {\n    this.int32(791617983);\n    this.predicate(params.peer);\n    this.int(params.max_id);\n    this.int(params.pts);\n    this.int(params.pts_count);\n  },\n  'updateWebPage': function(params) {\n    this.int32(2139689491);\n    this.predicate(params.webpage);\n    this.int(params.pts);\n    this.int(params.pts_count);\n  },\n  'updateReadMessagesContents': function(params) {\n    this.int32(1757493555);\n    this.vector(this.int, params.messages);\n    this.int(params.pts);\n    this.int(params.pts_count);\n  },\n  'updateChannelTooLong': function(params) {\n    this.int32(3942934523);\n    const flags = (this.has(params.pts) << 0);\n    this.int32(flags);\n    this.int(params.channel_id);\n    this.flag(this.int, params.pts);\n  },\n  'updateChannel': function(params) {\n    this.int32(3067369046);\n    this.int(params.channel_id);\n  },\n  'updateNewChannelMessage': function(params) {\n    this.int32(1656358105);\n    this.predicate(params.message);\n    this.int(params.pts);\n    this.int(params.pts_count);\n  },\n  'updateReadChannelInbox': function(params) {\n    this.int32(856380452);\n    const flags = (this.has(params.folder_id) << 0);\n    this.int32(flags);\n    this.flag(this.int, params.folder_id);\n    this.int(params.channel_id);\n    this.int(params.max_id);\n    this.int(params.still_unread_count);\n    this.int(params.pts);\n  },\n  'updateDeleteChannelMessages': function(params) {\n    this.int32(3279233481);\n    this.int(params.channel_id);\n    this.vector(this.int, params.messages);\n    this.int(params.pts);\n    this.int(params.pts_count);\n  },\n  'updateChannelMessageViews': function(params) {\n    this.int32(2560699211);\n    this.int(params.channel_id);\n    this.int(params.id);\n    this.int(params.views);\n  },\n  'updateChatParticipantAdmin': function(params) {\n    this.int32(3062896985);\n    this.int(params.chat_id);\n    this.int(params.user_id);\n    this.Bool(params.is_admin);\n    this.int(params.version);\n  },\n  'updateNewStickerSet': function(params) {\n    this.int32(1753886890);\n    this.predicate(params.stickerset);\n  },\n  'updateStickerSetsOrder': function(params) {\n    this.int32(196268545);\n    const flags = (this.has(params.masks) << 0);\n    this.int32(flags);\n    this.vector(this.long, params.order);\n  },\n  'updateStickerSets': function(params) {\n    this.int32(1135492588);\n  },\n  'updateSavedGifs': function(params) {\n    this.int32(2473931806);\n  },\n  'updateBotInlineQuery': function(params) {\n    this.int32(1417832080);\n    const flags = (this.has(params.geo) << 0);\n    this.int32(flags);\n    this.long(params.query_id);\n    this.int(params.user_id);\n    this.string(params.query);\n    this.flag(this.predicate, params.geo);\n    this.string(params.offset);\n  },\n  'updateBotInlineSend': function(params) {\n    this.int32(239663460);\n    const flags = (this.has(params.geo) << 0) | (this.has(params.msg_id) << 1);\n    this.int32(flags);\n    this.int(params.user_id);\n    this.string(params.query);\n    this.flag(this.predicate, params.geo);\n    this.string(params.id);\n    this.flag(this.predicate, params.msg_id);\n  },\n  'updateEditChannelMessage': function(params) {\n    this.int32(457133559);\n    this.predicate(params.message);\n    this.int(params.pts);\n    this.int(params.pts_count);\n  },\n  'updateChannelPinnedMessage': function(params) {\n    this.int32(2555978869);\n    this.int(params.channel_id);\n    this.int(params.id);\n  },\n  'updateBotCallbackQuery': function(params) {\n    this.int32(3879028705);\n    const flags = (this.has(params.data) << 0) | (this.has(params.game_short_name) << 1);\n    this.int32(flags);\n    this.long(params.query_id);\n    this.int(params.user_id);\n    this.predicate(params.peer);\n    this.int(params.msg_id);\n    this.long(params.chat_instance);\n    this.flag(this.bytes, params.data);\n    this.flag(this.string, params.game_short_name);\n  },\n  'updateEditMessage': function(params) {\n    this.int32(3825430691);\n    this.predicate(params.message);\n    this.int(params.pts);\n    this.int(params.pts_count);\n  },\n  'updateInlineBotCallbackQuery': function(params) {\n    this.int32(4191320666);\n    const flags = (this.has(params.data) << 0) | (this.has(params.game_short_name) << 1);\n    this.int32(flags);\n    this.long(params.query_id);\n    this.int(params.user_id);\n    this.predicate(params.msg_id);\n    this.long(params.chat_instance);\n    this.flag(this.bytes, params.data);\n    this.flag(this.string, params.game_short_name);\n  },\n  'updateReadChannelOutbox': function(params) {\n    this.int32(634833351);\n    this.int(params.channel_id);\n    this.int(params.max_id);\n  },\n  'updateDraftMessage': function(params) {\n    this.int32(3995842921);\n    this.predicate(params.peer);\n    this.predicate(params.draft);\n  },\n  'updateReadFeaturedStickers': function(params) {\n    this.int32(1461528386);\n  },\n  'updateRecentStickers': function(params) {\n    this.int32(2588027936);\n  },\n  'updateConfig': function(params) {\n    this.int32(2720652550);\n  },\n  'updatePtsChanged': function(params) {\n    this.int32(861169551);\n  },\n  'updateChannelWebPage': function(params) {\n    this.int32(1081547008);\n    this.int(params.channel_id);\n    this.predicate(params.webpage);\n    this.int(params.pts);\n    this.int(params.pts_count);\n  },\n  'updateDialogPinned': function(params) {\n    this.int32(1852826908);\n    const flags = (this.has(params.pinned) << 0) | (this.has(params.folder_id) << 1);\n    this.int32(flags);\n    this.flag(this.int, params.folder_id);\n    this.predicate(params.peer);\n  },\n  'updatePinnedDialogs': function(params) {\n    this.int32(4195302562);\n    const flags = (this.has(params.folder_id) << 1) | (this.has(params.order) << 0);\n    this.int32(flags);\n    this.flag(this.int, params.folder_id);\n    this.flagVector(this.predicate, params.order);\n  },\n  'updateBotWebhookJSON': function(params) {\n    this.int32(2199371971);\n    this.predicate(params.data);\n  },\n  'updateBotWebhookJSONQuery': function(params) {\n    this.int32(2610053286);\n    this.long(params.query_id);\n    this.predicate(params.data);\n    this.int(params.timeout);\n  },\n  'updateBotShippingQuery': function(params) {\n    this.int32(3771582784);\n    this.long(params.query_id);\n    this.int(params.user_id);\n    this.bytes(params.payload);\n    this.predicate(params.shipping_address);\n  },\n  'updateBotPrecheckoutQuery': function(params) {\n    this.int32(1563376297);\n    const flags = (this.has(params.info) << 0) | (this.has(params.shipping_option_id) << 1);\n    this.int32(flags);\n    this.long(params.query_id);\n    this.int(params.user_id);\n    this.bytes(params.payload);\n    this.flag(this.predicate, params.info);\n    this.flag(this.string, params.shipping_option_id);\n    this.string(params.currency);\n    this.long(params.total_amount);\n  },\n  'updatePhoneCall': function(params) {\n    this.int32(2869914398);\n    this.predicate(params.phone_call);\n  },\n  'updateLangPackTooLong': function(params) {\n    this.int32(1180041828);\n    this.string(params.lang_code);\n  },\n  'updateLangPack': function(params) {\n    this.int32(1442983757);\n    this.predicate(params.difference);\n  },\n  'updateFavedStickers': function(params) {\n    this.int32(3843135853);\n  },\n  'updateChannelReadMessagesContents': function(params) {\n    this.int32(2307472197);\n    this.int(params.channel_id);\n    this.vector(this.int, params.messages);\n  },\n  'updateContactsReset': function(params) {\n    this.int32(1887741886);\n  },\n  'updateChannelAvailableMessages': function(params) {\n    this.int32(1893427255);\n    this.int(params.channel_id);\n    this.int(params.available_min_id);\n  },\n  'updateDialogUnreadMark': function(params) {\n    this.int32(3781450179);\n    const flags = (this.has(params.unread) << 0);\n    this.int32(flags);\n    this.predicate(params.peer);\n  },\n  'updateUserPinnedMessage': function(params) {\n    this.int32(1279515160);\n    this.int(params.user_id);\n    this.int(params.id);\n  },\n  'updateChatPinnedMessage': function(params) {\n    this.int32(3775771465);\n    this.int(params.chat_id);\n    this.int(params.id);\n    this.int(params.version);\n  },\n  'updateMessagePoll': function(params) {\n    this.int32(2896258427);\n    const flags = (this.has(params.poll) << 0);\n    this.int32(flags);\n    this.long(params.poll_id);\n    this.flag(this.predicate, params.poll);\n    this.predicate(params.results);\n  },\n  'updateChatDefaultBannedRights': function(params) {\n    this.int32(1421875280);\n    this.predicate(params.peer);\n    this.predicate(params.default_banned_rights);\n    this.int(params.version);\n  },\n  'updateFolderPeers': function(params) {\n    this.int32(422972864);\n    this.vector(this.predicate, params.folder_peers);\n    this.int(params.pts);\n    this.int(params.pts_count);\n  },\n  'updatePeerSettings': function(params) {\n    this.int32(1786671974);\n    this.predicate(params.peer);\n    this.predicate(params.settings);\n  },\n  'updatePeerLocated': function(params) {\n    this.int32(3031420848);\n    this.vector(this.predicate, params.peers);\n  },\n  'updateNewScheduledMessage': function(params) {\n    this.int32(967122427);\n    this.predicate(params.message);\n  },\n  'updateDeleteScheduledMessages': function(params) {\n    this.int32(2424728814);\n    this.predicate(params.peer);\n    this.vector(this.int, params.messages);\n  },\n  'updateTheme': function(params) {\n    this.int32(2182544291);\n    this.predicate(params.theme);\n  },\n  'updateGeoLiveViewed': function(params) {\n    this.int32(2267003193);\n    this.predicate(params.peer);\n    this.int(params.msg_id);\n  },\n  'updateLoginToken': function(params) {\n    this.int32(1448076945);\n  },\n  'updateMessagePollVote': function(params) {\n    this.int32(1123585836);\n    this.long(params.poll_id);\n    this.int(params.user_id);\n    this.vector(this.bytes, params.options);\n  },\n  'updateDialogFilter': function(params) {\n    this.int32(654302845);\n    const flags = (this.has(params.filter) << 0);\n    this.int32(flags);\n    this.int(params.id);\n    this.flag(this.predicate, params.filter);\n  },\n  'updateDialogFilterOrder': function(params) {\n    this.int32(2782339333);\n    this.vector(this.int, params.order);\n  },\n  'updateDialogFilters': function(params) {\n    this.int32(889491791);\n  },\n  'updates.state': function(params) {\n    this.int32(2775329342);\n    this.int(params.pts);\n    this.int(params.qts);\n    this.int(params.date);\n    this.int(params.seq);\n    this.int(params.unread_count);\n  },\n  'updates.differenceEmpty': function(params) {\n    this.int32(1567990072);\n    this.int(params.date);\n    this.int(params.seq);\n  },\n  'updates.difference': function(params) {\n    this.int32(16030880);\n    this.vector(this.predicate, params.new_messages);\n    this.vector(this.predicate, params.new_encrypted_messages);\n    this.vector(this.predicate, params.other_updates);\n    this.vector(this.predicate, params.chats);\n    this.vector(this.predicate, params.users);\n    this.predicate(params.state);\n  },\n  'updates.differenceSlice': function(params) {\n    this.int32(2835028353);\n    this.vector(this.predicate, params.new_messages);\n    this.vector(this.predicate, params.new_encrypted_messages);\n    this.vector(this.predicate, params.other_updates);\n    this.vector(this.predicate, params.chats);\n    this.vector(this.predicate, params.users);\n    this.predicate(params.intermediate_state);\n  },\n  'updates.differenceTooLong': function(params) {\n    this.int32(1258196845);\n    this.int(params.pts);\n  },\n  'updatesTooLong': function(params) {\n    this.int32(3809980286);\n  },\n  'updateShortMessage': function(params) {\n    this.int32(2437922577);\n    const flags = (this.has(params.out) << 1) | (this.has(params.mentioned) << 4) | (this.has(params.media_unread) << 5) | (this.has(params.silent) << 13) | (this.has(params.fwd_from) << 2) | (this.has(params.via_bot_id) << 11) | (this.has(params.reply_to_msg_id) << 3) | (this.has(params.entities) << 7);\n    this.int32(flags);\n    this.int(params.id);\n    this.int(params.user_id);\n    this.string(params.message);\n    this.int(params.pts);\n    this.int(params.pts_count);\n    this.int(params.date);\n    this.flag(this.predicate, params.fwd_from);\n    this.flag(this.int, params.via_bot_id);\n    this.flag(this.int, params.reply_to_msg_id);\n    this.flagVector(this.predicate, params.entities);\n  },\n  'updateShortChatMessage': function(params) {\n    this.int32(377562760);\n    const flags = (this.has(params.out) << 1) | (this.has(params.mentioned) << 4) | (this.has(params.media_unread) << 5) | (this.has(params.silent) << 13) | (this.has(params.fwd_from) << 2) | (this.has(params.via_bot_id) << 11) | (this.has(params.reply_to_msg_id) << 3) | (this.has(params.entities) << 7);\n    this.int32(flags);\n    this.int(params.id);\n    this.int(params.from_id);\n    this.int(params.chat_id);\n    this.string(params.message);\n    this.int(params.pts);\n    this.int(params.pts_count);\n    this.int(params.date);\n    this.flag(this.predicate, params.fwd_from);\n    this.flag(this.int, params.via_bot_id);\n    this.flag(this.int, params.reply_to_msg_id);\n    this.flagVector(this.predicate, params.entities);\n  },\n  'updateShort': function(params) {\n    this.int32(2027216577);\n    this.predicate(params.update);\n    this.int(params.date);\n  },\n  'updatesCombined': function(params) {\n    this.int32(1918567619);\n    this.vector(this.predicate, params.updates);\n    this.vector(this.predicate, params.users);\n    this.vector(this.predicate, params.chats);\n    this.int(params.date);\n    this.int(params.seq_start);\n    this.int(params.seq);\n  },\n  'updates': function(params) {\n    this.int32(1957577280);\n    this.vector(this.predicate, params.updates);\n    this.vector(this.predicate, params.users);\n    this.vector(this.predicate, params.chats);\n    this.int(params.date);\n    this.int(params.seq);\n  },\n  'updateShortSentMessage': function(params) {\n    this.int32(301019932);\n    const flags = (this.has(params.out) << 1) | (this.has(params.media) << 9) | (this.has(params.entities) << 7);\n    this.int32(flags);\n    this.int(params.id);\n    this.int(params.pts);\n    this.int(params.pts_count);\n    this.int(params.date);\n    this.flag(this.predicate, params.media);\n    this.flagVector(this.predicate, params.entities);\n  },\n  'photos.photos': function(params) {\n    this.int32(2378853029);\n    this.vector(this.predicate, params.photos);\n    this.vector(this.predicate, params.users);\n  },\n  'photos.photosSlice': function(params) {\n    this.int32(352657236);\n    this.int(params.count);\n    this.vector(this.predicate, params.photos);\n    this.vector(this.predicate, params.users);\n  },\n  'photos.photo': function(params) {\n    this.int32(539045032);\n    this.predicate(params.photo);\n    this.vector(this.predicate, params.users);\n  },\n  'upload.file': function(params) {\n    this.int32(157948117);\n    this.predicate(params.type);\n    this.int(params.mtime);\n    this.bytes(params.bytes);\n  },\n  'upload.fileCdnRedirect': function(params) {\n    this.int32(4052539972);\n    this.int(params.dc_id);\n    this.bytes(params.file_token);\n    this.bytes(params.encryption_key);\n    this.bytes(params.encryption_iv);\n    this.vector(this.predicate, params.file_hashes);\n  },\n  'dcOption': function(params) {\n    this.int32(414687501);\n    const flags = (this.has(params.ipv6) << 0) | (this.has(params.media_only) << 1) | (this.has(params.tcpo_only) << 2) | (this.has(params.cdn) << 3) | (this.has(params.static) << 4) | (this.has(params.secret) << 10);\n    this.int32(flags);\n    this.int(params.id);\n    this.string(params.ip_address);\n    this.int(params.port);\n    this.flag(this.bytes, params.secret);\n  },\n  'config': function(params) {\n    this.int32(856375399);\n    const flags = (this.has(params.phonecalls_enabled) << 1) | (this.has(params.default_p2p_contacts) << 3) | (this.has(params.preload_featured_stickers) << 4) | (this.has(params.ignore_phone_entities) << 5) | (this.has(params.revoke_pm_inbox) << 6) | (this.has(params.blocked_mode) << 8) | (this.has(params.pfs_enabled) << 13) | (this.has(params.tmp_sessions) << 0) | (this.has(params.autoupdate_url_prefix) << 7) | (this.has(params.gif_search_username) << 9) | (this.has(params.venue_search_username) << 10) | (this.has(params.img_search_username) << 11) | (this.has(params.static_maps_provider) << 12) | (this.has(params.suggested_lang_code) << 2) | (this.has(params.lang_pack_version) << 2) | (this.has(params.base_lang_pack_version) << 2);\n    this.int32(flags);\n    this.int(params.date);\n    this.int(params.expires);\n    this.Bool(params.test_mode);\n    this.int(params.this_dc);\n    this.vector(this.predicate, params.dc_options);\n    this.string(params.dc_txt_domain_name);\n    this.int(params.chat_size_max);\n    this.int(params.megagroup_size_max);\n    this.int(params.forwarded_count_max);\n    this.int(params.online_update_period_ms);\n    this.int(params.offline_blur_timeout_ms);\n    this.int(params.offline_idle_timeout_ms);\n    this.int(params.online_cloud_timeout_ms);\n    this.int(params.notify_cloud_delay_ms);\n    this.int(params.notify_default_delay_ms);\n    this.int(params.push_chat_period_ms);\n    this.int(params.push_chat_limit);\n    this.int(params.saved_gifs_limit);\n    this.int(params.edit_time_limit);\n    this.int(params.revoke_time_limit);\n    this.int(params.revoke_pm_time_limit);\n    this.int(params.rating_e_decay);\n    this.int(params.stickers_recent_limit);\n    this.int(params.stickers_faved_limit);\n    this.int(params.channels_read_media_period);\n    this.flag(this.int, params.tmp_sessions);\n    this.int(params.pinned_dialogs_count_max);\n    this.int(params.pinned_infolder_count_max);\n    this.int(params.call_receive_timeout_ms);\n    this.int(params.call_ring_timeout_ms);\n    this.int(params.call_connect_timeout_ms);\n    this.int(params.call_packet_timeout_ms);\n    this.string(params.me_url_prefix);\n    this.flag(this.string, params.autoupdate_url_prefix);\n    this.flag(this.string, params.gif_search_username);\n    this.flag(this.string, params.venue_search_username);\n    this.flag(this.string, params.img_search_username);\n    this.flag(this.string, params.static_maps_provider);\n    this.int(params.caption_length_max);\n    this.int(params.message_length_max);\n    this.int(params.webfile_dc_id);\n    this.flag(this.string, params.suggested_lang_code);\n    this.flag(this.int, params.lang_pack_version);\n    this.flag(this.int, params.base_lang_pack_version);\n  },\n  'nearestDc': function(params) {\n    this.int32(2384074613);\n    this.string(params.country);\n    this.int(params.this_dc);\n    this.int(params.nearest_dc);\n  },\n  'help.appUpdate': function(params) {\n    this.int32(497489295);\n    const flags = (this.has(params.can_not_skip) << 0) | (this.has(params.document) << 1) | (this.has(params.url) << 2);\n    this.int32(flags);\n    this.int(params.id);\n    this.string(params.version);\n    this.string(params.text);\n    this.vector(this.predicate, params.entities);\n    this.flag(this.predicate, params.document);\n    this.flag(this.string, params.url);\n  },\n  'help.noAppUpdate': function(params) {\n    this.int32(3294258486);\n  },\n  'help.inviteText': function(params) {\n    this.int32(415997816);\n    this.string(params.message);\n  },\n  'encryptedChatEmpty': function(params) {\n    this.int32(2877210784);\n    this.int(params.id);\n  },\n  'encryptedChatWaiting': function(params) {\n    this.int32(1006044124);\n    this.int(params.id);\n    this.long(params.access_hash);\n    this.int(params.date);\n    this.int(params.admin_id);\n    this.int(params.participant_id);\n  },\n  'encryptedChatRequested': function(params) {\n    this.int32(3363328638);\n    this.int(params.id);\n    this.long(params.access_hash);\n    this.int(params.date);\n    this.int(params.admin_id);\n    this.int(params.participant_id);\n    this.bytes(params.g_a);\n  },\n  'encryptedChat': function(params) {\n    this.int32(4199992886);\n    this.int(params.id);\n    this.long(params.access_hash);\n    this.int(params.date);\n    this.int(params.admin_id);\n    this.int(params.participant_id);\n    this.bytes(params.g_a_or_b);\n    this.long(params.key_fingerprint);\n  },\n  'encryptedChatDiscarded': function(params) {\n    this.int32(332848423);\n    this.int(params.id);\n  },\n  'inputEncryptedChat': function(params) {\n    this.int32(4047615457);\n    this.int(params.chat_id);\n    this.long(params.access_hash);\n  },\n  'encryptedFileEmpty': function(params) {\n    this.int32(3256830334);\n  },\n  'encryptedFile': function(params) {\n    this.int32(1248893260);\n    this.long(params.id);\n    this.long(params.access_hash);\n    this.int(params.size);\n    this.int(params.dc_id);\n    this.int(params.key_fingerprint);\n  },\n  'inputEncryptedFileEmpty': function(params) {\n    this.int32(406307684);\n  },\n  'inputEncryptedFileUploaded': function(params) {\n    this.int32(1690108678);\n    this.long(params.id);\n    this.int(params.parts);\n    this.string(params.md5_checksum);\n    this.int(params.key_fingerprint);\n  },\n  'inputEncryptedFile': function(params) {\n    this.int32(1511503333);\n    this.long(params.id);\n    this.long(params.access_hash);\n  },\n  'inputEncryptedFileBigUploaded': function(params) {\n    this.int32(767652808);\n    this.long(params.id);\n    this.int(params.parts);\n    this.int(params.key_fingerprint);\n  },\n  'encryptedMessage': function(params) {\n    this.int32(3977822488);\n    this.long(params.random_id);\n    this.int(params.chat_id);\n    this.int(params.date);\n    this.bytes(params.bytes);\n    this.predicate(params.file);\n  },\n  'encryptedMessageService': function(params) {\n    this.int32(594758406);\n    this.long(params.random_id);\n    this.int(params.chat_id);\n    this.int(params.date);\n    this.bytes(params.bytes);\n  },\n  'messages.dhConfigNotModified': function(params) {\n    this.int32(3236054581);\n    this.bytes(params.random);\n  },\n  'messages.dhConfig': function(params) {\n    this.int32(740433629);\n    this.int(params.g);\n    this.bytes(params.p);\n    this.int(params.version);\n    this.bytes(params.random);\n  },\n  'messages.sentEncryptedMessage': function(params) {\n    this.int32(1443858741);\n    this.int(params.date);\n  },\n  'messages.sentEncryptedFile': function(params) {\n    this.int32(2492727090);\n    this.int(params.date);\n    this.predicate(params.file);\n  },\n  'inputDocumentEmpty': function(params) {\n    this.int32(1928391342);\n  },\n  'inputDocument': function(params) {\n    this.int32(448771445);\n    this.long(params.id);\n    this.long(params.access_hash);\n    this.bytes(params.file_reference);\n  },\n  'documentEmpty': function(params) {\n    this.int32(922273905);\n    this.long(params.id);\n  },\n  'document': function(params) {\n    this.int32(2611125441);\n    const flags = (this.has(params.thumbs) << 0);\n    this.int32(flags);\n    this.long(params.id);\n    this.long(params.access_hash);\n    this.bytes(params.file_reference);\n    this.int(params.date);\n    this.string(params.mime_type);\n    this.int(params.size);\n    this.flagVector(this.predicate, params.thumbs);\n    this.int(params.dc_id);\n    this.vector(this.predicate, params.attributes);\n  },\n  'help.support': function(params) {\n    this.int32(398898678);\n    this.string(params.phone_number);\n    this.predicate(params.user);\n  },\n  'notifyPeer': function(params) {\n    this.int32(2681474008);\n    this.predicate(params.peer);\n  },\n  'notifyUsers': function(params) {\n    this.int32(3033021260);\n  },\n  'notifyChats': function(params) {\n    this.int32(3221737155);\n  },\n  'notifyBroadcasts': function(params) {\n    this.int32(3591563503);\n  },\n  'sendMessageTypingAction': function(params) {\n    this.int32(381645902);\n  },\n  'sendMessageCancelAction': function(params) {\n    this.int32(4250847477);\n  },\n  'sendMessageRecordVideoAction': function(params) {\n    this.int32(2710034031);\n  },\n  'sendMessageUploadVideoAction': function(params) {\n    this.int32(3916839660);\n    this.int(params.progress);\n  },\n  'sendMessageRecordAudioAction': function(params) {\n    this.int32(3576656887);\n  },\n  'sendMessageUploadAudioAction': function(params) {\n    this.int32(4082227115);\n    this.int(params.progress);\n  },\n  'sendMessageUploadPhotoAction': function(params) {\n    this.int32(3520285222);\n    this.int(params.progress);\n  },\n  'sendMessageUploadDocumentAction': function(params) {\n    this.int32(2852968932);\n    this.int(params.progress);\n  },\n  'sendMessageGeoLocationAction': function(params) {\n    this.int32(393186209);\n  },\n  'sendMessageChooseContactAction': function(params) {\n    this.int32(1653390447);\n  },\n  'sendMessageGamePlayAction': function(params) {\n    this.int32(3714748232);\n  },\n  'sendMessageRecordRoundAction': function(params) {\n    this.int32(2297593788);\n  },\n  'sendMessageUploadRoundAction': function(params) {\n    this.int32(608050278);\n    this.int(params.progress);\n  },\n  'contacts.found': function(params) {\n    this.int32(3004386717);\n    this.vector(this.predicate, params.my_results);\n    this.vector(this.predicate, params.results);\n    this.vector(this.predicate, params.chats);\n    this.vector(this.predicate, params.users);\n  },\n  'inputPrivacyKeyStatusTimestamp': function(params) {\n    this.int32(1335282456);\n  },\n  'inputPrivacyKeyChatInvite': function(params) {\n    this.int32(3187344422);\n  },\n  'inputPrivacyKeyPhoneCall': function(params) {\n    this.int32(4206550111);\n  },\n  'inputPrivacyKeyPhoneP2P': function(params) {\n    this.int32(3684593874);\n  },\n  'inputPrivacyKeyForwards': function(params) {\n    this.int32(2765966344);\n  },\n  'inputPrivacyKeyProfilePhoto': function(params) {\n    this.int32(1461304012);\n  },\n  'inputPrivacyKeyPhoneNumber': function(params) {\n    this.int32(55761658);\n  },\n  'inputPrivacyKeyAddedByPhone': function(params) {\n    this.int32(3508640733);\n  },\n  'privacyKeyStatusTimestamp': function(params) {\n    this.int32(3157175088);\n  },\n  'privacyKeyChatInvite': function(params) {\n    this.int32(1343122938);\n  },\n  'privacyKeyPhoneCall': function(params) {\n    this.int32(1030105979);\n  },\n  'privacyKeyPhoneP2P': function(params) {\n    this.int32(961092808);\n  },\n  'privacyKeyForwards': function(params) {\n    this.int32(1777096355);\n  },\n  'privacyKeyProfilePhoto': function(params) {\n    this.int32(2517966829);\n  },\n  'privacyKeyPhoneNumber': function(params) {\n    this.int32(3516589165);\n  },\n  'privacyKeyAddedByPhone': function(params) {\n    this.int32(1124062251);\n  },\n  'inputPrivacyValueAllowContacts': function(params) {\n    this.int32(218751099);\n  },\n  'inputPrivacyValueAllowAll': function(params) {\n    this.int32(407582158);\n  },\n  'inputPrivacyValueAllowUsers': function(params) {\n    this.int32(320652927);\n    this.vector(this.predicate, params.users);\n  },\n  'inputPrivacyValueDisallowContacts': function(params) {\n    this.int32(195371015);\n  },\n  'inputPrivacyValueDisallowAll': function(params) {\n    this.int32(3597362889);\n  },\n  'inputPrivacyValueDisallowUsers': function(params) {\n    this.int32(2417034343);\n    this.vector(this.predicate, params.users);\n  },\n  'inputPrivacyValueAllowChatParticipants': function(params) {\n    this.int32(1283572154);\n    this.vector(this.int, params.chats);\n  },\n  'inputPrivacyValueDisallowChatParticipants': function(params) {\n    this.int32(3626197935);\n    this.vector(this.int, params.chats);\n  },\n  'privacyValueAllowContacts': function(params) {\n    this.int32(4294843308);\n  },\n  'privacyValueAllowAll': function(params) {\n    this.int32(1698855810);\n  },\n  'privacyValueAllowUsers': function(params) {\n    this.int32(1297858060);\n    this.vector(this.int, params.users);\n  },\n  'privacyValueDisallowContacts': function(params) {\n    this.int32(4169726490);\n  },\n  'privacyValueDisallowAll': function(params) {\n    this.int32(2339628899);\n  },\n  'privacyValueDisallowUsers': function(params) {\n    this.int32(209668535);\n    this.vector(this.int, params.users);\n  },\n  'privacyValueAllowChatParticipants': function(params) {\n    this.int32(415136107);\n    this.vector(this.int, params.chats);\n  },\n  'privacyValueDisallowChatParticipants': function(params) {\n    this.int32(2897086096);\n    this.vector(this.int, params.chats);\n  },\n  'account.privacyRules': function(params) {\n    this.int32(1352683077);\n    this.vector(this.predicate, params.rules);\n    this.vector(this.predicate, params.chats);\n    this.vector(this.predicate, params.users);\n  },\n  'accountDaysTTL': function(params) {\n    this.int32(3100684255);\n    this.int(params.days);\n  },\n  'documentAttributeImageSize': function(params) {\n    this.int32(1815593308);\n    this.int(params.w);\n    this.int(params.h);\n  },\n  'documentAttributeAnimated': function(params) {\n    this.int32(297109817);\n  },\n  'documentAttributeSticker': function(params) {\n    this.int32(1662637586);\n    const flags = (this.has(params.mask) << 1) | (this.has(params.mask_coords) << 0);\n    this.int32(flags);\n    this.string(params.alt);\n    this.predicate(params.stickerset);\n    this.flag(this.predicate, params.mask_coords);\n  },\n  'documentAttributeVideo': function(params) {\n    this.int32(250621158);\n    const flags = (this.has(params.round_message) << 0) | (this.has(params.supports_streaming) << 1);\n    this.int32(flags);\n    this.int(params.duration);\n    this.int(params.w);\n    this.int(params.h);\n  },\n  'documentAttributeAudio': function(params) {\n    this.int32(2555574726);\n    const flags = (this.has(params.voice) << 10) | (this.has(params.title) << 0) | (this.has(params.performer) << 1) | (this.has(params.waveform) << 2);\n    this.int32(flags);\n    this.int(params.duration);\n    this.flag(this.string, params.title);\n    this.flag(this.string, params.performer);\n    this.flag(this.bytes, params.waveform);\n  },\n  'documentAttributeFilename': function(params) {\n    this.int32(358154344);\n    this.string(params.file_name);\n  },\n  'documentAttributeHasStickers': function(params) {\n    this.int32(2550256375);\n  },\n  'messages.stickersNotModified': function(params) {\n    this.int32(4050950690);\n  },\n  'messages.stickers': function(params) {\n    this.int32(3831077821);\n    this.int(params.hash);\n    this.vector(this.predicate, params.stickers);\n  },\n  'stickerPack': function(params) {\n    this.int32(313694676);\n    this.string(params.emoticon);\n    this.vector(this.long, params.documents);\n  },\n  'messages.allStickersNotModified': function(params) {\n    this.int32(3898999491);\n  },\n  'messages.allStickers': function(params) {\n    this.int32(3992797279);\n    this.int(params.hash);\n    this.vector(this.predicate, params.sets);\n  },\n  'messages.affectedMessages': function(params) {\n    this.int32(2228326789);\n    this.int(params.pts);\n    this.int(params.pts_count);\n  },\n  'webPageEmpty': function(params) {\n    this.int32(3943987176);\n    this.long(params.id);\n  },\n  'webPagePending': function(params) {\n    this.int32(3313949212);\n    this.long(params.id);\n    this.int(params.date);\n  },\n  'webPage': function(params) {\n    this.int32(3902555570);\n    const flags = (this.has(params.type) << 0) | (this.has(params.site_name) << 1) | (this.has(params.title) << 2) | (this.has(params.description) << 3) | (this.has(params.photo) << 4) | (this.has(params.embed_url) << 5) | (this.has(params.embed_type) << 5) | (this.has(params.embed_width) << 6) | (this.has(params.embed_height) << 6) | (this.has(params.duration) << 7) | (this.has(params.author) << 8) | (this.has(params.document) << 9) | (this.has(params.cached_page) << 10) | (this.has(params.attributes) << 12);\n    this.int32(flags);\n    this.long(params.id);\n    this.string(params.url);\n    this.string(params.display_url);\n    this.int(params.hash);\n    this.flag(this.string, params.type);\n    this.flag(this.string, params.site_name);\n    this.flag(this.string, params.title);\n    this.flag(this.string, params.description);\n    this.flag(this.predicate, params.photo);\n    this.flag(this.string, params.embed_url);\n    this.flag(this.string, params.embed_type);\n    this.flag(this.int, params.embed_width);\n    this.flag(this.int, params.embed_height);\n    this.flag(this.int, params.duration);\n    this.flag(this.string, params.author);\n    this.flag(this.predicate, params.document);\n    this.flag(this.predicate, params.cached_page);\n    this.flagVector(this.predicate, params.attributes);\n  },\n  'webPageNotModified': function(params) {\n    this.int32(1930545681);\n    const flags = (this.has(params.cached_page_views) << 0);\n    this.int32(flags);\n    this.flag(this.int, params.cached_page_views);\n  },\n  'authorization': function(params) {\n    this.int32(2902578717);\n    const flags = (this.has(params.current) << 0) | (this.has(params.official_app) << 1) | (this.has(params.password_pending) << 2);\n    this.int32(flags);\n    this.long(params.hash);\n    this.string(params.device_model);\n    this.string(params.platform);\n    this.string(params.system_version);\n    this.int(params.api_id);\n    this.string(params.app_name);\n    this.string(params.app_version);\n    this.int(params.date_created);\n    this.int(params.date_active);\n    this.string(params.ip);\n    this.string(params.country);\n    this.string(params.region);\n  },\n  'account.authorizations': function(params) {\n    this.int32(307276766);\n    this.vector(this.predicate, params.authorizations);\n  },\n  'account.password': function(params) {\n    this.int32(2904965624);\n    const flags = (this.has(params.has_recovery) << 0) | (this.has(params.has_secure_values) << 1) | (this.has(params.has_password) << 2) | (this.has(params.current_algo) << 2) | (this.has(params.srp_B) << 2) | (this.has(params.srp_id) << 2) | (this.has(params.hint) << 3) | (this.has(params.email_unconfirmed_pattern) << 4);\n    this.int32(flags);\n    this.flag(this.predicate, params.current_algo);\n    this.flag(this.bytes, params.srp_B);\n    this.flag(this.long, params.srp_id);\n    this.flag(this.string, params.hint);\n    this.flag(this.string, params.email_unconfirmed_pattern);\n    this.predicate(params.new_algo);\n    this.predicate(params.new_secure_algo);\n    this.bytes(params.secure_random);\n  },\n  'account.passwordSettings': function(params) {\n    this.int32(2589733861);\n    const flags = (this.has(params.email) << 0) | (this.has(params.secure_settings) << 1);\n    this.int32(flags);\n    this.flag(this.string, params.email);\n    this.flag(this.predicate, params.secure_settings);\n  },\n  'account.passwordInputSettings': function(params) {\n    this.int32(3258394569);\n    const flags = (this.has(params.new_algo) << 0) | (this.has(params.new_password_hash) << 0) | (this.has(params.hint) << 0) | (this.has(params.email) << 1) | (this.has(params.new_secure_settings) << 2);\n    this.int32(flags);\n    this.flag(this.predicate, params.new_algo);\n    this.flag(this.bytes, params.new_password_hash);\n    this.flag(this.string, params.hint);\n    this.flag(this.string, params.email);\n    this.flag(this.predicate, params.new_secure_settings);\n  },\n  'auth.passwordRecovery': function(params) {\n    this.int32(326715557);\n    this.string(params.email_pattern);\n  },\n  'receivedNotifyMessage': function(params) {\n    this.int32(2743383929);\n    this.int(params.id);\n    this.int(params.flags);\n  },\n  'chatInviteEmpty': function(params) {\n    this.int32(1776236393);\n  },\n  'chatInviteExported': function(params) {\n    this.int32(4230874556);\n    this.string(params.link);\n  },\n  'chatInviteAlready': function(params) {\n    this.int32(1516793212);\n    this.predicate(params.chat);\n  },\n  'chatInvite': function(params) {\n    this.int32(3754096014);\n    const flags = (this.has(params.channel) << 0) | (this.has(params.broadcast) << 1) | (this.has(params.public) << 2) | (this.has(params.megagroup) << 3) | (this.has(params.participants) << 4);\n    this.int32(flags);\n    this.string(params.title);\n    this.predicate(params.photo);\n    this.int(params.participants_count);\n    this.flagVector(this.predicate, params.participants);\n  },\n  'inputStickerSetEmpty': function(params) {\n    this.int32(4290128789);\n  },\n  'inputStickerSetID': function(params) {\n    this.int32(2649203305);\n    this.long(params.id);\n    this.long(params.access_hash);\n  },\n  'inputStickerSetShortName': function(params) {\n    this.int32(2250033312);\n    this.string(params.short_name);\n  },\n  'inputStickerSetAnimatedEmoji': function(params) {\n    this.int32(42402760);\n  },\n  'inputStickerSetDice': function(params) {\n    this.int32(3867103758);\n    this.string(params.emoticon);\n  },\n  'stickerSet': function(params) {\n    this.int32(4004802343);\n    const flags = (this.has(params.archived) << 1) | (this.has(params.official) << 2) | (this.has(params.masks) << 3) | (this.has(params.animated) << 5) | (this.has(params.installed_date) << 0) | (this.has(params.thumb) << 4) | (this.has(params.thumb_dc_id) << 4);\n    this.int32(flags);\n    this.flag(this.int, params.installed_date);\n    this.long(params.id);\n    this.long(params.access_hash);\n    this.string(params.title);\n    this.string(params.short_name);\n    this.flag(this.predicate, params.thumb);\n    this.flag(this.int, params.thumb_dc_id);\n    this.int(params.count);\n    this.int(params.hash);\n  },\n  'messages.stickerSet': function(params) {\n    this.int32(3054118054);\n    this.predicate(params.set);\n    this.vector(this.predicate, params.packs);\n    this.vector(this.predicate, params.documents);\n  },\n  'botCommand': function(params) {\n    this.int32(3262826695);\n    this.string(params.command);\n    this.string(params.description);\n  },\n  'botInfo': function(params) {\n    this.int32(2565348666);\n    this.int(params.user_id);\n    this.string(params.description);\n    this.vector(this.predicate, params.commands);\n  },\n  'keyboardButton': function(params) {\n    this.int32(2734311552);\n    this.string(params.text);\n  },\n  'keyboardButtonUrl': function(params) {\n    this.int32(629866245);\n    this.string(params.text);\n    this.string(params.url);\n  },\n  'keyboardButtonCallback': function(params) {\n    this.int32(1748655686);\n    this.string(params.text);\n    this.bytes(params.data);\n  },\n  'keyboardButtonRequestPhone': function(params) {\n    this.int32(2976541737);\n    this.string(params.text);\n  },\n  'keyboardButtonRequestGeoLocation': function(params) {\n    this.int32(4235815743);\n    this.string(params.text);\n  },\n  'keyboardButtonSwitchInline': function(params) {\n    this.int32(90744648);\n    const flags = (this.has(params.same_peer) << 0);\n    this.int32(flags);\n    this.string(params.text);\n    this.string(params.query);\n  },\n  'keyboardButtonGame': function(params) {\n    this.int32(1358175439);\n    this.string(params.text);\n  },\n  'keyboardButtonBuy': function(params) {\n    this.int32(2950250427);\n    this.string(params.text);\n  },\n  'keyboardButtonUrlAuth': function(params) {\n    this.int32(280464681);\n    const flags = (this.has(params.fwd_text) << 0);\n    this.int32(flags);\n    this.string(params.text);\n    this.flag(this.string, params.fwd_text);\n    this.string(params.url);\n    this.int(params.button_id);\n  },\n  'inputKeyboardButtonUrlAuth': function(params) {\n    this.int32(3492708308);\n    const flags = (this.has(params.request_write_access) << 0) | (this.has(params.fwd_text) << 1);\n    this.int32(flags);\n    this.string(params.text);\n    this.flag(this.string, params.fwd_text);\n    this.string(params.url);\n    this.predicate(params.bot);\n  },\n  'keyboardButtonRequestPoll': function(params) {\n    this.int32(3150401885);\n    const flags = (this.has(params.quiz) << 0);\n    this.int32(flags);\n    this.flag(this.Bool, params.quiz);\n    this.string(params.text);\n  },\n  'keyboardButtonRow': function(params) {\n    this.int32(2002815875);\n    this.vector(this.predicate, params.buttons);\n  },\n  'replyKeyboardHide': function(params) {\n    this.int32(2688441221);\n    const flags = (this.has(params.selective) << 2);\n    this.int32(flags);\n  },\n  'replyKeyboardForceReply': function(params) {\n    this.int32(4094724768);\n    const flags = (this.has(params.single_use) << 1) | (this.has(params.selective) << 2);\n    this.int32(flags);\n  },\n  'replyKeyboardMarkup': function(params) {\n    this.int32(889353612);\n    const flags = (this.has(params.resize) << 0) | (this.has(params.single_use) << 1) | (this.has(params.selective) << 2);\n    this.int32(flags);\n    this.vector(this.predicate, params.rows);\n  },\n  'replyInlineMarkup': function(params) {\n    this.int32(1218642516);\n    this.vector(this.predicate, params.rows);\n  },\n  'messageEntityUnknown': function(params) {\n    this.int32(3146955413);\n    this.int(params.offset);\n    this.int(params.length);\n  },\n  'messageEntityMention': function(params) {\n    this.int32(4194588573);\n    this.int(params.offset);\n    this.int(params.length);\n  },\n  'messageEntityHashtag': function(params) {\n    this.int32(1868782349);\n    this.int(params.offset);\n    this.int(params.length);\n  },\n  'messageEntityBotCommand': function(params) {\n    this.int32(1827637959);\n    this.int(params.offset);\n    this.int(params.length);\n  },\n  'messageEntityUrl': function(params) {\n    this.int32(1859134776);\n    this.int(params.offset);\n    this.int(params.length);\n  },\n  'messageEntityEmail': function(params) {\n    this.int32(1692693954);\n    this.int(params.offset);\n    this.int(params.length);\n  },\n  'messageEntityBold': function(params) {\n    this.int32(3177253833);\n    this.int(params.offset);\n    this.int(params.length);\n  },\n  'messageEntityItalic': function(params) {\n    this.int32(2188348256);\n    this.int(params.offset);\n    this.int(params.length);\n  },\n  'messageEntityCode': function(params) {\n    this.int32(681706865);\n    this.int(params.offset);\n    this.int(params.length);\n  },\n  'messageEntityPre': function(params) {\n    this.int32(1938967520);\n    this.int(params.offset);\n    this.int(params.length);\n    this.string(params.language);\n  },\n  'messageEntityTextUrl': function(params) {\n    this.int32(1990644519);\n    this.int(params.offset);\n    this.int(params.length);\n    this.string(params.url);\n  },\n  'messageEntityMentionName': function(params) {\n    this.int32(892193368);\n    this.int(params.offset);\n    this.int(params.length);\n    this.int(params.user_id);\n  },\n  'inputMessageEntityMentionName': function(params) {\n    this.int32(546203849);\n    this.int(params.offset);\n    this.int(params.length);\n    this.predicate(params.user_id);\n  },\n  'messageEntityPhone': function(params) {\n    this.int32(2607407947);\n    this.int(params.offset);\n    this.int(params.length);\n  },\n  'messageEntityCashtag': function(params) {\n    this.int32(1280209983);\n    this.int(params.offset);\n    this.int(params.length);\n  },\n  'messageEntityUnderline': function(params) {\n    this.int32(2622389899);\n    this.int(params.offset);\n    this.int(params.length);\n  },\n  'messageEntityStrike': function(params) {\n    this.int32(3204879316);\n    this.int(params.offset);\n    this.int(params.length);\n  },\n  'messageEntityBlockquote': function(params) {\n    this.int32(34469328);\n    this.int(params.offset);\n    this.int(params.length);\n  },\n  'messageEntityBankCard': function(params) {\n    this.int32(1981704948);\n    this.int(params.offset);\n    this.int(params.length);\n  },\n  'inputChannelEmpty': function(params) {\n    this.int32(4002160262);\n  },\n  'inputChannel': function(params) {\n    this.int32(2951442734);\n    this.int(params.channel_id);\n    this.long(params.access_hash);\n  },\n  'inputChannelFromMessage': function(params) {\n    this.int32(707290417);\n    this.predicate(params.peer);\n    this.int(params.msg_id);\n    this.int(params.channel_id);\n  },\n  'contacts.resolvedPeer': function(params) {\n    this.int32(2131196633);\n    this.predicate(params.peer);\n    this.vector(this.predicate, params.chats);\n    this.vector(this.predicate, params.users);\n  },\n  'messageRange': function(params) {\n    this.int32(182649427);\n    this.int(params.min_id);\n    this.int(params.max_id);\n  },\n  'updates.channelDifferenceEmpty': function(params) {\n    this.int32(1041346555);\n    const flags = (this.has(params.final) << 0) | (this.has(params.timeout) << 1);\n    this.int32(flags);\n    this.int(params.pts);\n    this.flag(this.int, params.timeout);\n  },\n  'updates.channelDifferenceTooLong': function(params) {\n    this.int32(2763835134);\n    const flags = (this.has(params.final) << 0) | (this.has(params.timeout) << 1);\n    this.int32(flags);\n    this.flag(this.int, params.timeout);\n    this.predicate(params.dialog);\n    this.vector(this.predicate, params.messages);\n    this.vector(this.predicate, params.chats);\n    this.vector(this.predicate, params.users);\n  },\n  'updates.channelDifference': function(params) {\n    this.int32(543450958);\n    const flags = (this.has(params.final) << 0) | (this.has(params.timeout) << 1);\n    this.int32(flags);\n    this.int(params.pts);\n    this.flag(this.int, params.timeout);\n    this.vector(this.predicate, params.new_messages);\n    this.vector(this.predicate, params.other_updates);\n    this.vector(this.predicate, params.chats);\n    this.vector(this.predicate, params.users);\n  },\n  'channelMessagesFilterEmpty': function(params) {\n    this.int32(2496933607);\n  },\n  'channelMessagesFilter': function(params) {\n    this.int32(3447183703);\n    const flags = (this.has(params.exclude_new_messages) << 1);\n    this.int32(flags);\n    this.vector(this.predicate, params.ranges);\n  },\n  'channelParticipant': function(params) {\n    this.int32(367766557);\n    this.int(params.user_id);\n    this.int(params.date);\n  },\n  'channelParticipantSelf': function(params) {\n    this.int32(2737347181);\n    this.int(params.user_id);\n    this.int(params.inviter_id);\n    this.int(params.date);\n  },\n  'channelParticipantCreator': function(params) {\n    this.int32(2156729764);\n    const flags = (this.has(params.rank) << 0);\n    this.int32(flags);\n    this.int(params.user_id);\n    this.flag(this.string, params.rank);\n  },\n  'channelParticipantAdmin': function(params) {\n    this.int32(3435051951);\n    const flags = (this.has(params.can_edit) << 0) | (this.has(params.self) << 1) | (this.has(params.inviter_id) << 1) | (this.has(params.rank) << 2);\n    this.int32(flags);\n    this.int(params.user_id);\n    this.flag(this.int, params.inviter_id);\n    this.int(params.promoted_by);\n    this.int(params.date);\n    this.predicate(params.admin_rights);\n    this.flag(this.string, params.rank);\n  },\n  'channelParticipantBanned': function(params) {\n    this.int32(470789295);\n    const flags = (this.has(params.left) << 0);\n    this.int32(flags);\n    this.int(params.user_id);\n    this.int(params.kicked_by);\n    this.int(params.date);\n    this.predicate(params.banned_rights);\n  },\n  'channelParticipantsRecent': function(params) {\n    this.int32(3728686201);\n  },\n  'channelParticipantsAdmins': function(params) {\n    this.int32(3026225513);\n  },\n  'channelParticipantsKicked': function(params) {\n    this.int32(2746567045);\n    this.string(params.q);\n  },\n  'channelParticipantsBots': function(params) {\n    this.int32(2966521435);\n  },\n  'channelParticipantsBanned': function(params) {\n    this.int32(338142689);\n    this.string(params.q);\n  },\n  'channelParticipantsSearch': function(params) {\n    this.int32(106343499);\n    this.string(params.q);\n  },\n  'channelParticipantsContacts': function(params) {\n    this.int32(3144345741);\n    this.string(params.q);\n  },\n  'channels.channelParticipants': function(params) {\n    this.int32(4117684904);\n    this.int(params.count);\n    this.vector(this.predicate, params.participants);\n    this.vector(this.predicate, params.users);\n  },\n  'channels.channelParticipantsNotModified': function(params) {\n    this.int32(4028055529);\n  },\n  'channels.channelParticipant': function(params) {\n    this.int32(3503927651);\n    this.predicate(params.participant);\n    this.vector(this.predicate, params.users);\n  },\n  'help.termsOfService': function(params) {\n    this.int32(2013922064);\n    const flags = (this.has(params.popup) << 0) | (this.has(params.min_age_confirm) << 1);\n    this.int32(flags);\n    this.predicate(params.id);\n    this.string(params.text);\n    this.vector(this.predicate, params.entities);\n    this.flag(this.int, params.min_age_confirm);\n  },\n  'foundGif': function(params) {\n    this.int32(372165663);\n    this.string(params.url);\n    this.string(params.thumb_url);\n    this.string(params.content_url);\n    this.string(params.content_type);\n    this.int(params.w);\n    this.int(params.h);\n  },\n  'foundGifCached': function(params) {\n    this.int32(2624914441);\n    this.string(params.url);\n    this.predicate(params.photo);\n    this.predicate(params.document);\n  },\n  'messages.foundGifs': function(params) {\n    this.int32(1158290442);\n    this.int(params.next_offset);\n    this.vector(this.predicate, params.results);\n  },\n  'messages.savedGifsNotModified': function(params) {\n    this.int32(3892468898);\n  },\n  'messages.savedGifs': function(params) {\n    this.int32(772213157);\n    this.int(params.hash);\n    this.vector(this.predicate, params.gifs);\n  },\n  'inputBotInlineMessageMediaAuto': function(params) {\n    this.int32(864077702);\n    const flags = (this.has(params.entities) << 1) | (this.has(params.reply_markup) << 2);\n    this.int32(flags);\n    this.string(params.message);\n    this.flagVector(this.predicate, params.entities);\n    this.flag(this.predicate, params.reply_markup);\n  },\n  'inputBotInlineMessageText': function(params) {\n    this.int32(1036876423);\n    const flags = (this.has(params.no_webpage) << 0) | (this.has(params.entities) << 1) | (this.has(params.reply_markup) << 2);\n    this.int32(flags);\n    this.string(params.message);\n    this.flagVector(this.predicate, params.entities);\n    this.flag(this.predicate, params.reply_markup);\n  },\n  'inputBotInlineMessageMediaGeo': function(params) {\n    this.int32(3249626469);\n    const flags = (this.has(params.reply_markup) << 2);\n    this.int32(flags);\n    this.predicate(params.geo_point);\n    this.int(params.period);\n    this.flag(this.predicate, params.reply_markup);\n  },\n  'inputBotInlineMessageMediaVenue': function(params) {\n    this.int32(1098628881);\n    const flags = (this.has(params.reply_markup) << 2);\n    this.int32(flags);\n    this.predicate(params.geo_point);\n    this.string(params.title);\n    this.string(params.address);\n    this.string(params.provider);\n    this.string(params.venue_id);\n    this.string(params.venue_type);\n    this.flag(this.predicate, params.reply_markup);\n  },\n  'inputBotInlineMessageMediaContact': function(params) {\n    this.int32(2800599037);\n    const flags = (this.has(params.reply_markup) << 2);\n    this.int32(flags);\n    this.string(params.phone_number);\n    this.string(params.first_name);\n    this.string(params.last_name);\n    this.string(params.vcard);\n    this.flag(this.predicate, params.reply_markup);\n  },\n  'inputBotInlineMessageGame': function(params) {\n    this.int32(1262639204);\n    const flags = (this.has(params.reply_markup) << 2);\n    this.int32(flags);\n    this.flag(this.predicate, params.reply_markup);\n  },\n  'inputBotInlineResult': function(params) {\n    this.int32(2294256409);\n    const flags = (this.has(params.title) << 1) | (this.has(params.description) << 2) | (this.has(params.url) << 3) | (this.has(params.thumb) << 4) | (this.has(params.content) << 5);\n    this.int32(flags);\n    this.string(params.id);\n    this.string(params.type);\n    this.flag(this.string, params.title);\n    this.flag(this.string, params.description);\n    this.flag(this.string, params.url);\n    this.flag(this.predicate, params.thumb);\n    this.flag(this.predicate, params.content);\n    this.predicate(params.send_message);\n  },\n  'inputBotInlineResultPhoto': function(params) {\n    this.int32(2832753831);\n    this.string(params.id);\n    this.string(params.type);\n    this.predicate(params.photo);\n    this.predicate(params.send_message);\n  },\n  'inputBotInlineResultDocument': function(params) {\n    this.int32(4294507972);\n    const flags = (this.has(params.title) << 1) | (this.has(params.description) << 2);\n    this.int32(flags);\n    this.string(params.id);\n    this.string(params.type);\n    this.flag(this.string, params.title);\n    this.flag(this.string, params.description);\n    this.predicate(params.document);\n    this.predicate(params.send_message);\n  },\n  'inputBotInlineResultGame': function(params) {\n    this.int32(1336154098);\n    this.string(params.id);\n    this.string(params.short_name);\n    this.predicate(params.send_message);\n  },\n  'botInlineMessageMediaAuto': function(params) {\n    this.int32(1984755728);\n    const flags = (this.has(params.entities) << 1) | (this.has(params.reply_markup) << 2);\n    this.int32(flags);\n    this.string(params.message);\n    this.flagVector(this.predicate, params.entities);\n    this.flag(this.predicate, params.reply_markup);\n  },\n  'botInlineMessageText': function(params) {\n    this.int32(2357159394);\n    const flags = (this.has(params.no_webpage) << 0) | (this.has(params.entities) << 1) | (this.has(params.reply_markup) << 2);\n    this.int32(flags);\n    this.string(params.message);\n    this.flagVector(this.predicate, params.entities);\n    this.flag(this.predicate, params.reply_markup);\n  },\n  'botInlineMessageMediaGeo': function(params) {\n    this.int32(3072515685);\n    const flags = (this.has(params.reply_markup) << 2);\n    this.int32(flags);\n    this.predicate(params.geo);\n    this.int(params.period);\n    this.flag(this.predicate, params.reply_markup);\n  },\n  'botInlineMessageMediaVenue': function(params) {\n    this.int32(2324063644);\n    const flags = (this.has(params.reply_markup) << 2);\n    this.int32(flags);\n    this.predicate(params.geo);\n    this.string(params.title);\n    this.string(params.address);\n    this.string(params.provider);\n    this.string(params.venue_id);\n    this.string(params.venue_type);\n    this.flag(this.predicate, params.reply_markup);\n  },\n  'botInlineMessageMediaContact': function(params) {\n    this.int32(416402882);\n    const flags = (this.has(params.reply_markup) << 2);\n    this.int32(flags);\n    this.string(params.phone_number);\n    this.string(params.first_name);\n    this.string(params.last_name);\n    this.string(params.vcard);\n    this.flag(this.predicate, params.reply_markup);\n  },\n  'botInlineResult': function(params) {\n    this.int32(295067450);\n    const flags = (this.has(params.title) << 1) | (this.has(params.description) << 2) | (this.has(params.url) << 3) | (this.has(params.thumb) << 4) | (this.has(params.content) << 5);\n    this.int32(flags);\n    this.string(params.id);\n    this.string(params.type);\n    this.flag(this.string, params.title);\n    this.flag(this.string, params.description);\n    this.flag(this.string, params.url);\n    this.flag(this.predicate, params.thumb);\n    this.flag(this.predicate, params.content);\n    this.predicate(params.send_message);\n  },\n  'botInlineMediaResult': function(params) {\n    this.int32(400266251);\n    const flags = (this.has(params.photo) << 0) | (this.has(params.document) << 1) | (this.has(params.title) << 2) | (this.has(params.description) << 3);\n    this.int32(flags);\n    this.string(params.id);\n    this.string(params.type);\n    this.flag(this.predicate, params.photo);\n    this.flag(this.predicate, params.document);\n    this.flag(this.string, params.title);\n    this.flag(this.string, params.description);\n    this.predicate(params.send_message);\n  },\n  'messages.botResults': function(params) {\n    this.int32(2491197512);\n    const flags = (this.has(params.gallery) << 0) | (this.has(params.next_offset) << 1) | (this.has(params.switch_pm) << 2);\n    this.int32(flags);\n    this.long(params.query_id);\n    this.flag(this.string, params.next_offset);\n    this.flag(this.predicate, params.switch_pm);\n    this.vector(this.predicate, params.results);\n    this.int(params.cache_time);\n    this.vector(this.predicate, params.users);\n  },\n  'exportedMessageLink': function(params) {\n    this.int32(1571494644);\n    this.string(params.link);\n    this.string(params.html);\n  },\n  'messageFwdHeader': function(params) {\n    this.int32(893020267);\n    const flags = (this.has(params.from_id) << 0) | (this.has(params.from_name) << 5) | (this.has(params.channel_id) << 1) | (this.has(params.channel_post) << 2) | (this.has(params.post_author) << 3) | (this.has(params.saved_from_peer) << 4) | (this.has(params.saved_from_msg_id) << 4) | (this.has(params.psa_type) << 6);\n    this.int32(flags);\n    this.flag(this.int, params.from_id);\n    this.flag(this.string, params.from_name);\n    this.int(params.date);\n    this.flag(this.int, params.channel_id);\n    this.flag(this.int, params.channel_post);\n    this.flag(this.string, params.post_author);\n    this.flag(this.predicate, params.saved_from_peer);\n    this.flag(this.int, params.saved_from_msg_id);\n    this.flag(this.string, params.psa_type);\n  },\n  'auth.codeTypeSms': function(params) {\n    this.int32(1923290508);\n  },\n  'auth.codeTypeCall': function(params) {\n    this.int32(1948046307);\n  },\n  'auth.codeTypeFlashCall': function(params) {\n    this.int32(577556219);\n  },\n  'auth.sentCodeTypeApp': function(params) {\n    this.int32(1035688326);\n    this.int(params.length);\n  },\n  'auth.sentCodeTypeSms': function(params) {\n    this.int32(3221273506);\n    this.int(params.length);\n  },\n  'auth.sentCodeTypeCall': function(params) {\n    this.int32(1398007207);\n    this.int(params.length);\n  },\n  'auth.sentCodeTypeFlashCall': function(params) {\n    this.int32(2869151449);\n    this.string(params.pattern);\n  },\n  'messages.botCallbackAnswer': function(params) {\n    this.int32(911761060);\n    const flags = (this.has(params.alert) << 1) | (this.has(params.has_url) << 3) | (this.has(params.native_ui) << 4) | (this.has(params.message) << 0) | (this.has(params.url) << 2);\n    this.int32(flags);\n    this.flag(this.string, params.message);\n    this.flag(this.string, params.url);\n    this.int(params.cache_time);\n  },\n  'messages.messageEditData': function(params) {\n    this.int32(649453030);\n    const flags = (this.has(params.caption) << 0);\n    this.int32(flags);\n  },\n  'inputBotInlineMessageID': function(params) {\n    this.int32(2299280777);\n    this.int(params.dc_id);\n    this.long(params.id);\n    this.long(params.access_hash);\n  },\n  'inlineBotSwitchPM': function(params) {\n    this.int32(1008755359);\n    this.string(params.text);\n    this.string(params.start_param);\n  },\n  'messages.peerDialogs': function(params) {\n    this.int32(863093588);\n    this.vector(this.predicate, params.dialogs);\n    this.vector(this.predicate, params.messages);\n    this.vector(this.predicate, params.chats);\n    this.vector(this.predicate, params.users);\n    this.predicate(params.state);\n  },\n  'topPeer': function(params) {\n    this.int32(3989684315);\n    this.predicate(params.peer);\n    this.double(params.rating);\n  },\n  'topPeerCategoryBotsPM': function(params) {\n    this.int32(2875595611);\n  },\n  'topPeerCategoryBotsInline': function(params) {\n    this.int32(344356834);\n  },\n  'topPeerCategoryCorrespondents': function(params) {\n    this.int32(104314861);\n  },\n  'topPeerCategoryGroups': function(params) {\n    this.int32(3172442442);\n  },\n  'topPeerCategoryChannels': function(params) {\n    this.int32(371037736);\n  },\n  'topPeerCategoryPhoneCalls': function(params) {\n    this.int32(511092620);\n  },\n  'topPeerCategoryForwardUsers': function(params) {\n    this.int32(2822794409);\n  },\n  'topPeerCategoryForwardChats': function(params) {\n    this.int32(4226728176);\n  },\n  'topPeerCategoryPeers': function(params) {\n    this.int32(4219683473);\n    this.predicate(params.category);\n    this.int(params.count);\n    this.vector(this.predicate, params.peers);\n  },\n  'contacts.topPeersNotModified': function(params) {\n    this.int32(3727060725);\n  },\n  'contacts.topPeers': function(params) {\n    this.int32(1891070632);\n    this.vector(this.predicate, params.categories);\n    this.vector(this.predicate, params.chats);\n    this.vector(this.predicate, params.users);\n  },\n  'contacts.topPeersDisabled': function(params) {\n    this.int32(3039597469);\n  },\n  'draftMessageEmpty': function(params) {\n    this.int32(453805082);\n    const flags = (this.has(params.date) << 0);\n    this.int32(flags);\n    this.flag(this.int, params.date);\n  },\n  'draftMessage': function(params) {\n    this.int32(4253970719);\n    const flags = (this.has(params.no_webpage) << 1) | (this.has(params.reply_to_msg_id) << 0) | (this.has(params.entities) << 3);\n    this.int32(flags);\n    this.flag(this.int, params.reply_to_msg_id);\n    this.string(params.message);\n    this.flagVector(this.predicate, params.entities);\n    this.int(params.date);\n  },\n  'messages.featuredStickersNotModified': function(params) {\n    this.int32(3336309862);\n    this.int(params.count);\n  },\n  'messages.featuredStickers': function(params) {\n    this.int32(3064709953);\n    this.int(params.hash);\n    this.int(params.count);\n    this.vector(this.predicate, params.sets);\n    this.vector(this.long, params.unread);\n  },\n  'messages.recentStickersNotModified': function(params) {\n    this.int32(186120336);\n  },\n  'messages.recentStickers': function(params) {\n    this.int32(586395571);\n    this.int(params.hash);\n    this.vector(this.predicate, params.packs);\n    this.vector(this.predicate, params.stickers);\n    this.vector(this.int, params.dates);\n  },\n  'messages.archivedStickers': function(params) {\n    this.int32(1338747336);\n    this.int(params.count);\n    this.vector(this.predicate, params.sets);\n  },\n  'messages.stickerSetInstallResultSuccess': function(params) {\n    this.int32(946083368);\n  },\n  'messages.stickerSetInstallResultArchive': function(params) {\n    this.int32(904138920);\n    this.vector(this.predicate, params.sets);\n  },\n  'stickerSetCovered': function(params) {\n    this.int32(1678812626);\n    this.predicate(params.set);\n    this.predicate(params.cover);\n  },\n  'stickerSetMultiCovered': function(params) {\n    this.int32(872932635);\n    this.predicate(params.set);\n    this.vector(this.predicate, params.covers);\n  },\n  'maskCoords': function(params) {\n    this.int32(2933316530);\n    this.int(params.n);\n    this.double(params.x);\n    this.double(params.y);\n    this.double(params.zoom);\n  },\n  'inputStickeredMediaPhoto': function(params) {\n    this.int32(1251549527);\n    this.predicate(params.id);\n  },\n  'inputStickeredMediaDocument': function(params) {\n    this.int32(70813275);\n    this.predicate(params.id);\n  },\n  'game': function(params) {\n    this.int32(3187238203);\n    const flags = (this.has(params.document) << 0);\n    this.int32(flags);\n    this.long(params.id);\n    this.long(params.access_hash);\n    this.string(params.short_name);\n    this.string(params.title);\n    this.string(params.description);\n    this.predicate(params.photo);\n    this.flag(this.predicate, params.document);\n  },\n  'inputGameID': function(params) {\n    this.int32(53231223);\n    this.long(params.id);\n    this.long(params.access_hash);\n  },\n  'inputGameShortName': function(params) {\n    this.int32(3274827786);\n    this.predicate(params.bot_id);\n    this.string(params.short_name);\n  },\n  'highScore': function(params) {\n    this.int32(1493171408);\n    this.int(params.pos);\n    this.int(params.user_id);\n    this.int(params.score);\n  },\n  'messages.highScores': function(params) {\n    this.int32(2587622809);\n    this.vector(this.predicate, params.scores);\n    this.vector(this.predicate, params.users);\n  },\n  'textEmpty': function(params) {\n    this.int32(3695018575);\n  },\n  'textPlain': function(params) {\n    this.int32(1950782688);\n    this.string(params.text);\n  },\n  'textBold': function(params) {\n    this.int32(1730456516);\n    this.predicate(params.text);\n  },\n  'textItalic': function(params) {\n    this.int32(3641877916);\n    this.predicate(params.text);\n  },\n  'textUnderline': function(params) {\n    this.int32(3240501956);\n    this.predicate(params.text);\n  },\n  'textStrike': function(params) {\n    this.int32(2616769429);\n    this.predicate(params.text);\n  },\n  'textFixed': function(params) {\n    this.int32(1816074681);\n    this.predicate(params.text);\n  },\n  'textUrl': function(params) {\n    this.int32(1009288385);\n    this.predicate(params.text);\n    this.string(params.url);\n    this.long(params.webpage_id);\n  },\n  'textEmail': function(params) {\n    this.int32(3730443734);\n    this.predicate(params.text);\n    this.string(params.email);\n  },\n  'textConcat': function(params) {\n    this.int32(2120376535);\n    this.vector(this.predicate, params.texts);\n  },\n  'textSubscript': function(params) {\n    this.int32(3983181060);\n    this.predicate(params.text);\n  },\n  'textSuperscript': function(params) {\n    this.int32(3355139585);\n    this.predicate(params.text);\n  },\n  'textMarked': function(params) {\n    this.int32(55281185);\n    this.predicate(params.text);\n  },\n  'textPhone': function(params) {\n    this.int32(483104362);\n    this.predicate(params.text);\n    this.string(params.phone);\n  },\n  'textImage': function(params) {\n    this.int32(136105807);\n    this.long(params.document_id);\n    this.int(params.w);\n    this.int(params.h);\n  },\n  'textAnchor': function(params) {\n    this.int32(894777186);\n    this.predicate(params.text);\n    this.string(params.name);\n  },\n  'pageBlockUnsupported': function(params) {\n    this.int32(324435594);\n  },\n  'pageBlockTitle': function(params) {\n    this.int32(1890305021);\n    this.predicate(params.text);\n  },\n  'pageBlockSubtitle': function(params) {\n    this.int32(2415565343);\n    this.predicate(params.text);\n  },\n  'pageBlockAuthorDate': function(params) {\n    this.int32(3132089824);\n    this.predicate(params.author);\n    this.int(params.published_date);\n  },\n  'pageBlockHeader': function(params) {\n    this.int32(3218105580);\n    this.predicate(params.text);\n  },\n  'pageBlockSubheader': function(params) {\n    this.int32(4046173921);\n    this.predicate(params.text);\n  },\n  'pageBlockParagraph': function(params) {\n    this.int32(1182402406);\n    this.predicate(params.text);\n  },\n  'pageBlockPreformatted': function(params) {\n    this.int32(3228621118);\n    this.predicate(params.text);\n    this.string(params.language);\n  },\n  'pageBlockFooter': function(params) {\n    this.int32(1216809369);\n    this.predicate(params.text);\n  },\n  'pageBlockDivider': function(params) {\n    this.int32(3676352904);\n  },\n  'pageBlockAnchor': function(params) {\n    this.int32(3456972720);\n    this.string(params.name);\n  },\n  'pageBlockList': function(params) {\n    this.int32(3840442385);\n    this.vector(this.predicate, params.items);\n  },\n  'pageBlockBlockquote': function(params) {\n    this.int32(641563686);\n    this.predicate(params.text);\n    this.predicate(params.caption);\n  },\n  'pageBlockPullquote': function(params) {\n    this.int32(1329878739);\n    this.predicate(params.text);\n    this.predicate(params.caption);\n  },\n  'pageBlockPhoto': function(params) {\n    this.int32(391759200);\n    const flags = (this.has(params.url) << 0) | (this.has(params.webpage_id) << 0);\n    this.int32(flags);\n    this.long(params.photo_id);\n    this.predicate(params.caption);\n    this.flag(this.string, params.url);\n    this.flag(this.long, params.webpage_id);\n  },\n  'pageBlockVideo': function(params) {\n    this.int32(2089805750);\n    const flags = (this.has(params.autoplay) << 0) | (this.has(params.loop) << 1);\n    this.int32(flags);\n    this.long(params.video_id);\n    this.predicate(params.caption);\n  },\n  'pageBlockCover': function(params) {\n    this.int32(972174080);\n    this.predicate(params.cover);\n  },\n  'pageBlockEmbed': function(params) {\n    this.int32(2826014149);\n    const flags = (this.has(params.full_width) << 0) | (this.has(params.allow_scrolling) << 3) | (this.has(params.url) << 1) | (this.has(params.html) << 2) | (this.has(params.poster_photo_id) << 4) | (this.has(params.w) << 5) | (this.has(params.h) << 5);\n    this.int32(flags);\n    this.flag(this.string, params.url);\n    this.flag(this.string, params.html);\n    this.flag(this.long, params.poster_photo_id);\n    this.flag(this.int, params.w);\n    this.flag(this.int, params.h);\n    this.predicate(params.caption);\n  },\n  'pageBlockEmbedPost': function(params) {\n    this.int32(4065961995);\n    this.string(params.url);\n    this.long(params.webpage_id);\n    this.long(params.author_photo_id);\n    this.string(params.author);\n    this.int(params.date);\n    this.vector(this.predicate, params.blocks);\n    this.predicate(params.caption);\n  },\n  'pageBlockCollage': function(params) {\n    this.int32(1705048653);\n    this.vector(this.predicate, params.items);\n    this.predicate(params.caption);\n  },\n  'pageBlockSlideshow': function(params) {\n    this.int32(52401552);\n    this.vector(this.predicate, params.items);\n    this.predicate(params.caption);\n  },\n  'pageBlockChannel': function(params) {\n    this.int32(4011282869);\n    this.predicate(params.channel);\n  },\n  'pageBlockAudio': function(params) {\n    this.int32(2151899626);\n    this.long(params.audio_id);\n    this.predicate(params.caption);\n  },\n  'pageBlockKicker': function(params) {\n    this.int32(504660880);\n    this.predicate(params.text);\n  },\n  'pageBlockTable': function(params) {\n    this.int32(3209554562);\n    const flags = (this.has(params.bordered) << 0) | (this.has(params.striped) << 1);\n    this.int32(flags);\n    this.predicate(params.title);\n    this.vector(this.predicate, params.rows);\n  },\n  'pageBlockOrderedList': function(params) {\n    this.int32(2592793057);\n    this.vector(this.predicate, params.items);\n  },\n  'pageBlockDetails': function(params) {\n    this.int32(1987480557);\n    const flags = (this.has(params.open) << 0);\n    this.int32(flags);\n    this.vector(this.predicate, params.blocks);\n    this.predicate(params.title);\n  },\n  'pageBlockRelatedArticles': function(params) {\n    this.int32(370236054);\n    this.predicate(params.title);\n    this.vector(this.predicate, params.articles);\n  },\n  'pageBlockMap': function(params) {\n    this.int32(2756656886);\n    this.predicate(params.geo);\n    this.int(params.zoom);\n    this.int(params.w);\n    this.int(params.h);\n    this.predicate(params.caption);\n  },\n  'phoneCallDiscardReasonMissed': function(params) {\n    this.int32(2246320897);\n  },\n  'phoneCallDiscardReasonDisconnect': function(params) {\n    this.int32(3767910816);\n  },\n  'phoneCallDiscardReasonHangup': function(params) {\n    this.int32(1471006352);\n  },\n  'phoneCallDiscardReasonBusy': function(params) {\n    this.int32(4210550985);\n  },\n  'dataJSON': function(params) {\n    this.int32(2104790276);\n    this.string(params.data);\n  },\n  'labeledPrice': function(params) {\n    this.int32(3408489464);\n    this.string(params.label);\n    this.long(params.amount);\n  },\n  'invoice': function(params) {\n    this.int32(3272254296);\n    const flags = (this.has(params.test) << 0) | (this.has(params.name_requested) << 1) | (this.has(params.phone_requested) << 2) | (this.has(params.email_requested) << 3) | (this.has(params.shipping_address_requested) << 4) | (this.has(params.flexible) << 5) | (this.has(params.phone_to_provider) << 6) | (this.has(params.email_to_provider) << 7);\n    this.int32(flags);\n    this.string(params.currency);\n    this.vector(this.predicate, params.prices);\n  },\n  'paymentCharge': function(params) {\n    this.int32(3926049406);\n    this.string(params.id);\n    this.string(params.provider_charge_id);\n  },\n  'postAddress': function(params) {\n    this.int32(512535275);\n    this.string(params.street_line1);\n    this.string(params.street_line2);\n    this.string(params.city);\n    this.string(params.state);\n    this.string(params.country_iso2);\n    this.string(params.post_code);\n  },\n  'paymentRequestedInfo': function(params) {\n    this.int32(2426158996);\n    const flags = (this.has(params.name) << 0) | (this.has(params.phone) << 1) | (this.has(params.email) << 2) | (this.has(params.shipping_address) << 3);\n    this.int32(flags);\n    this.flag(this.string, params.name);\n    this.flag(this.string, params.phone);\n    this.flag(this.string, params.email);\n    this.flag(this.predicate, params.shipping_address);\n  },\n  'paymentSavedCredentialsCard': function(params) {\n    this.int32(3452074527);\n    this.string(params.id);\n    this.string(params.title);\n  },\n  'webDocument': function(params) {\n    this.int32(475467473);\n    this.string(params.url);\n    this.long(params.access_hash);\n    this.int(params.size);\n    this.string(params.mime_type);\n    this.vector(this.predicate, params.attributes);\n  },\n  'webDocumentNoProxy': function(params) {\n    this.int32(4190682310);\n    this.string(params.url);\n    this.int(params.size);\n    this.string(params.mime_type);\n    this.vector(this.predicate, params.attributes);\n  },\n  'inputWebDocument': function(params) {\n    this.int32(2616017741);\n    this.string(params.url);\n    this.int(params.size);\n    this.string(params.mime_type);\n    this.vector(this.predicate, params.attributes);\n  },\n  'inputWebFileLocation': function(params) {\n    this.int32(3258570374);\n    this.string(params.url);\n    this.long(params.access_hash);\n  },\n  'inputWebFileGeoPointLocation': function(params) {\n    this.int32(2669814217);\n    this.predicate(params.geo_point);\n    this.long(params.access_hash);\n    this.int(params.w);\n    this.int(params.h);\n    this.int(params.zoom);\n    this.int(params.scale);\n  },\n  'upload.webFile': function(params) {\n    this.int32(568808380);\n    this.int(params.size);\n    this.string(params.mime_type);\n    this.predicate(params.file_type);\n    this.int(params.mtime);\n    this.bytes(params.bytes);\n  },\n  'payments.paymentForm': function(params) {\n    this.int32(1062645411);\n    const flags = (this.has(params.can_save_credentials) << 2) | (this.has(params.password_missing) << 3) | (this.has(params.native_provider) << 4) | (this.has(params.native_params) << 4) | (this.has(params.saved_info) << 0) | (this.has(params.saved_credentials) << 1);\n    this.int32(flags);\n    this.int(params.bot_id);\n    this.predicate(params.invoice);\n    this.int(params.provider_id);\n    this.string(params.url);\n    this.flag(this.string, params.native_provider);\n    this.flag(this.predicate, params.native_params);\n    this.flag(this.predicate, params.saved_info);\n    this.flag(this.predicate, params.saved_credentials);\n    this.vector(this.predicate, params.users);\n  },\n  'payments.validatedRequestedInfo': function(params) {\n    this.int32(3510966403);\n    const flags = (this.has(params.id) << 0) | (this.has(params.shipping_options) << 1);\n    this.int32(flags);\n    this.flag(this.string, params.id);\n    this.flagVector(this.predicate, params.shipping_options);\n  },\n  'payments.paymentResult': function(params) {\n    this.int32(1314881805);\n    this.predicate(params.updates);\n  },\n  'payments.paymentVerificationNeeded': function(params) {\n    this.int32(3628142905);\n    this.string(params.url);\n  },\n  'payments.paymentReceipt': function(params) {\n    this.int32(1342771681);\n    const flags = (this.has(params.info) << 0) | (this.has(params.shipping) << 1);\n    this.int32(flags);\n    this.int(params.date);\n    this.int(params.bot_id);\n    this.predicate(params.invoice);\n    this.int(params.provider_id);\n    this.flag(this.predicate, params.info);\n    this.flag(this.predicate, params.shipping);\n    this.string(params.currency);\n    this.long(params.total_amount);\n    this.string(params.credentials_title);\n    this.vector(this.predicate, params.users);\n  },\n  'payments.savedInfo': function(params) {\n    this.int32(4220511292);\n    const flags = (this.has(params.has_saved_credentials) << 1) | (this.has(params.saved_info) << 0);\n    this.int32(flags);\n    this.flag(this.predicate, params.saved_info);\n  },\n  'inputPaymentCredentialsSaved': function(params) {\n    this.int32(3238965967);\n    this.string(params.id);\n    this.bytes(params.tmp_password);\n  },\n  'inputPaymentCredentials': function(params) {\n    this.int32(873977640);\n    const flags = (this.has(params.save) << 0);\n    this.int32(flags);\n    this.predicate(params.data);\n  },\n  'inputPaymentCredentialsApplePay': function(params) {\n    this.int32(178373535);\n    this.predicate(params.payment_data);\n  },\n  'inputPaymentCredentialsAndroidPay': function(params) {\n    this.int32(3389379854);\n    this.predicate(params.payment_token);\n    this.string(params.google_transaction_id);\n  },\n  'account.tmpPassword': function(params) {\n    this.int32(3680828724);\n    this.bytes(params.tmp_password);\n    this.int(params.valid_until);\n  },\n  'shippingOption': function(params) {\n    this.int32(3055631583);\n    this.string(params.id);\n    this.string(params.title);\n    this.vector(this.predicate, params.prices);\n  },\n  'inputStickerSetItem': function(params) {\n    this.int32(4288717974);\n    const flags = (this.has(params.mask_coords) << 0);\n    this.int32(flags);\n    this.predicate(params.document);\n    this.string(params.emoji);\n    this.flag(this.predicate, params.mask_coords);\n  },\n  'inputPhoneCall': function(params) {\n    this.int32(506920429);\n    this.long(params.id);\n    this.long(params.access_hash);\n  },\n  'phoneCallEmpty': function(params) {\n    this.int32(1399245077);\n    this.long(params.id);\n  },\n  'phoneCallWaiting': function(params) {\n    this.int32(462375633);\n    const flags = (this.has(params.video) << 5) | (this.has(params.receive_date) << 0);\n    this.int32(flags);\n    this.long(params.id);\n    this.long(params.access_hash);\n    this.int(params.date);\n    this.int(params.admin_id);\n    this.int(params.participant_id);\n    this.predicate(params.protocol);\n    this.flag(this.int, params.receive_date);\n  },\n  'phoneCallRequested': function(params) {\n    this.int32(2280307539);\n    const flags = (this.has(params.video) << 5);\n    this.int32(flags);\n    this.long(params.id);\n    this.long(params.access_hash);\n    this.int(params.date);\n    this.int(params.admin_id);\n    this.int(params.participant_id);\n    this.bytes(params.g_a_hash);\n    this.predicate(params.protocol);\n  },\n  'phoneCallAccepted': function(params) {\n    this.int32(2575058250);\n    const flags = (this.has(params.video) << 5);\n    this.int32(flags);\n    this.long(params.id);\n    this.long(params.access_hash);\n    this.int(params.date);\n    this.int(params.admin_id);\n    this.int(params.participant_id);\n    this.bytes(params.g_b);\n    this.predicate(params.protocol);\n  },\n  'phoneCall': function(params) {\n    this.int32(2269294207);\n    const flags = (this.has(params.p2p_allowed) << 5);\n    this.int32(flags);\n    this.long(params.id);\n    this.long(params.access_hash);\n    this.int(params.date);\n    this.int(params.admin_id);\n    this.int(params.participant_id);\n    this.bytes(params.g_a_or_b);\n    this.long(params.key_fingerprint);\n    this.predicate(params.protocol);\n    this.vector(this.predicate, params.connections);\n    this.int(params.start_date);\n  },\n  'phoneCallDiscarded': function(params) {\n    this.int32(1355435489);\n    const flags = (this.has(params.need_rating) << 2) | (this.has(params.need_debug) << 3) | (this.has(params.video) << 5) | (this.has(params.reason) << 0) | (this.has(params.duration) << 1);\n    this.int32(flags);\n    this.long(params.id);\n    this.flag(this.predicate, params.reason);\n    this.flag(this.int, params.duration);\n  },\n  'phoneConnection': function(params) {\n    this.int32(2639009728);\n    this.long(params.id);\n    this.string(params.ip);\n    this.string(params.ipv6);\n    this.int(params.port);\n    this.bytes(params.peer_tag);\n  },\n  'phoneCallProtocol': function(params) {\n    this.int32(4236742600);\n    const flags = (this.has(params.udp_p2p) << 0) | (this.has(params.udp_reflector) << 1);\n    this.int32(flags);\n    this.int(params.min_layer);\n    this.int(params.max_layer);\n    this.vector(this.string, params.library_versions);\n  },\n  'phone.phoneCall': function(params) {\n    this.int32(3968000320);\n    this.predicate(params.phone_call);\n    this.vector(this.predicate, params.users);\n  },\n  'upload.cdnFileReuploadNeeded': function(params) {\n    this.int32(4004045934);\n    this.bytes(params.request_token);\n  },\n  'upload.cdnFile': function(params) {\n    this.int32(2845821519);\n    this.bytes(params.bytes);\n  },\n  'cdnPublicKey': function(params) {\n    this.int32(3380800186);\n    this.int(params.dc_id);\n    this.string(params.public_key);\n  },\n  'cdnConfig': function(params) {\n    this.int32(1462101002);\n    this.vector(this.predicate, params.public_keys);\n  },\n  'langPackString': function(params) {\n    this.int32(3402727926);\n    this.string(params.key);\n    this.string(params.value);\n  },\n  'langPackStringPluralized': function(params) {\n    this.int32(1816636575);\n    const flags = (this.has(params.zero_value) << 0) | (this.has(params.one_value) << 1) | (this.has(params.two_value) << 2) | (this.has(params.few_value) << 3) | (this.has(params.many_value) << 4);\n    this.int32(flags);\n    this.string(params.key);\n    this.flag(this.string, params.zero_value);\n    this.flag(this.string, params.one_value);\n    this.flag(this.string, params.two_value);\n    this.flag(this.string, params.few_value);\n    this.flag(this.string, params.many_value);\n    this.string(params.other_value);\n  },\n  'langPackStringDeleted': function(params) {\n    this.int32(695856818);\n    this.string(params.key);\n  },\n  'langPackDifference': function(params) {\n    this.int32(4085629430);\n    this.string(params.lang_code);\n    this.int(params.from_version);\n    this.int(params.version);\n    this.vector(this.predicate, params.strings);\n  },\n  'langPackLanguage': function(params) {\n    this.int32(4006239459);\n    const flags = (this.has(params.official) << 0) | (this.has(params.rtl) << 2) | (this.has(params.beta) << 3) | (this.has(params.base_lang_code) << 1);\n    this.int32(flags);\n    this.string(params.name);\n    this.string(params.native_name);\n    this.string(params.lang_code);\n    this.flag(this.string, params.base_lang_code);\n    this.string(params.plural_code);\n    this.int(params.strings_count);\n    this.int(params.translated_count);\n    this.string(params.translations_url);\n  },\n  'channelAdminLogEventActionChangeTitle': function(params) {\n    this.int32(3873421349);\n    this.string(params.prev_value);\n    this.string(params.new_value);\n  },\n  'channelAdminLogEventActionChangeAbout': function(params) {\n    this.int32(1427671598);\n    this.string(params.prev_value);\n    this.string(params.new_value);\n  },\n  'channelAdminLogEventActionChangeUsername': function(params) {\n    this.int32(1783299128);\n    this.string(params.prev_value);\n    this.string(params.new_value);\n  },\n  'channelAdminLogEventActionChangePhoto': function(params) {\n    this.int32(1129042607);\n    this.predicate(params.prev_photo);\n    this.predicate(params.new_photo);\n  },\n  'channelAdminLogEventActionToggleInvites': function(params) {\n    this.int32(460916654);\n    this.Bool(params.new_value);\n  },\n  'channelAdminLogEventActionToggleSignatures': function(params) {\n    this.int32(648939889);\n    this.Bool(params.new_value);\n  },\n  'channelAdminLogEventActionUpdatePinned': function(params) {\n    this.int32(3924306968);\n    this.predicate(params.message);\n  },\n  'channelAdminLogEventActionEditMessage': function(params) {\n    this.int32(1889215493);\n    this.predicate(params.prev_message);\n    this.predicate(params.new_message);\n  },\n  'channelAdminLogEventActionDeleteMessage': function(params) {\n    this.int32(1121994683);\n    this.predicate(params.message);\n  },\n  'channelAdminLogEventActionParticipantJoin': function(params) {\n    this.int32(405815507);\n  },\n  'channelAdminLogEventActionParticipantLeave': function(params) {\n    this.int32(4170676210);\n  },\n  'channelAdminLogEventActionParticipantInvite': function(params) {\n    this.int32(3810276568);\n    this.predicate(params.participant);\n  },\n  'channelAdminLogEventActionParticipantToggleBan': function(params) {\n    this.int32(3872931198);\n    this.predicate(params.prev_participant);\n    this.predicate(params.new_participant);\n  },\n  'channelAdminLogEventActionParticipantToggleAdmin': function(params) {\n    this.int32(3580323600);\n    this.predicate(params.prev_participant);\n    this.predicate(params.new_participant);\n  },\n  'channelAdminLogEventActionChangeStickerSet': function(params) {\n    this.int32(2982398631);\n    this.predicate(params.prev_stickerset);\n    this.predicate(params.new_stickerset);\n  },\n  'channelAdminLogEventActionTogglePreHistoryHidden': function(params) {\n    this.int32(1599903217);\n    this.Bool(params.new_value);\n  },\n  'channelAdminLogEventActionDefaultBannedRights': function(params) {\n    this.int32(771095562);\n    this.predicate(params.prev_banned_rights);\n    this.predicate(params.new_banned_rights);\n  },\n  'channelAdminLogEventActionStopPoll': function(params) {\n    this.int32(2399639107);\n    this.predicate(params.message);\n  },\n  'channelAdminLogEventActionChangeLinkedChat': function(params) {\n    this.int32(2725218331);\n    this.int(params.prev_value);\n    this.int(params.new_value);\n  },\n  'channelAdminLogEventActionChangeLocation': function(params) {\n    this.int32(241923758);\n    this.predicate(params.prev_value);\n    this.predicate(params.new_value);\n  },\n  'channelAdminLogEventActionToggleSlowMode': function(params) {\n    this.int32(1401984889);\n    this.int(params.prev_value);\n    this.int(params.new_value);\n  },\n  'channelAdminLogEvent': function(params) {\n    this.int32(995769920);\n    this.long(params.id);\n    this.int(params.date);\n    this.int(params.user_id);\n    this.predicate(params.action);\n  },\n  'channels.adminLogResults': function(params) {\n    this.int32(3985307469);\n    this.vector(this.predicate, params.events);\n    this.vector(this.predicate, params.chats);\n    this.vector(this.predicate, params.users);\n  },\n  'channelAdminLogEventsFilter': function(params) {\n    this.int32(3926948580);\n    const flags = (this.has(params.join) << 0) | (this.has(params.leave) << 1) | (this.has(params.invite) << 2) | (this.has(params.ban) << 3) | (this.has(params.unban) << 4) | (this.has(params.kick) << 5) | (this.has(params.unkick) << 6) | (this.has(params.promote) << 7) | (this.has(params.demote) << 8) | (this.has(params.info) << 9) | (this.has(params.settings) << 10) | (this.has(params.pinned) << 11) | (this.has(params.edit) << 12) | (this.has(params.delete) << 13);\n    this.int32(flags);\n  },\n  'popularContact': function(params) {\n    this.int32(1558266229);\n    this.long(params.client_id);\n    this.int(params.importers);\n  },\n  'messages.favedStickersNotModified': function(params) {\n    this.int32(2660214483);\n  },\n  'messages.favedStickers': function(params) {\n    this.int32(4085198614);\n    this.int(params.hash);\n    this.vector(this.predicate, params.packs);\n    this.vector(this.predicate, params.stickers);\n  },\n  'recentMeUrlUnknown': function(params) {\n    this.int32(1189204285);\n    this.string(params.url);\n  },\n  'recentMeUrlUser': function(params) {\n    this.int32(2377921334);\n    this.string(params.url);\n    this.int(params.user_id);\n  },\n  'recentMeUrlChat': function(params) {\n    this.int32(2686132985);\n    this.string(params.url);\n    this.int(params.chat_id);\n  },\n  'recentMeUrlChatInvite': function(params) {\n    this.int32(3947431965);\n    this.string(params.url);\n    this.predicate(params.chat_invite);\n  },\n  'recentMeUrlStickerSet': function(params) {\n    this.int32(3154794460);\n    this.string(params.url);\n    this.predicate(params.set);\n  },\n  'help.recentMeUrls': function(params) {\n    this.int32(235081943);\n    this.vector(this.predicate, params.urls);\n    this.vector(this.predicate, params.chats);\n    this.vector(this.predicate, params.users);\n  },\n  'inputSingleMedia': function(params) {\n    this.int32(482797855);\n    const flags = (this.has(params.entities) << 0);\n    this.int32(flags);\n    this.predicate(params.media);\n    this.long(params.random_id);\n    this.string(params.message);\n    this.flagVector(this.predicate, params.entities);\n  },\n  'webAuthorization': function(params) {\n    this.int32(3402187762);\n    this.long(params.hash);\n    this.int(params.bot_id);\n    this.string(params.domain);\n    this.string(params.browser);\n    this.string(params.platform);\n    this.int(params.date_created);\n    this.int(params.date_active);\n    this.string(params.ip);\n    this.string(params.region);\n  },\n  'account.webAuthorizations': function(params) {\n    this.int32(3981887996);\n    this.vector(this.predicate, params.authorizations);\n    this.vector(this.predicate, params.users);\n  },\n  'inputMessageID': function(params) {\n    this.int32(2792792866);\n    this.int(params.id);\n  },\n  'inputMessageReplyTo': function(params) {\n    this.int32(3134751637);\n    this.int(params.id);\n  },\n  'inputMessagePinned': function(params) {\n    this.int32(2257003832);\n  },\n  'inputDialogPeer': function(params) {\n    this.int32(4239064759);\n    this.predicate(params.peer);\n  },\n  'inputDialogPeerFolder': function(params) {\n    this.int32(1684014375);\n    this.int(params.folder_id);\n  },\n  'dialogPeer': function(params) {\n    this.int32(3849174789);\n    this.predicate(params.peer);\n  },\n  'dialogPeerFolder': function(params) {\n    this.int32(1363483106);\n    this.int(params.folder_id);\n  },\n  'messages.foundStickerSetsNotModified': function(params) {\n    this.int32(223655517);\n  },\n  'messages.foundStickerSets': function(params) {\n    this.int32(1359533640);\n    this.int(params.hash);\n    this.vector(this.predicate, params.sets);\n  },\n  'fileHash': function(params) {\n    this.int32(1648543603);\n    this.int(params.offset);\n    this.int(params.limit);\n    this.bytes(params.hash);\n  },\n  'inputClientProxy': function(params) {\n    this.int32(1968737087);\n    this.string(params.address);\n    this.int(params.port);\n  },\n  'help.termsOfServiceUpdateEmpty': function(params) {\n    this.int32(3811614591);\n    this.int(params.expires);\n  },\n  'help.termsOfServiceUpdate': function(params) {\n    this.int32(686618977);\n    this.int(params.expires);\n    this.predicate(params.terms_of_service);\n  },\n  'inputSecureFileUploaded': function(params) {\n    this.int32(859091184);\n    this.long(params.id);\n    this.int(params.parts);\n    this.string(params.md5_checksum);\n    this.bytes(params.file_hash);\n    this.bytes(params.secret);\n  },\n  'inputSecureFile': function(params) {\n    this.int32(1399317950);\n    this.long(params.id);\n    this.long(params.access_hash);\n  },\n  'secureFileEmpty': function(params) {\n    this.int32(1679398724);\n  },\n  'secureFile': function(params) {\n    this.int32(3760683618);\n    this.long(params.id);\n    this.long(params.access_hash);\n    this.int(params.size);\n    this.int(params.dc_id);\n    this.int(params.date);\n    this.bytes(params.file_hash);\n    this.bytes(params.secret);\n  },\n  'secureData': function(params) {\n    this.int32(2330640067);\n    this.bytes(params.data);\n    this.bytes(params.data_hash);\n    this.bytes(params.secret);\n  },\n  'securePlainPhone': function(params) {\n    this.int32(2103482845);\n    this.string(params.phone);\n  },\n  'securePlainEmail': function(params) {\n    this.int32(569137759);\n    this.string(params.email);\n  },\n  'secureValueTypePersonalDetails': function(params) {\n    this.int32(2636808675);\n  },\n  'secureValueTypePassport': function(params) {\n    this.int32(1034709504);\n  },\n  'secureValueTypeDriverLicense': function(params) {\n    this.int32(115615172);\n  },\n  'secureValueTypeIdentityCard': function(params) {\n    this.int32(2698015819);\n  },\n  'secureValueTypeInternalPassport': function(params) {\n    this.int32(2577698595);\n  },\n  'secureValueTypeAddress': function(params) {\n    this.int32(3420659238);\n  },\n  'secureValueTypeUtilityBill': function(params) {\n    this.int32(4231435598);\n  },\n  'secureValueTypeBankStatement': function(params) {\n    this.int32(2299755533);\n  },\n  'secureValueTypeRentalAgreement': function(params) {\n    this.int32(2340959368);\n  },\n  'secureValueTypePassportRegistration': function(params) {\n    this.int32(2581823594);\n  },\n  'secureValueTypeTemporaryRegistration': function(params) {\n    this.int32(3926060083);\n  },\n  'secureValueTypePhone': function(params) {\n    this.int32(3005262555);\n  },\n  'secureValueTypeEmail': function(params) {\n    this.int32(2386339822);\n  },\n  'secureValue': function(params) {\n    this.int32(411017418);\n    const flags = (this.has(params.data) << 0) | (this.has(params.front_side) << 1) | (this.has(params.reverse_side) << 2) | (this.has(params.selfie) << 3) | (this.has(params.translation) << 6) | (this.has(params.files) << 4) | (this.has(params.plain_data) << 5);\n    this.int32(flags);\n    this.predicate(params.type);\n    this.flag(this.predicate, params.data);\n    this.flag(this.predicate, params.front_side);\n    this.flag(this.predicate, params.reverse_side);\n    this.flag(this.predicate, params.selfie);\n    this.flagVector(this.predicate, params.translation);\n    this.flagVector(this.predicate, params.files);\n    this.flag(this.predicate, params.plain_data);\n    this.bytes(params.hash);\n  },\n  'inputSecureValue': function(params) {\n    this.int32(3676426407);\n    const flags = (this.has(params.data) << 0) | (this.has(params.front_side) << 1) | (this.has(params.reverse_side) << 2) | (this.has(params.selfie) << 3) | (this.has(params.translation) << 6) | (this.has(params.files) << 4) | (this.has(params.plain_data) << 5);\n    this.int32(flags);\n    this.predicate(params.type);\n    this.flag(this.predicate, params.data);\n    this.flag(this.predicate, params.front_side);\n    this.flag(this.predicate, params.reverse_side);\n    this.flag(this.predicate, params.selfie);\n    this.flagVector(this.predicate, params.translation);\n    this.flagVector(this.predicate, params.files);\n    this.flag(this.predicate, params.plain_data);\n  },\n  'secureValueHash': function(params) {\n    this.int32(3978218928);\n    this.predicate(params.type);\n    this.bytes(params.hash);\n  },\n  'secureValueErrorData': function(params) {\n    this.int32(3903065049);\n    this.predicate(params.type);\n    this.bytes(params.data_hash);\n    this.string(params.field);\n    this.string(params.text);\n  },\n  'secureValueErrorFrontSide': function(params) {\n    this.int32(12467706);\n    this.predicate(params.type);\n    this.bytes(params.file_hash);\n    this.string(params.text);\n  },\n  'secureValueErrorReverseSide': function(params) {\n    this.int32(2257201829);\n    this.predicate(params.type);\n    this.bytes(params.file_hash);\n    this.string(params.text);\n  },\n  'secureValueErrorSelfie': function(params) {\n    this.int32(3845639894);\n    this.predicate(params.type);\n    this.bytes(params.file_hash);\n    this.string(params.text);\n  },\n  'secureValueErrorFile': function(params) {\n    this.int32(2054162547);\n    this.predicate(params.type);\n    this.bytes(params.file_hash);\n    this.string(params.text);\n  },\n  'secureValueErrorFiles': function(params) {\n    this.int32(1717706985);\n    this.predicate(params.type);\n    this.vector(this.bytes, params.file_hash);\n    this.string(params.text);\n  },\n  'secureValueError': function(params) {\n    this.int32(2258466191);\n    this.predicate(params.type);\n    this.bytes(params.hash);\n    this.string(params.text);\n  },\n  'secureValueErrorTranslationFile': function(params) {\n    this.int32(2702460784);\n    this.predicate(params.type);\n    this.bytes(params.file_hash);\n    this.string(params.text);\n  },\n  'secureValueErrorTranslationFiles': function(params) {\n    this.int32(878931416);\n    this.predicate(params.type);\n    this.vector(this.bytes, params.file_hash);\n    this.string(params.text);\n  },\n  'secureCredentialsEncrypted': function(params) {\n    this.int32(871426631);\n    this.bytes(params.data);\n    this.bytes(params.hash);\n    this.bytes(params.secret);\n  },\n  'account.authorizationForm': function(params) {\n    this.int32(2905480408);\n    const flags = (this.has(params.privacy_policy_url) << 0);\n    this.int32(flags);\n    this.vector(this.predicate, params.required_types);\n    this.vector(this.predicate, params.values);\n    this.vector(this.predicate, params.errors);\n    this.vector(this.predicate, params.users);\n    this.flag(this.string, params.privacy_policy_url);\n  },\n  'account.sentEmailCode': function(params) {\n    this.int32(2166326607);\n    this.string(params.email_pattern);\n    this.int(params.length);\n  },\n  'help.deepLinkInfoEmpty': function(params) {\n    this.int32(1722786150);\n  },\n  'help.deepLinkInfo': function(params) {\n    this.int32(1783556146);\n    const flags = (this.has(params.update_app) << 0) | (this.has(params.entities) << 1);\n    this.int32(flags);\n    this.string(params.message);\n    this.flagVector(this.predicate, params.entities);\n  },\n  'savedPhoneContact': function(params) {\n    this.int32(289586518);\n    this.string(params.phone);\n    this.string(params.first_name);\n    this.string(params.last_name);\n    this.int(params.date);\n  },\n  'account.takeout': function(params) {\n    this.int32(1304052993);\n    this.long(params.id);\n  },\n  'passwordKdfAlgoUnknown': function(params) {\n    this.int32(3562713238);\n  },\n  'passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow': function(params) {\n    this.int32(982592842);\n    this.bytes(params.salt1);\n    this.bytes(params.salt2);\n    this.int(params.g);\n    this.bytes(params.p);\n  },\n  'securePasswordKdfAlgoUnknown': function(params) {\n    this.int32(4883767);\n  },\n  'securePasswordKdfAlgoPBKDF2HMACSHA512iter100000': function(params) {\n    this.int32(3153255840);\n    this.bytes(params.salt);\n  },\n  'securePasswordKdfAlgoSHA512': function(params) {\n    this.int32(2252807570);\n    this.bytes(params.salt);\n  },\n  'secureSecretSettings': function(params) {\n    this.int32(354925740);\n    this.predicate(params.secure_algo);\n    this.bytes(params.secure_secret);\n    this.long(params.secure_secret_id);\n  },\n  'inputCheckPasswordEmpty': function(params) {\n    this.int32(2558588504);\n  },\n  'inputCheckPasswordSRP': function(params) {\n    this.int32(3531600002);\n    this.long(params.srp_id);\n    this.bytes(params.A);\n    this.bytes(params.M1);\n  },\n  'secureRequiredType': function(params) {\n    this.int32(2191366618);\n    const flags = (this.has(params.native_names) << 0) | (this.has(params.selfie_required) << 1) | (this.has(params.translation_required) << 2);\n    this.int32(flags);\n    this.predicate(params.type);\n  },\n  'secureRequiredTypeOneOf': function(params) {\n    this.int32(41187252);\n    this.vector(this.predicate, params.types);\n  },\n  'help.passportConfigNotModified': function(params) {\n    this.int32(3216634967);\n  },\n  'help.passportConfig': function(params) {\n    this.int32(2694370991);\n    this.int(params.hash);\n    this.predicate(params.countries_langs);\n  },\n  'inputAppEvent': function(params) {\n    this.int32(488313413);\n    this.double(params.time);\n    this.string(params.type);\n    this.long(params.peer);\n    this.predicate(params.data);\n  },\n  'jsonObjectValue': function(params) {\n    this.int32(3235781593);\n    this.string(params.key);\n    this.predicate(params.value);\n  },\n  'jsonNull': function(params) {\n    this.int32(1064139624);\n  },\n  'jsonBool': function(params) {\n    this.int32(3342098026);\n    this.Bool(params.value);\n  },\n  'jsonNumber': function(params) {\n    this.int32(736157604);\n    this.double(params.value);\n  },\n  'jsonString': function(params) {\n    this.int32(3072226938);\n    this.string(params.value);\n  },\n  'jsonArray': function(params) {\n    this.int32(4148447075);\n    this.vector(this.predicate, params.value);\n  },\n  'jsonObject': function(params) {\n    this.int32(2579616925);\n    this.vector(this.predicate, params.value);\n  },\n  'pageTableCell': function(params) {\n    this.int32(878078826);\n    const flags = (this.has(params.header) << 0) | (this.has(params.align_center) << 3) | (this.has(params.align_right) << 4) | (this.has(params.valign_middle) << 5) | (this.has(params.valign_bottom) << 6) | (this.has(params.text) << 7) | (this.has(params.colspan) << 1) | (this.has(params.rowspan) << 2);\n    this.int32(flags);\n    this.flag(this.predicate, params.text);\n    this.flag(this.int, params.colspan);\n    this.flag(this.int, params.rowspan);\n  },\n  'pageTableRow': function(params) {\n    this.int32(3770729957);\n    this.vector(this.predicate, params.cells);\n  },\n  'pageCaption': function(params) {\n    this.int32(1869903447);\n    this.predicate(params.text);\n    this.predicate(params.credit);\n  },\n  'pageListItemText': function(params) {\n    this.int32(3106911949);\n    this.predicate(params.text);\n  },\n  'pageListItemBlocks': function(params) {\n    this.int32(635466748);\n    this.vector(this.predicate, params.blocks);\n  },\n  'pageListOrderedItemText': function(params) {\n    this.int32(1577484359);\n    this.string(params.num);\n    this.predicate(params.text);\n  },\n  'pageListOrderedItemBlocks': function(params) {\n    this.int32(2564655414);\n    this.string(params.num);\n    this.vector(this.predicate, params.blocks);\n  },\n  'pageRelatedArticle': function(params) {\n    this.int32(3012615176);\n    const flags = (this.has(params.title) << 0) | (this.has(params.description) << 1) | (this.has(params.photo_id) << 2) | (this.has(params.author) << 3) | (this.has(params.published_date) << 4);\n    this.int32(flags);\n    this.string(params.url);\n    this.long(params.webpage_id);\n    this.flag(this.string, params.title);\n    this.flag(this.string, params.description);\n    this.flag(this.long, params.photo_id);\n    this.flag(this.string, params.author);\n    this.flag(this.int, params.published_date);\n  },\n  'page': function(params) {\n    this.int32(2556788493);\n    const flags = (this.has(params.part) << 0) | (this.has(params.rtl) << 1) | (this.has(params.v2) << 2) | (this.has(params.views) << 3);\n    this.int32(flags);\n    this.string(params.url);\n    this.vector(this.predicate, params.blocks);\n    this.vector(this.predicate, params.photos);\n    this.vector(this.predicate, params.documents);\n    this.flag(this.int, params.views);\n  },\n  'help.supportName': function(params) {\n    this.int32(2349199817);\n    this.string(params.name);\n  },\n  'help.userInfoEmpty': function(params) {\n    this.int32(4088278765);\n  },\n  'help.userInfo': function(params) {\n    this.int32(32192344);\n    this.string(params.message);\n    this.vector(this.predicate, params.entities);\n    this.string(params.author);\n    this.int(params.date);\n  },\n  'pollAnswer': function(params) {\n    this.int32(1823064809);\n    this.string(params.text);\n    this.bytes(params.option);\n  },\n  'poll': function(params) {\n    this.int32(2262925665);\n    this.long(params.id);\n    const flags = (this.has(params.closed) << 0) | (this.has(params.public_voters) << 1) | (this.has(params.multiple_choice) << 2) | (this.has(params.quiz) << 3) | (this.has(params.close_period) << 4) | (this.has(params.close_date) << 5);\n    this.int32(flags);\n    this.string(params.question);\n    this.vector(this.predicate, params.answers);\n    this.flag(this.int, params.close_period);\n    this.flag(this.int, params.close_date);\n  },\n  'pollAnswerVoters': function(params) {\n    this.int32(997055186);\n    const flags = (this.has(params.chosen) << 0) | (this.has(params.correct) << 1);\n    this.int32(flags);\n    this.bytes(params.option);\n    this.int(params.voters);\n  },\n  'pollResults': function(params) {\n    this.int32(3135029667);\n    const flags = (this.has(params.min) << 0) | (this.has(params.results) << 1) | (this.has(params.total_voters) << 2) | (this.has(params.recent_voters) << 3) | (this.has(params.solution) << 4) | (this.has(params.solution_entities) << 4);\n    this.int32(flags);\n    this.flagVector(this.predicate, params.results);\n    this.flag(this.int, params.total_voters);\n    this.flagVector(this.int, params.recent_voters);\n    this.flag(this.string, params.solution);\n    this.flagVector(this.predicate, params.solution_entities);\n  },\n  'chatOnlines': function(params) {\n    this.int32(4030849616);\n    this.int(params.onlines);\n  },\n  'statsURL': function(params) {\n    this.int32(1202287072);\n    this.string(params.url);\n  },\n  'chatAdminRights': function(params) {\n    this.int32(1605510357);\n    const flags = (this.has(params.change_info) << 0) | (this.has(params.post_messages) << 1) | (this.has(params.edit_messages) << 2) | (this.has(params.delete_messages) << 3) | (this.has(params.ban_users) << 4) | (this.has(params.invite_users) << 5) | (this.has(params.pin_messages) << 7) | (this.has(params.add_admins) << 9);\n    this.int32(flags);\n  },\n  'chatBannedRights': function(params) {\n    this.int32(2668758040);\n    const flags = (this.has(params.view_messages) << 0) | (this.has(params.send_messages) << 1) | (this.has(params.send_media) << 2) | (this.has(params.send_stickers) << 3) | (this.has(params.send_gifs) << 4) | (this.has(params.send_games) << 5) | (this.has(params.send_inline) << 6) | (this.has(params.embed_links) << 7) | (this.has(params.send_polls) << 8) | (this.has(params.change_info) << 10) | (this.has(params.invite_users) << 15) | (this.has(params.pin_messages) << 17);\n    this.int32(flags);\n    this.int(params.until_date);\n  },\n  'inputWallPaper': function(params) {\n    this.int32(3861952889);\n    this.long(params.id);\n    this.long(params.access_hash);\n  },\n  'inputWallPaperSlug': function(params) {\n    this.int32(1913199744);\n    this.string(params.slug);\n  },\n  'inputWallPaperNoFile': function(params) {\n    this.int32(2217196460);\n  },\n  'account.wallPapersNotModified': function(params) {\n    this.int32(471437699);\n  },\n  'account.wallPapers': function(params) {\n    this.int32(1881892265);\n    this.int(params.hash);\n    this.vector(this.predicate, params.wallpapers);\n  },\n  'codeSettings': function(params) {\n    this.int32(3737042563);\n    const flags = (this.has(params.allow_flashcall) << 0) | (this.has(params.current_number) << 1) | (this.has(params.allow_app_hash) << 4);\n    this.int32(flags);\n  },\n  'wallPaperSettings': function(params) {\n    this.int32(84438264);\n    const flags = (this.has(params.blur) << 1) | (this.has(params.motion) << 2) | (this.has(params.background_color) << 0) | (this.has(params.second_background_color) << 4) | (this.has(params.intensity) << 3) | (this.has(params.rotation) << 4);\n    this.int32(flags);\n    this.flag(this.int, params.background_color);\n    this.flag(this.int, params.second_background_color);\n    this.flag(this.int, params.intensity);\n    this.flag(this.int, params.rotation);\n  },\n  'autoDownloadSettings': function(params) {\n    this.int32(3762434803);\n    const flags = (this.has(params.disabled) << 0) | (this.has(params.video_preload_large) << 1) | (this.has(params.audio_preload_next) << 2) | (this.has(params.phonecalls_less_data) << 3);\n    this.int32(flags);\n    this.int(params.photo_size_max);\n    this.int(params.video_size_max);\n    this.int(params.file_size_max);\n    this.int(params.video_upload_maxbitrate);\n  },\n  'account.autoDownloadSettings': function(params) {\n    this.int32(1674235686);\n    this.predicate(params.low);\n    this.predicate(params.medium);\n    this.predicate(params.high);\n  },\n  'emojiKeyword': function(params) {\n    this.int32(3585325561);\n    this.string(params.keyword);\n    this.vector(this.string, params.emoticons);\n  },\n  'emojiKeywordDeleted': function(params) {\n    this.int32(594408994);\n    this.string(params.keyword);\n    this.vector(this.string, params.emoticons);\n  },\n  'emojiKeywordsDifference': function(params) {\n    this.int32(1556570557);\n    this.string(params.lang_code);\n    this.int(params.from_version);\n    this.int(params.version);\n    this.vector(this.predicate, params.keywords);\n  },\n  'emojiURL': function(params) {\n    this.int32(2775937949);\n    this.string(params.url);\n  },\n  'emojiLanguage': function(params) {\n    this.int32(3019592545);\n    this.string(params.lang_code);\n  },\n  'fileLocationToBeDeprecated': function(params) {\n    this.int32(3162490573);\n    this.long(params.volume_id);\n    this.int(params.local_id);\n  },\n  'folder': function(params) {\n    this.int32(4283715173);\n    const flags = (this.has(params.autofill_new_broadcasts) << 0) | (this.has(params.autofill_public_groups) << 1) | (this.has(params.autofill_new_correspondents) << 2) | (this.has(params.photo) << 3);\n    this.int32(flags);\n    this.int(params.id);\n    this.string(params.title);\n    this.flag(this.predicate, params.photo);\n  },\n  'inputFolderPeer': function(params) {\n    this.int32(4224893590);\n    this.predicate(params.peer);\n    this.int(params.folder_id);\n  },\n  'folderPeer': function(params) {\n    this.int32(3921323624);\n    this.predicate(params.peer);\n    this.int(params.folder_id);\n  },\n  'messages.searchCounter': function(params) {\n    this.int32(3896830975);\n    const flags = (this.has(params.inexact) << 1);\n    this.int32(flags);\n    this.predicate(params.filter);\n    this.int(params.count);\n  },\n  'urlAuthResultRequest': function(params) {\n    this.int32(2463316494);\n    const flags = (this.has(params.request_write_access) << 0);\n    this.int32(flags);\n    this.predicate(params.bot);\n    this.string(params.domain);\n  },\n  'urlAuthResultAccepted': function(params) {\n    this.int32(2408320590);\n    this.string(params.url);\n  },\n  'urlAuthResultDefault': function(params) {\n    this.int32(2849430303);\n  },\n  'channelLocationEmpty': function(params) {\n    this.int32(3216354699);\n  },\n  'channelLocation': function(params) {\n    this.int32(547062491);\n    this.predicate(params.geo_point);\n    this.string(params.address);\n  },\n  'peerLocated': function(params) {\n    this.int32(3393592157);\n    this.predicate(params.peer);\n    this.int(params.expires);\n    this.int(params.distance);\n  },\n  'peerSelfLocated': function(params) {\n    this.int32(4176226379);\n    this.int(params.expires);\n  },\n  'restrictionReason': function(params) {\n    this.int32(3497176244);\n    this.string(params.platform);\n    this.string(params.reason);\n    this.string(params.text);\n  },\n  'inputTheme': function(params) {\n    this.int32(1012306921);\n    this.long(params.id);\n    this.long(params.access_hash);\n  },\n  'inputThemeSlug': function(params) {\n    this.int32(4119399921);\n    this.string(params.slug);\n  },\n  'theme': function(params) {\n    this.int32(42930452);\n    const flags = (this.has(params.creator) << 0) | (this.has(params.default) << 1) | (this.has(params.document) << 2) | (this.has(params.settings) << 3);\n    this.int32(flags);\n    this.long(params.id);\n    this.long(params.access_hash);\n    this.string(params.slug);\n    this.string(params.title);\n    this.flag(this.predicate, params.document);\n    this.flag(this.predicate, params.settings);\n    this.int(params.installs_count);\n  },\n  'account.themesNotModified': function(params) {\n    this.int32(4095653410);\n  },\n  'account.themes': function(params) {\n    this.int32(2137482273);\n    this.int(params.hash);\n    this.vector(this.predicate, params.themes);\n  },\n  'auth.loginToken': function(params) {\n    this.int32(1654593920);\n    this.int(params.expires);\n    this.bytes(params.token);\n  },\n  'auth.loginTokenMigrateTo': function(params) {\n    this.int32(110008598);\n    this.int(params.dc_id);\n    this.bytes(params.token);\n  },\n  'auth.loginTokenSuccess': function(params) {\n    this.int32(957176926);\n    this.predicate(params.authorization);\n  },\n  'account.contentSettings': function(params) {\n    this.int32(1474462241);\n    const flags = (this.has(params.sensitive_enabled) << 0) | (this.has(params.sensitive_can_change) << 1);\n    this.int32(flags);\n  },\n  'messages.inactiveChats': function(params) {\n    this.int32(2837970629);\n    this.vector(this.int, params.dates);\n    this.vector(this.predicate, params.chats);\n    this.vector(this.predicate, params.users);\n  },\n  'baseThemeClassic': function(params) {\n    this.int32(3282117730);\n  },\n  'baseThemeDay': function(params) {\n    this.int32(4225242760);\n  },\n  'baseThemeNight': function(params) {\n    this.int32(3081969320);\n  },\n  'baseThemeTinted': function(params) {\n    this.int32(1834973166);\n  },\n  'baseThemeArctic': function(params) {\n    this.int32(1527845466);\n  },\n  'inputThemeSettings': function(params) {\n    this.int32(3176168657);\n    const flags = (this.has(params.message_top_color) << 0) | (this.has(params.message_bottom_color) << 0) | (this.has(params.wallpaper) << 1) | (this.has(params.wallpaper_settings) << 1);\n    this.int32(flags);\n    this.predicate(params.base_theme);\n    this.int(params.accent_color);\n    this.flag(this.int, params.message_top_color);\n    this.flag(this.int, params.message_bottom_color);\n    this.flag(this.predicate, params.wallpaper);\n    this.flag(this.predicate, params.wallpaper_settings);\n  },\n  'themeSettings': function(params) {\n    this.int32(2618595402);\n    const flags = (this.has(params.message_top_color) << 0) | (this.has(params.message_bottom_color) << 0) | (this.has(params.wallpaper) << 1);\n    this.int32(flags);\n    this.predicate(params.base_theme);\n    this.int(params.accent_color);\n    this.flag(this.int, params.message_top_color);\n    this.flag(this.int, params.message_bottom_color);\n    this.flag(this.predicate, params.wallpaper);\n  },\n  'webPageAttributeTheme': function(params) {\n    this.int32(1421174295);\n    const flags = (this.has(params.documents) << 0) | (this.has(params.settings) << 1);\n    this.int32(flags);\n    this.flagVector(this.predicate, params.documents);\n    this.flag(this.predicate, params.settings);\n  },\n  'messageUserVote': function(params) {\n    this.int32(2727236953);\n    this.int(params.user_id);\n    this.bytes(params.option);\n    this.int(params.date);\n  },\n  'messageUserVoteInputOption': function(params) {\n    this.int32(909603888);\n    this.int(params.user_id);\n    this.int(params.date);\n  },\n  'messageUserVoteMultiple': function(params) {\n    this.int32(244310238);\n    this.int(params.user_id);\n    this.vector(this.bytes, params.options);\n    this.int(params.date);\n  },\n  'messages.votesList': function(params) {\n    this.int32(136574537);\n    const flags = (this.has(params.next_offset) << 0);\n    this.int32(flags);\n    this.int(params.count);\n    this.vector(this.predicate, params.votes);\n    this.vector(this.predicate, params.users);\n    this.flag(this.string, params.next_offset);\n  },\n  'bankCardOpenUrl': function(params) {\n    this.int32(4117234314);\n    this.string(params.url);\n    this.string(params.name);\n  },\n  'payments.bankCardData': function(params) {\n    this.int32(1042605427);\n    this.string(params.title);\n    this.vector(this.predicate, params.open_urls);\n  },\n  'dialogFilter': function(params) {\n    this.int32(1949890536);\n    const flags = (this.has(params.contacts) << 0) | (this.has(params.non_contacts) << 1) | (this.has(params.groups) << 2) | (this.has(params.broadcasts) << 3) | (this.has(params.bots) << 4) | (this.has(params.exclude_muted) << 11) | (this.has(params.exclude_read) << 12) | (this.has(params.exclude_archived) << 13) | (this.has(params.emoticon) << 25);\n    this.int32(flags);\n    this.int(params.id);\n    this.string(params.title);\n    this.flag(this.string, params.emoticon);\n    this.vector(this.predicate, params.pinned_peers);\n    this.vector(this.predicate, params.include_peers);\n    this.vector(this.predicate, params.exclude_peers);\n  },\n  'dialogFilterSuggested': function(params) {\n    this.int32(2004110666);\n    this.predicate(params.filter);\n    this.string(params.description);\n  },\n  'statsDateRangeDays': function(params) {\n    this.int32(3057118639);\n    this.int(params.min_date);\n    this.int(params.max_date);\n  },\n  'statsAbsValueAndPrev': function(params) {\n    this.int32(3410210014);\n    this.double(params.current);\n    this.double(params.previous);\n  },\n  'statsPercentValue': function(params) {\n    this.int32(3419287520);\n    this.double(params.part);\n    this.double(params.total);\n  },\n  'statsGraphAsync': function(params) {\n    this.int32(1244130093);\n    this.string(params.token);\n  },\n  'statsGraphError': function(params) {\n    this.int32(3202127906);\n    this.string(params.error);\n  },\n  'statsGraph': function(params) {\n    this.int32(2393138358);\n    const flags = (this.has(params.zoom_token) << 0);\n    this.int32(flags);\n    this.predicate(params.json);\n    this.flag(this.string, params.zoom_token);\n  },\n  'messageInteractionCounters': function(params) {\n    this.int32(2907687357);\n    this.int(params.msg_id);\n    this.int(params.views);\n    this.int(params.forwards);\n  },\n  'stats.broadcastStats': function(params) {\n    this.int32(3187114900);\n    this.predicate(params.period);\n    this.predicate(params.followers);\n    this.predicate(params.views_per_post);\n    this.predicate(params.shares_per_post);\n    this.predicate(params.enabled_notifications);\n    this.predicate(params.growth_graph);\n    this.predicate(params.followers_graph);\n    this.predicate(params.mute_graph);\n    this.predicate(params.top_hours_graph);\n    this.predicate(params.interactions_graph);\n    this.predicate(params.iv_interactions_graph);\n    this.predicate(params.views_by_source_graph);\n    this.predicate(params.new_followers_by_source_graph);\n    this.predicate(params.languages_graph);\n    this.vector(this.predicate, params.recent_message_interactions);\n  },\n  'help.promoDataEmpty': function(params) {\n    this.int32(2566302837);\n    this.int(params.expires);\n  },\n  'help.promoData': function(params) {\n    this.int32(2352576831);\n    const flags = (this.has(params.proxy) << 0) | (this.has(params.psa_type) << 1) | (this.has(params.psa_message) << 2);\n    this.int32(flags);\n    this.int(params.expires);\n    this.predicate(params.peer);\n    this.vector(this.predicate, params.chats);\n    this.vector(this.predicate, params.users);\n    this.flag(this.string, params.psa_type);\n    this.flag(this.string, params.psa_message);\n  },\n  'invokeAfterMsg': function(params) {\n    this.int32(3416209197);\n    this.long(params.msg_id);\n    this.predicate(params.query);\n  },\n  'invokeAfterMsgs': function(params) {\n    this.int32(1036301552);\n    this.vector(this.long, params.msg_ids);\n    this.predicate(params.query);\n  },\n  'initConnection': function(params) {\n    this.int32(3251461801);\n    const flags = (this.has(params.proxy) << 0) | (this.has(params.params) << 1);\n    this.int32(flags);\n    this.int(params.api_id);\n    this.string(params.device_model);\n    this.string(params.system_version);\n    this.string(params.app_version);\n    this.string(params.system_lang_code);\n    this.string(params.lang_pack);\n    this.string(params.lang_code);\n    this.flag(this.predicate, params.proxy);\n    this.flag(this.predicate, params.params);\n    this.predicate(params.query);\n  },\n  'invokeWithLayer': function(params) {\n    this.int32(3667594509);\n    this.int(params.layer);\n    this.predicate(params.query);\n  },\n  'invokeWithoutUpdates': function(params) {\n    this.int32(3214170551);\n    this.predicate(params.query);\n  },\n  'invokeWithMessagesRange': function(params) {\n    this.int32(911373810);\n    this.predicate(params.range);\n    this.predicate(params.query);\n  },\n  'invokeWithTakeout': function(params) {\n    this.int32(2896821550);\n    this.long(params.takeout_id);\n    this.predicate(params.query);\n  },\n  'auth.sendCode': function(params) {\n    this.int32(2792825935);\n    this.string(params.phone_number);\n    this.int(params.api_id);\n    this.string(params.api_hash);\n    this.predicate(params.settings);\n  },\n  'auth.signUp': function(params) {\n    this.int32(2163139623);\n    this.string(params.phone_number);\n    this.string(params.phone_code_hash);\n    this.string(params.first_name);\n    this.string(params.last_name);\n  },\n  'auth.signIn': function(params) {\n    this.int32(3168081281);\n    this.string(params.phone_number);\n    this.string(params.phone_code_hash);\n    this.string(params.phone_code);\n  },\n  'auth.logOut': function(params) {\n    this.int32(1461180992);\n  },\n  'auth.resetAuthorizations': function(params) {\n    this.int32(2678787354);\n  },\n  'auth.exportAuthorization': function(params) {\n    this.int32(3854565325);\n    this.int(params.dc_id);\n  },\n  'auth.importAuthorization': function(params) {\n    this.int32(3824129555);\n    this.int(params.id);\n    this.bytes(params.bytes);\n  },\n  'auth.bindTempAuthKey': function(params) {\n    this.int32(3453233669);\n    this.long(params.perm_auth_key_id);\n    this.long(params.nonce);\n    this.int(params.expires_at);\n    this.bytes(params.encrypted_message);\n  },\n  'auth.importBotAuthorization': function(params) {\n    this.int32(1738800940);\n    this.int(params.flags);\n    this.int(params.api_id);\n    this.string(params.api_hash);\n    this.string(params.bot_auth_token);\n  },\n  'auth.checkPassword': function(params) {\n    this.int32(3515567382);\n    this.predicate(params.password);\n  },\n  'auth.requestPasswordRecovery': function(params) {\n    this.int32(3633822822);\n  },\n  'auth.recoverPassword': function(params) {\n    this.int32(1319464594);\n    this.string(params.code);\n  },\n  'auth.resendCode': function(params) {\n    this.int32(1056025023);\n    this.string(params.phone_number);\n    this.string(params.phone_code_hash);\n  },\n  'auth.cancelCode': function(params) {\n    this.int32(520357240);\n    this.string(params.phone_number);\n    this.string(params.phone_code_hash);\n  },\n  'auth.dropTempAuthKeys': function(params) {\n    this.int32(2387124616);\n    this.vector(this.long, params.except_auth_keys);\n  },\n  'auth.exportLoginToken': function(params) {\n    this.int32(2981369111);\n    this.int(params.api_id);\n    this.string(params.api_hash);\n    this.vector(this.int, params.except_ids);\n  },\n  'auth.importLoginToken': function(params) {\n    this.int32(2511101156);\n    this.bytes(params.token);\n  },\n  'auth.acceptLoginToken': function(params) {\n    this.int32(3902057805);\n    this.bytes(params.token);\n  },\n  'account.registerDevice': function(params) {\n    this.int32(1754754159);\n    const flags = (this.has(params.no_muted) << 0);\n    this.int32(flags);\n    this.int(params.token_type);\n    this.string(params.token);\n    this.Bool(params.app_sandbox);\n    this.bytes(params.secret);\n    this.vector(this.int, params.other_uids);\n  },\n  'account.unregisterDevice': function(params) {\n    this.int32(813089983);\n    this.int(params.token_type);\n    this.string(params.token);\n    this.vector(this.int, params.other_uids);\n  },\n  'account.updateNotifySettings': function(params) {\n    this.int32(2227067795);\n    this.predicate(params.peer);\n    this.predicate(params.settings);\n  },\n  'account.getNotifySettings': function(params) {\n    this.int32(313765169);\n    this.predicate(params.peer);\n  },\n  'account.resetNotifySettings': function(params) {\n    this.int32(3682473799);\n  },\n  'account.updateProfile': function(params) {\n    this.int32(2018596725);\n    const flags = (this.has(params.first_name) << 0) | (this.has(params.last_name) << 1) | (this.has(params.about) << 2);\n    this.int32(flags);\n    this.flag(this.string, params.first_name);\n    this.flag(this.string, params.last_name);\n    this.flag(this.string, params.about);\n  },\n  'account.updateStatus': function(params) {\n    this.int32(1713919532);\n    this.Bool(params.offline);\n  },\n  'account.getWallPapers': function(params) {\n    this.int32(2864387939);\n    this.int(params.hash);\n  },\n  'account.reportPeer': function(params) {\n    this.int32(2920848735);\n    this.predicate(params.peer);\n    this.predicate(params.reason);\n  },\n  'account.checkUsername': function(params) {\n    this.int32(655677548);\n    this.string(params.username);\n  },\n  'account.updateUsername': function(params) {\n    this.int32(1040964988);\n    this.string(params.username);\n  },\n  'account.getPrivacy': function(params) {\n    this.int32(3671837008);\n    this.predicate(params.key);\n  },\n  'account.setPrivacy': function(params) {\n    this.int32(3388480744);\n    this.predicate(params.key);\n    this.vector(this.predicate, params.rules);\n  },\n  'account.deleteAccount': function(params) {\n    this.int32(1099779595);\n    this.string(params.reason);\n  },\n  'account.getAccountTTL': function(params) {\n    this.int32(150761757);\n  },\n  'account.setAccountTTL': function(params) {\n    this.int32(608323678);\n    this.predicate(params.ttl);\n  },\n  'account.sendChangePhoneCode': function(params) {\n    this.int32(2186758885);\n    this.string(params.phone_number);\n    this.predicate(params.settings);\n  },\n  'account.changePhone': function(params) {\n    this.int32(1891839707);\n    this.string(params.phone_number);\n    this.string(params.phone_code_hash);\n    this.string(params.phone_code);\n  },\n  'account.updateDeviceLocked': function(params) {\n    this.int32(954152242);\n    this.int(params.period);\n  },\n  'account.getAuthorizations': function(params) {\n    this.int32(3810574680);\n  },\n  'account.resetAuthorization': function(params) {\n    this.int32(3749180348);\n    this.long(params.hash);\n  },\n  'account.getPassword': function(params) {\n    this.int32(1418342645);\n  },\n  'account.getPasswordSettings': function(params) {\n    this.int32(2631199481);\n    this.predicate(params.password);\n  },\n  'account.updatePasswordSettings': function(params) {\n    this.int32(2778402863);\n    this.predicate(params.password);\n    this.predicate(params.new_settings);\n  },\n  'account.sendConfirmPhoneCode': function(params) {\n    this.int32(457157256);\n    this.string(params.hash);\n    this.predicate(params.settings);\n  },\n  'account.confirmPhone': function(params) {\n    this.int32(1596029123);\n    this.string(params.phone_code_hash);\n    this.string(params.phone_code);\n  },\n  'account.getTmpPassword': function(params) {\n    this.int32(1151208273);\n    this.predicate(params.password);\n    this.int(params.period);\n  },\n  'account.getWebAuthorizations': function(params) {\n    this.int32(405695855);\n  },\n  'account.resetWebAuthorization': function(params) {\n    this.int32(755087855);\n    this.long(params.hash);\n  },\n  'account.resetWebAuthorizations': function(params) {\n    this.int32(1747789204);\n  },\n  'account.getAllSecureValues': function(params) {\n    this.int32(2995305597);\n  },\n  'account.getSecureValue': function(params) {\n    this.int32(1936088002);\n    this.vector(this.predicate, params.types);\n  },\n  'account.saveSecureValue': function(params) {\n    this.int32(2308956957);\n    this.predicate(params.value);\n    this.long(params.secure_secret_id);\n  },\n  'account.deleteSecureValue': function(params) {\n    this.int32(3095444555);\n    this.vector(this.predicate, params.types);\n  },\n  'account.getAuthorizationForm': function(params) {\n    this.int32(3094063329);\n    this.int(params.bot_id);\n    this.string(params.scope);\n    this.string(params.public_key);\n  },\n  'account.acceptAuthorization': function(params) {\n    this.int32(3875699860);\n    this.int(params.bot_id);\n    this.string(params.scope);\n    this.string(params.public_key);\n    this.vector(this.predicate, params.value_hashes);\n    this.predicate(params.credentials);\n  },\n  'account.sendVerifyPhoneCode': function(params) {\n    this.int32(2778945273);\n    this.string(params.phone_number);\n    this.predicate(params.settings);\n  },\n  'account.verifyPhone': function(params) {\n    this.int32(1305716726);\n    this.string(params.phone_number);\n    this.string(params.phone_code_hash);\n    this.string(params.phone_code);\n  },\n  'account.sendVerifyEmailCode': function(params) {\n    this.int32(1880182943);\n    this.string(params.email);\n  },\n  'account.verifyEmail': function(params) {\n    this.int32(3971627483);\n    this.string(params.email);\n    this.string(params.code);\n  },\n  'account.initTakeoutSession': function(params) {\n    this.int32(4032514052);\n    const flags = (this.has(params.contacts) << 0) | (this.has(params.message_users) << 1) | (this.has(params.message_chats) << 2) | (this.has(params.message_megagroups) << 3) | (this.has(params.message_channels) << 4) | (this.has(params.files) << 5) | (this.has(params.file_max_size) << 5);\n    this.int32(flags);\n    this.flag(this.int, params.file_max_size);\n  },\n  'account.finishTakeoutSession': function(params) {\n    this.int32(489050862);\n    const flags = (this.has(params.success) << 0);\n    this.int32(flags);\n  },\n  'account.confirmPasswordEmail': function(params) {\n    this.int32(2413762848);\n    this.string(params.code);\n  },\n  'account.resendPasswordEmail': function(params) {\n    this.int32(2055154197);\n  },\n  'account.cancelPasswordEmail': function(params) {\n    this.int32(3251361206);\n  },\n  'account.getContactSignUpNotification': function(params) {\n    this.int32(2668087080);\n  },\n  'account.setContactSignUpNotification': function(params) {\n    this.int32(3488890721);\n    this.Bool(params.silent);\n  },\n  'account.getNotifyExceptions': function(params) {\n    this.int32(1398240377);\n    const flags = (this.has(params.compare_sound) << 1) | (this.has(params.peer) << 0);\n    this.int32(flags);\n    this.flag(this.predicate, params.peer);\n  },\n  'account.getWallPaper': function(params) {\n    this.int32(4237155306);\n    this.predicate(params.wallpaper);\n  },\n  'account.uploadWallPaper': function(params) {\n    this.int32(3716494945);\n    this.predicate(params.file);\n    this.string(params.mime_type);\n    this.predicate(params.settings);\n  },\n  'account.saveWallPaper': function(params) {\n    this.int32(1817860919);\n    this.predicate(params.wallpaper);\n    this.Bool(params.unsave);\n    this.predicate(params.settings);\n  },\n  'account.installWallPaper': function(params) {\n    this.int32(4276967273);\n    this.predicate(params.wallpaper);\n    this.predicate(params.settings);\n  },\n  'account.resetWallPapers': function(params) {\n    this.int32(3141244932);\n  },\n  'account.getAutoDownloadSettings': function(params) {\n    this.int32(1457130303);\n  },\n  'account.saveAutoDownloadSettings': function(params) {\n    this.int32(1995661875);\n    const flags = (this.has(params.low) << 0) | (this.has(params.high) << 1);\n    this.int32(flags);\n    this.predicate(params.settings);\n  },\n  'account.uploadTheme': function(params) {\n    this.int32(473805619);\n    const flags = (this.has(params.thumb) << 0);\n    this.int32(flags);\n    this.predicate(params.file);\n    this.flag(this.predicate, params.thumb);\n    this.string(params.file_name);\n    this.string(params.mime_type);\n  },\n  'account.createTheme': function(params) {\n    this.int32(2217919007);\n    const flags = (this.has(params.document) << 2) | (this.has(params.settings) << 3);\n    this.int32(flags);\n    this.string(params.slug);\n    this.string(params.title);\n    this.flag(this.predicate, params.document);\n    this.flag(this.predicate, params.settings);\n  },\n  'account.updateTheme': function(params) {\n    this.int32(1555261397);\n    const flags = (this.has(params.slug) << 0) | (this.has(params.title) << 1) | (this.has(params.document) << 2) | (this.has(params.settings) << 3);\n    this.int32(flags);\n    this.string(params.format);\n    this.predicate(params.theme);\n    this.flag(this.string, params.slug);\n    this.flag(this.string, params.title);\n    this.flag(this.predicate, params.document);\n    this.flag(this.predicate, params.settings);\n  },\n  'account.saveTheme': function(params) {\n    this.int32(4065792108);\n    this.predicate(params.theme);\n    this.Bool(params.unsave);\n  },\n  'account.installTheme': function(params) {\n    this.int32(2061776695);\n    const flags = (this.has(params.dark) << 0) | (this.has(params.format) << 1) | (this.has(params.theme) << 1);\n    this.int32(flags);\n    this.flag(this.string, params.format);\n    this.flag(this.predicate, params.theme);\n  },\n  'account.getTheme': function(params) {\n    this.int32(2375906347);\n    this.string(params.format);\n    this.predicate(params.theme);\n    this.long(params.document_id);\n  },\n  'account.getThemes': function(params) {\n    this.int32(676939512);\n    this.string(params.format);\n    this.int(params.hash);\n  },\n  'account.setContentSettings': function(params) {\n    this.int32(3044323691);\n    const flags = (this.has(params.sensitive_enabled) << 0);\n    this.int32(flags);\n  },\n  'account.getContentSettings': function(params) {\n    this.int32(2342210990);\n  },\n  'account.getMultiWallPapers': function(params) {\n    this.int32(1705865692);\n    this.vector(this.predicate, params.wallpapers);\n  },\n  'users.getUsers': function(params) {\n    this.int32(227648840);\n    this.vector(this.predicate, params.id);\n  },\n  'users.getFullUser': function(params) {\n    this.int32(3392185777);\n    this.predicate(params.id);\n  },\n  'users.setSecureValueErrors': function(params) {\n    this.int32(2429064373);\n    this.predicate(params.id);\n    this.vector(this.predicate, params.errors);\n  },\n  'contacts.getContactIDs': function(params) {\n    this.int32(749357634);\n    this.int(params.hash);\n  },\n  'contacts.getStatuses': function(params) {\n    this.int32(3299038190);\n  },\n  'contacts.getContacts': function(params) {\n    this.int32(3223553183);\n    this.int(params.hash);\n  },\n  'contacts.importContacts': function(params) {\n    this.int32(746589157);\n    this.vector(this.predicate, params.contacts);\n  },\n  'contacts.deleteContacts': function(params) {\n    this.int32(157945344);\n    this.vector(this.predicate, params.id);\n  },\n  'contacts.deleteByPhones': function(params) {\n    this.int32(269745566);\n    this.vector(this.string, params.phones);\n  },\n  'contacts.block': function(params) {\n    this.int32(858475004);\n    this.predicate(params.id);\n  },\n  'contacts.unblock': function(params) {\n    this.int32(3846242493);\n    this.predicate(params.id);\n  },\n  'contacts.getBlocked': function(params) {\n    this.int32(4118557967);\n    this.int(params.offset);\n    this.int(params.limit);\n  },\n  'contacts.search': function(params) {\n    this.int32(301470424);\n    this.string(params.q);\n    this.int(params.limit);\n  },\n  'contacts.resolveUsername': function(params) {\n    this.int32(4181511075);\n    this.string(params.username);\n  },\n  'contacts.getTopPeers': function(params) {\n    this.int32(3566742965);\n    const flags = (this.has(params.correspondents) << 0) | (this.has(params.bots_pm) << 1) | (this.has(params.bots_inline) << 2) | (this.has(params.phone_calls) << 3) | (this.has(params.forward_users) << 4) | (this.has(params.forward_chats) << 5) | (this.has(params.groups) << 10) | (this.has(params.channels) << 15);\n    this.int32(flags);\n    this.int(params.offset);\n    this.int(params.limit);\n    this.int(params.hash);\n  },\n  'contacts.resetTopPeerRating': function(params) {\n    this.int32(451113900);\n    this.predicate(params.category);\n    this.predicate(params.peer);\n  },\n  'contacts.resetSaved': function(params) {\n    this.int32(2274703345);\n  },\n  'contacts.getSaved': function(params) {\n    this.int32(2196890527);\n  },\n  'contacts.toggleTopPeers': function(params) {\n    this.int32(2232729050);\n    this.Bool(params.enabled);\n  },\n  'contacts.addContact': function(params) {\n    this.int32(3908330448);\n    const flags = (this.has(params.add_phone_privacy_exception) << 0);\n    this.int32(flags);\n    this.predicate(params.id);\n    this.string(params.first_name);\n    this.string(params.last_name);\n    this.string(params.phone);\n  },\n  'contacts.acceptContact': function(params) {\n    this.int32(4164002319);\n    this.predicate(params.id);\n  },\n  'contacts.getLocated': function(params) {\n    this.int32(3544759364);\n    const flags = (this.has(params.background) << 1) | (this.has(params.self_expires) << 0);\n    this.int32(flags);\n    this.predicate(params.geo_point);\n    this.flag(this.int, params.self_expires);\n  },\n  'messages.getMessages': function(params) {\n    this.int32(1673946374);\n    this.vector(this.predicate, params.id);\n  },\n  'messages.getDialogs': function(params) {\n    this.int32(2699967347);\n    const flags = (this.has(params.exclude_pinned) << 0) | (this.has(params.folder_id) << 1);\n    this.int32(flags);\n    this.flag(this.int, params.folder_id);\n    this.int(params.offset_date);\n    this.int(params.offset_id);\n    this.predicate(params.offset_peer);\n    this.int(params.limit);\n    this.int(params.hash);\n  },\n  'messages.getHistory': function(params) {\n    this.int32(3703276128);\n    this.predicate(params.peer);\n    this.int(params.offset_id);\n    this.int(params.offset_date);\n    this.int(params.add_offset);\n    this.int(params.limit);\n    this.int(params.max_id);\n    this.int(params.min_id);\n    this.int(params.hash);\n  },\n  'messages.search': function(params) {\n    this.int32(2249518952);\n    const flags = (this.has(params.from_id) << 0);\n    this.int32(flags);\n    this.predicate(params.peer);\n    this.string(params.q);\n    this.flag(this.predicate, params.from_id);\n    this.predicate(params.filter);\n    this.int(params.min_date);\n    this.int(params.max_date);\n    this.int(params.offset_id);\n    this.int(params.add_offset);\n    this.int(params.limit);\n    this.int(params.max_id);\n    this.int(params.min_id);\n    this.int(params.hash);\n  },\n  'messages.readHistory': function(params) {\n    this.int32(238054714);\n    this.predicate(params.peer);\n    this.int(params.max_id);\n  },\n  'messages.deleteHistory': function(params) {\n    this.int32(469850889);\n    const flags = (this.has(params.just_clear) << 0) | (this.has(params.revoke) << 1);\n    this.int32(flags);\n    this.predicate(params.peer);\n    this.int(params.max_id);\n  },\n  'messages.deleteMessages': function(params) {\n    this.int32(3851326930);\n    const flags = (this.has(params.revoke) << 0);\n    this.int32(flags);\n    this.vector(this.int, params.id);\n  },\n  'messages.receivedMessages': function(params) {\n    this.int32(94983360);\n    this.int(params.max_id);\n  },\n  'messages.setTyping': function(params) {\n    this.int32(2743230032);\n    this.predicate(params.peer);\n    this.predicate(params.action);\n  },\n  'messages.sendMessage': function(params) {\n    this.int32(1376532592);\n    const flags = (this.has(params.no_webpage) << 1) | (this.has(params.silent) << 5) | (this.has(params.background) << 6) | (this.has(params.clear_draft) << 7) | (this.has(params.reply_to_msg_id) << 0) | (this.has(params.reply_markup) << 2) | (this.has(params.entities) << 3) | (this.has(params.schedule_date) << 10);\n    this.int32(flags);\n    this.predicate(params.peer);\n    this.flag(this.int, params.reply_to_msg_id);\n    this.string(params.message);\n    this.long(params.random_id);\n    this.flag(this.predicate, params.reply_markup);\n    this.flagVector(this.predicate, params.entities);\n    this.flag(this.int, params.schedule_date);\n  },\n  'messages.sendMedia': function(params) {\n    this.int32(881978281);\n    const flags = (this.has(params.silent) << 5) | (this.has(params.background) << 6) | (this.has(params.clear_draft) << 7) | (this.has(params.reply_to_msg_id) << 0) | (this.has(params.reply_markup) << 2) | (this.has(params.entities) << 3) | (this.has(params.schedule_date) << 10);\n    this.int32(flags);\n    this.predicate(params.peer);\n    this.flag(this.int, params.reply_to_msg_id);\n    this.predicate(params.media);\n    this.string(params.message);\n    this.long(params.random_id);\n    this.flag(this.predicate, params.reply_markup);\n    this.flagVector(this.predicate, params.entities);\n    this.flag(this.int, params.schedule_date);\n  },\n  'messages.forwardMessages': function(params) {\n    this.int32(3657360910);\n    const flags = (this.has(params.silent) << 5) | (this.has(params.background) << 6) | (this.has(params.with_my_score) << 8) | (this.has(params.grouped) << 9) | (this.has(params.schedule_date) << 10);\n    this.int32(flags);\n    this.predicate(params.from_peer);\n    this.vector(this.int, params.id);\n    this.vector(this.long, params.random_id);\n    this.predicate(params.to_peer);\n    this.flag(this.int, params.schedule_date);\n  },\n  'messages.reportSpam': function(params) {\n    this.int32(3474297563);\n    this.predicate(params.peer);\n  },\n  'messages.getPeerSettings': function(params) {\n    this.int32(913498268);\n    this.predicate(params.peer);\n  },\n  'messages.report': function(params) {\n    this.int32(3179460184);\n    this.predicate(params.peer);\n    this.vector(this.int, params.id);\n    this.predicate(params.reason);\n  },\n  'messages.getChats': function(params) {\n    this.int32(1013621127);\n    this.vector(this.int, params.id);\n  },\n  'messages.getFullChat': function(params) {\n    this.int32(998448230);\n    this.int(params.chat_id);\n  },\n  'messages.editChatTitle': function(params) {\n    this.int32(3695519829);\n    this.int(params.chat_id);\n    this.string(params.title);\n  },\n  'messages.editChatPhoto': function(params) {\n    this.int32(3394009560);\n    this.int(params.chat_id);\n    this.predicate(params.photo);\n  },\n  'messages.addChatUser': function(params) {\n    this.int32(4188056073);\n    this.int(params.chat_id);\n    this.predicate(params.user_id);\n    this.int(params.fwd_limit);\n  },\n  'messages.deleteChatUser': function(params) {\n    this.int32(3764461334);\n    this.int(params.chat_id);\n    this.predicate(params.user_id);\n  },\n  'messages.createChat': function(params) {\n    this.int32(164303470);\n    this.vector(this.predicate, params.users);\n    this.string(params.title);\n  },\n  'messages.getDhConfig': function(params) {\n    this.int32(651135312);\n    this.int(params.version);\n    this.int(params.random_length);\n  },\n  'messages.requestEncryption': function(params) {\n    this.int32(4132286275);\n    this.predicate(params.user_id);\n    this.int(params.random_id);\n    this.bytes(params.g_a);\n  },\n  'messages.acceptEncryption': function(params) {\n    this.int32(1035731989);\n    this.predicate(params.peer);\n    this.bytes(params.g_b);\n    this.long(params.key_fingerprint);\n  },\n  'messages.discardEncryption': function(params) {\n    this.int32(3990430661);\n    this.int(params.chat_id);\n  },\n  'messages.setEncryptedTyping': function(params) {\n    this.int32(2031374829);\n    this.predicate(params.peer);\n    this.Bool(params.typing);\n  },\n  'messages.readEncryptedHistory': function(params) {\n    this.int32(2135648522);\n    this.predicate(params.peer);\n    this.int(params.max_date);\n  },\n  'messages.sendEncrypted': function(params) {\n    this.int32(2843174771);\n    this.predicate(params.peer);\n    this.long(params.random_id);\n    this.bytes(params.data);\n  },\n  'messages.sendEncryptedFile': function(params) {\n    this.int32(2593135462);\n    this.predicate(params.peer);\n    this.long(params.random_id);\n    this.bytes(params.data);\n    this.predicate(params.file);\n  },\n  'messages.sendEncryptedService': function(params) {\n    this.int32(852769188);\n    this.predicate(params.peer);\n    this.long(params.random_id);\n    this.bytes(params.data);\n  },\n  'messages.receivedQueue': function(params) {\n    this.int32(1436924774);\n    this.int(params.max_qts);\n  },\n  'messages.reportEncryptedSpam': function(params) {\n    this.int32(1259113487);\n    this.predicate(params.peer);\n  },\n  'messages.readMessageContents': function(params) {\n    this.int32(916930423);\n    this.vector(this.int, params.id);\n  },\n  'messages.getStickers': function(params) {\n    this.int32(71126828);\n    this.string(params.emoticon);\n    this.int(params.hash);\n  },\n  'messages.getAllStickers': function(params) {\n    this.int32(479598769);\n    this.int(params.hash);\n  },\n  'messages.getWebPagePreview': function(params) {\n    this.int32(2338894028);\n    const flags = (this.has(params.entities) << 3);\n    this.int32(flags);\n    this.string(params.message);\n    this.flagVector(this.predicate, params.entities);\n  },\n  'messages.exportChatInvite': function(params) {\n    this.int32(234312524);\n    this.predicate(params.peer);\n  },\n  'messages.checkChatInvite': function(params) {\n    this.int32(1051570619);\n    this.string(params.hash);\n  },\n  'messages.importChatInvite': function(params) {\n    this.int32(1817183516);\n    this.string(params.hash);\n  },\n  'messages.getStickerSet': function(params) {\n    this.int32(639215886);\n    this.predicate(params.stickerset);\n  },\n  'messages.installStickerSet': function(params) {\n    this.int32(3348096096);\n    this.predicate(params.stickerset);\n    this.Bool(params.archived);\n  },\n  'messages.uninstallStickerSet': function(params) {\n    this.int32(4184757726);\n    this.predicate(params.stickerset);\n  },\n  'messages.startBot': function(params) {\n    this.int32(3873403768);\n    this.predicate(params.bot);\n    this.predicate(params.peer);\n    this.long(params.random_id);\n    this.string(params.start_param);\n  },\n  'messages.getMessagesViews': function(params) {\n    this.int32(3301483869);\n    this.predicate(params.peer);\n    this.vector(this.int, params.id);\n    this.Bool(params.increment);\n  },\n  'messages.editChatAdmin': function(params) {\n    this.int32(2850463534);\n    this.int(params.chat_id);\n    this.predicate(params.user_id);\n    this.Bool(params.is_admin);\n  },\n  'messages.migrateChat': function(params) {\n    this.int32(363051235);\n    this.int(params.chat_id);\n  },\n  'messages.searchGlobal': function(params) {\n    this.int32(3211928996);\n    const flags = (this.has(params.folder_id) << 0);\n    this.int32(flags);\n    this.flag(this.int, params.folder_id);\n    this.string(params.q);\n    this.int(params.offset_rate);\n    this.predicate(params.offset_peer);\n    this.int(params.offset_id);\n    this.int(params.limit);\n  },\n  'messages.reorderStickerSets': function(params) {\n    this.int32(2016638777);\n    const flags = (this.has(params.masks) << 0);\n    this.int32(flags);\n    this.vector(this.long, params.order);\n  },\n  'messages.getDocumentByHash': function(params) {\n    this.int32(864953444);\n    this.bytes(params.sha256);\n    this.int(params.size);\n    this.string(params.mime_type);\n  },\n  'messages.searchGifs': function(params) {\n    this.int32(3214571371);\n    this.string(params.q);\n    this.int(params.offset);\n  },\n  'messages.getSavedGifs': function(params) {\n    this.int32(2210348370);\n    this.int(params.hash);\n  },\n  'messages.saveGif': function(params) {\n    this.int32(846868683);\n    this.predicate(params.id);\n    this.Bool(params.unsave);\n  },\n  'messages.getInlineBotResults': function(params) {\n    this.int32(1364105629);\n    const flags = (this.has(params.geo_point) << 0);\n    this.int32(flags);\n    this.predicate(params.bot);\n    this.predicate(params.peer);\n    this.flag(this.predicate, params.geo_point);\n    this.string(params.query);\n    this.string(params.offset);\n  },\n  'messages.setInlineBotResults': function(params) {\n    this.int32(3948847622);\n    const flags = (this.has(params.gallery) << 0) | (this.has(params.private) << 1) | (this.has(params.next_offset) << 2) | (this.has(params.switch_pm) << 3);\n    this.int32(flags);\n    this.long(params.query_id);\n    this.vector(this.predicate, params.results);\n    this.int(params.cache_time);\n    this.flag(this.string, params.next_offset);\n    this.flag(this.predicate, params.switch_pm);\n  },\n  'messages.sendInlineBotResult': function(params) {\n    this.int32(570955184);\n    const flags = (this.has(params.silent) << 5) | (this.has(params.background) << 6) | (this.has(params.clear_draft) << 7) | (this.has(params.hide_via) << 11) | (this.has(params.reply_to_msg_id) << 0) | (this.has(params.schedule_date) << 10);\n    this.int32(flags);\n    this.predicate(params.peer);\n    this.flag(this.int, params.reply_to_msg_id);\n    this.long(params.random_id);\n    this.long(params.query_id);\n    this.string(params.id);\n    this.flag(this.int, params.schedule_date);\n  },\n  'messages.getMessageEditData': function(params) {\n    this.int32(4255550774);\n    this.predicate(params.peer);\n    this.int(params.id);\n  },\n  'messages.editMessage': function(params) {\n    this.int32(1224152952);\n    const flags = (this.has(params.no_webpage) << 1) | (this.has(params.message) << 11) | (this.has(params.media) << 14) | (this.has(params.reply_markup) << 2) | (this.has(params.entities) << 3) | (this.has(params.schedule_date) << 15);\n    this.int32(flags);\n    this.predicate(params.peer);\n    this.int(params.id);\n    this.flag(this.string, params.message);\n    this.flag(this.predicate, params.media);\n    this.flag(this.predicate, params.reply_markup);\n    this.flagVector(this.predicate, params.entities);\n    this.flag(this.int, params.schedule_date);\n  },\n  'messages.editInlineBotMessage': function(params) {\n    this.int32(2203418042);\n    const flags = (this.has(params.no_webpage) << 1) | (this.has(params.message) << 11) | (this.has(params.media) << 14) | (this.has(params.reply_markup) << 2) | (this.has(params.entities) << 3);\n    this.int32(flags);\n    this.predicate(params.id);\n    this.flag(this.string, params.message);\n    this.flag(this.predicate, params.media);\n    this.flag(this.predicate, params.reply_markup);\n    this.flagVector(this.predicate, params.entities);\n  },\n  'messages.getBotCallbackAnswer': function(params) {\n    this.int32(2164957164);\n    const flags = (this.has(params.game) << 1) | (this.has(params.data) << 0);\n    this.int32(flags);\n    this.predicate(params.peer);\n    this.int(params.msg_id);\n    this.flag(this.bytes, params.data);\n  },\n  'messages.setBotCallbackAnswer': function(params) {\n    this.int32(3582923530);\n    const flags = (this.has(params.alert) << 1) | (this.has(params.message) << 0) | (this.has(params.url) << 2);\n    this.int32(flags);\n    this.long(params.query_id);\n    this.flag(this.string, params.message);\n    this.flag(this.string, params.url);\n    this.int(params.cache_time);\n  },\n  'messages.getPeerDialogs': function(params) {\n    this.int32(3832593661);\n    this.vector(this.predicate, params.peers);\n  },\n  'messages.saveDraft': function(params) {\n    this.int32(3157909835);\n    const flags = (this.has(params.no_webpage) << 1) | (this.has(params.reply_to_msg_id) << 0) | (this.has(params.entities) << 3);\n    this.int32(flags);\n    this.flag(this.int, params.reply_to_msg_id);\n    this.predicate(params.peer);\n    this.string(params.message);\n    this.flagVector(this.predicate, params.entities);\n  },\n  'messages.getAllDrafts': function(params) {\n    this.int32(1782549861);\n  },\n  'messages.getFeaturedStickers': function(params) {\n    this.int32(766298703);\n    this.int(params.hash);\n  },\n  'messages.readFeaturedStickers': function(params) {\n    this.int32(1527873830);\n    this.vector(this.long, params.id);\n  },\n  'messages.getRecentStickers': function(params) {\n    this.int32(1587647177);\n    const flags = (this.has(params.attached) << 0);\n    this.int32(flags);\n    this.int(params.hash);\n  },\n  'messages.saveRecentSticker': function(params) {\n    this.int32(958863608);\n    const flags = (this.has(params.attached) << 0);\n    this.int32(flags);\n    this.predicate(params.id);\n    this.Bool(params.unsave);\n  },\n  'messages.clearRecentStickers': function(params) {\n    this.int32(2308530221);\n    const flags = (this.has(params.attached) << 0);\n    this.int32(flags);\n  },\n  'messages.getArchivedStickers': function(params) {\n    this.int32(1475442322);\n    const flags = (this.has(params.masks) << 0);\n    this.int32(flags);\n    this.long(params.offset_id);\n    this.int(params.limit);\n  },\n  'messages.getMaskStickers': function(params) {\n    this.int32(1706608543);\n    this.int(params.hash);\n  },\n  'messages.getAttachedStickers': function(params) {\n    this.int32(3428542412);\n    this.predicate(params.media);\n  },\n  'messages.setGameScore': function(params) {\n    this.int32(2398678208);\n    const flags = (this.has(params.edit_message) << 0) | (this.has(params.force) << 1);\n    this.int32(flags);\n    this.predicate(params.peer);\n    this.int(params.id);\n    this.predicate(params.user_id);\n    this.int(params.score);\n  },\n  'messages.setInlineGameScore': function(params) {\n    this.int32(363700068);\n    const flags = (this.has(params.edit_message) << 0) | (this.has(params.force) << 1);\n    this.int32(flags);\n    this.predicate(params.id);\n    this.predicate(params.user_id);\n    this.int(params.score);\n  },\n  'messages.getGameHighScores': function(params) {\n    this.int32(3894568093);\n    this.predicate(params.peer);\n    this.int(params.id);\n    this.predicate(params.user_id);\n  },\n  'messages.getInlineGameHighScores': function(params) {\n    this.int32(258170395);\n    this.predicate(params.id);\n    this.predicate(params.user_id);\n  },\n  'messages.getCommonChats': function(params) {\n    this.int32(218777796);\n    this.predicate(params.user_id);\n    this.int(params.max_id);\n    this.int(params.limit);\n  },\n  'messages.getAllChats': function(params) {\n    this.int32(3953659888);\n    this.vector(this.int, params.except_ids);\n  },\n  'messages.getWebPage': function(params) {\n    this.int32(852135825);\n    this.string(params.url);\n    this.int(params.hash);\n  },\n  'messages.toggleDialogPin': function(params) {\n    this.int32(2805064279);\n    const flags = (this.has(params.pinned) << 0);\n    this.int32(flags);\n    this.predicate(params.peer);\n  },\n  'messages.reorderPinnedDialogs': function(params) {\n    this.int32(991616823);\n    const flags = (this.has(params.force) << 0);\n    this.int32(flags);\n    this.int(params.folder_id);\n    this.vector(this.predicate, params.order);\n  },\n  'messages.getPinnedDialogs': function(params) {\n    this.int32(3602468338);\n    this.int(params.folder_id);\n  },\n  'messages.setBotShippingResults': function(params) {\n    this.int32(3858133754);\n    const flags = (this.has(params.error) << 0) | (this.has(params.shipping_options) << 1);\n    this.int32(flags);\n    this.long(params.query_id);\n    this.flag(this.string, params.error);\n    this.flagVector(this.predicate, params.shipping_options);\n  },\n  'messages.setBotPrecheckoutResults': function(params) {\n    this.int32(163765653);\n    const flags = (this.has(params.success) << 1) | (this.has(params.error) << 0);\n    this.int32(flags);\n    this.long(params.query_id);\n    this.flag(this.string, params.error);\n  },\n  'messages.uploadMedia': function(params) {\n    this.int32(1369162417);\n    this.predicate(params.peer);\n    this.predicate(params.media);\n  },\n  'messages.sendScreenshotNotification': function(params) {\n    this.int32(3380473888);\n    this.predicate(params.peer);\n    this.int(params.reply_to_msg_id);\n    this.long(params.random_id);\n  },\n  'messages.getFavedStickers': function(params) {\n    this.int32(567151374);\n    this.int(params.hash);\n  },\n  'messages.faveSticker': function(params) {\n    this.int32(3120547163);\n    this.predicate(params.id);\n    this.Bool(params.unfave);\n  },\n  'messages.getUnreadMentions': function(params) {\n    this.int32(1180140658);\n    this.predicate(params.peer);\n    this.int(params.offset_id);\n    this.int(params.add_offset);\n    this.int(params.limit);\n    this.int(params.max_id);\n    this.int(params.min_id);\n  },\n  'messages.readMentions': function(params) {\n    this.int32(251759059);\n    this.predicate(params.peer);\n  },\n  'messages.getRecentLocations': function(params) {\n    this.int32(3150207753);\n    this.predicate(params.peer);\n    this.int(params.limit);\n    this.int(params.hash);\n  },\n  'messages.sendMultiMedia': function(params) {\n    this.int32(3422621899);\n    const flags = (this.has(params.silent) << 5) | (this.has(params.background) << 6) | (this.has(params.clear_draft) << 7) | (this.has(params.reply_to_msg_id) << 0) | (this.has(params.schedule_date) << 10);\n    this.int32(flags);\n    this.predicate(params.peer);\n    this.flag(this.int, params.reply_to_msg_id);\n    this.vector(this.predicate, params.multi_media);\n    this.flag(this.int, params.schedule_date);\n  },\n  'messages.uploadEncryptedFile': function(params) {\n    this.int32(1347929239);\n    this.predicate(params.peer);\n    this.predicate(params.file);\n  },\n  'messages.searchStickerSets': function(params) {\n    this.int32(3266826379);\n    const flags = (this.has(params.exclude_featured) << 0);\n    this.int32(flags);\n    this.string(params.q);\n    this.int(params.hash);\n  },\n  'messages.getSplitRanges': function(params) {\n    this.int32(486505992);\n  },\n  'messages.markDialogUnread': function(params) {\n    this.int32(3263617423);\n    const flags = (this.has(params.unread) << 0);\n    this.int32(flags);\n    this.predicate(params.peer);\n  },\n  'messages.getDialogUnreadMarks': function(params) {\n    this.int32(585256482);\n  },\n  'messages.clearAllDrafts': function(params) {\n    this.int32(2119757468);\n  },\n  'messages.updatePinnedMessage': function(params) {\n    this.int32(3534419948);\n    const flags = (this.has(params.silent) << 0);\n    this.int32(flags);\n    this.predicate(params.peer);\n    this.int(params.id);\n  },\n  'messages.sendVote': function(params) {\n    this.int32(283795844);\n    this.predicate(params.peer);\n    this.int(params.msg_id);\n    this.vector(this.bytes, params.options);\n  },\n  'messages.getPollResults': function(params) {\n    this.int32(1941660731);\n    this.predicate(params.peer);\n    this.int(params.msg_id);\n  },\n  'messages.getOnlines': function(params) {\n    this.int32(1848369232);\n    this.predicate(params.peer);\n  },\n  'messages.getStatsURL': function(params) {\n    this.int32(2167155430);\n    const flags = (this.has(params.dark) << 0);\n    this.int32(flags);\n    this.predicate(params.peer);\n    this.string(params.params);\n  },\n  'messages.editChatAbout': function(params) {\n    this.int32(3740665751);\n    this.predicate(params.peer);\n    this.string(params.about);\n  },\n  'messages.editChatDefaultBannedRights': function(params) {\n    this.int32(2777049921);\n    this.predicate(params.peer);\n    this.predicate(params.banned_rights);\n  },\n  'messages.getEmojiKeywords': function(params) {\n    this.int32(899735650);\n    this.string(params.lang_code);\n  },\n  'messages.getEmojiKeywordsDifference': function(params) {\n    this.int32(352892591);\n    this.string(params.lang_code);\n    this.int(params.from_version);\n  },\n  'messages.getEmojiKeywordsLanguages': function(params) {\n    this.int32(1318675378);\n    this.vector(this.string, params.lang_codes);\n  },\n  'messages.getEmojiURL': function(params) {\n    this.int32(3585149990);\n    this.string(params.lang_code);\n  },\n  'messages.getSearchCounters': function(params) {\n    this.int32(1932455680);\n    this.predicate(params.peer);\n    this.vector(this.predicate, params.filters);\n  },\n  'messages.requestUrlAuth': function(params) {\n    this.int32(3812578835);\n    this.predicate(params.peer);\n    this.int(params.msg_id);\n    this.int(params.button_id);\n  },\n  'messages.acceptUrlAuth': function(params) {\n    this.int32(4146719384);\n    const flags = (this.has(params.write_allowed) << 0);\n    this.int32(flags);\n    this.predicate(params.peer);\n    this.int(params.msg_id);\n    this.int(params.button_id);\n  },\n  'messages.hidePeerSettingsBar': function(params) {\n    this.int32(1336717624);\n    this.predicate(params.peer);\n  },\n  'messages.getScheduledHistory': function(params) {\n    this.int32(3804391515);\n    this.predicate(params.peer);\n    this.int(params.hash);\n  },\n  'messages.getScheduledMessages': function(params) {\n    this.int32(3183150180);\n    this.predicate(params.peer);\n    this.vector(this.int, params.id);\n  },\n  'messages.sendScheduledMessages': function(params) {\n    this.int32(3174597898);\n    this.predicate(params.peer);\n    this.vector(this.int, params.id);\n  },\n  'messages.deleteScheduledMessages': function(params) {\n    this.int32(1504586518);\n    this.predicate(params.peer);\n    this.vector(this.int, params.id);\n  },\n  'messages.getPollVotes': function(params) {\n    this.int32(3094231054);\n    const flags = (this.has(params.option) << 0) | (this.has(params.offset) << 1);\n    this.int32(flags);\n    this.predicate(params.peer);\n    this.int(params.id);\n    this.flag(this.bytes, params.option);\n    this.flag(this.string, params.offset);\n    this.int(params.limit);\n  },\n  'messages.toggleStickerSets': function(params) {\n    this.int32(3037016042);\n    const flags = (this.has(params.uninstall) << 0) | (this.has(params.archive) << 1) | (this.has(params.unarchive) << 2);\n    this.int32(flags);\n    this.vector(this.predicate, params.stickersets);\n  },\n  'messages.getDialogFilters': function(params) {\n    this.int32(4053719405);\n  },\n  'messages.getSuggestedDialogFilters': function(params) {\n    this.int32(2728186924);\n  },\n  'messages.updateDialogFilter': function(params) {\n    this.int32(450142282);\n    const flags = (this.has(params.filter) << 0);\n    this.int32(flags);\n    this.int(params.id);\n    this.flag(this.predicate, params.filter);\n  },\n  'messages.updateDialogFiltersOrder': function(params) {\n    this.int32(3311649252);\n    this.vector(this.int, params.order);\n  },\n  'messages.getOldFeaturedStickers': function(params) {\n    this.int32(1608974939);\n    this.int(params.offset);\n    this.int(params.limit);\n    this.int(params.hash);\n  },\n  'updates.getState': function(params) {\n    this.int32(3990128682);\n  },\n  'updates.getDifference': function(params) {\n    this.int32(630429265);\n    const flags = (this.has(params.pts_total_limit) << 0);\n    this.int32(flags);\n    this.int(params.pts);\n    this.flag(this.int, params.pts_total_limit);\n    this.int(params.date);\n    this.int(params.qts);\n  },\n  'updates.getChannelDifference': function(params) {\n    this.int32(51854712);\n    const flags = (this.has(params.force) << 0);\n    this.int32(flags);\n    this.predicate(params.channel);\n    this.predicate(params.filter);\n    this.int(params.pts);\n    this.int(params.limit);\n  },\n  'photos.updateProfilePhoto': function(params) {\n    this.int32(4038807890);\n    this.predicate(params.id);\n  },\n  'photos.uploadProfilePhoto': function(params) {\n    this.int32(1328726168);\n    this.predicate(params.file);\n  },\n  'photos.deletePhotos': function(params) {\n    this.int32(2278522671);\n    this.vector(this.predicate, params.id);\n  },\n  'photos.getUserPhotos': function(params) {\n    this.int32(2446144168);\n    this.predicate(params.user_id);\n    this.int(params.offset);\n    this.long(params.max_id);\n    this.int(params.limit);\n  },\n  'upload.saveFilePart': function(params) {\n    this.int32(3003426337);\n    this.long(params.file_id);\n    this.int(params.file_part);\n    this.bytes(params.bytes);\n  },\n  'upload.getFile': function(params) {\n    this.int32(2975505148);\n    const flags = (this.has(params.precise) << 0) | (this.has(params.cdn_supported) << 1);\n    this.int32(flags);\n    this.predicate(params.location);\n    this.int(params.offset);\n    this.int(params.limit);\n  },\n  'upload.saveBigFilePart': function(params) {\n    this.int32(3732629309);\n    this.long(params.file_id);\n    this.int(params.file_part);\n    this.int(params.file_total_parts);\n    this.bytes(params.bytes);\n  },\n  'upload.getWebFile': function(params) {\n    this.int32(619086221);\n    this.predicate(params.location);\n    this.int(params.offset);\n    this.int(params.limit);\n  },\n  'upload.getCdnFile': function(params) {\n    this.int32(536919235);\n    this.bytes(params.file_token);\n    this.int(params.offset);\n    this.int(params.limit);\n  },\n  'upload.reuploadCdnFile': function(params) {\n    this.int32(2603046056);\n    this.bytes(params.file_token);\n    this.bytes(params.request_token);\n  },\n  'upload.getCdnFileHashes': function(params) {\n    this.int32(1302676017);\n    this.bytes(params.file_token);\n    this.int(params.offset);\n  },\n  'upload.getFileHashes': function(params) {\n    this.int32(3338819889);\n    this.predicate(params.location);\n    this.int(params.offset);\n  },\n  'help.getConfig': function(params) {\n    this.int32(3304659051);\n  },\n  'help.getNearestDc': function(params) {\n    this.int32(531836966);\n  },\n  'help.getAppUpdate': function(params) {\n    this.int32(1378703997);\n    this.string(params.source);\n  },\n  'help.getInviteText': function(params) {\n    this.int32(1295590211);\n  },\n  'help.getSupport': function(params) {\n    this.int32(2631862477);\n  },\n  'help.getAppChangelog': function(params) {\n    this.int32(2417028975);\n    this.string(params.prev_app_version);\n  },\n  'help.setBotUpdatesStatus': function(params) {\n    this.int32(3961704397);\n    this.int(params.pending_updates_count);\n    this.string(params.message);\n  },\n  'help.getCdnConfig': function(params) {\n    this.int32(1375900482);\n  },\n  'help.getRecentMeUrls': function(params) {\n    this.int32(1036054804);\n    this.string(params.referer);\n  },\n  'help.getTermsOfServiceUpdate': function(params) {\n    this.int32(749019089);\n  },\n  'help.acceptTermsOfService': function(params) {\n    this.int32(4000511898);\n    this.predicate(params.id);\n  },\n  'help.getDeepLinkInfo': function(params) {\n    this.int32(1072547679);\n    this.string(params.path);\n  },\n  'help.getAppConfig': function(params) {\n    this.int32(2559656208);\n  },\n  'help.saveAppLog': function(params) {\n    this.int32(1862465352);\n    this.vector(this.predicate, params.events);\n  },\n  'help.getPassportConfig': function(params) {\n    this.int32(3328290056);\n    this.int(params.hash);\n  },\n  'help.getSupportName': function(params) {\n    this.int32(3546343212);\n  },\n  'help.getUserInfo': function(params) {\n    this.int32(59377875);\n    this.predicate(params.user_id);\n  },\n  'help.editUserInfo': function(params) {\n    this.int32(1723407216);\n    this.predicate(params.user_id);\n    this.string(params.message);\n    this.vector(this.predicate, params.entities);\n  },\n  'help.getPromoData': function(params) {\n    this.int32(3231151137);\n  },\n  'help.hidePromoData': function(params) {\n    this.int32(505748629);\n    this.predicate(params.peer);\n  },\n  'channels.readHistory': function(params) {\n    this.int32(3423619383);\n    this.predicate(params.channel);\n    this.int(params.max_id);\n  },\n  'channels.deleteMessages': function(params) {\n    this.int32(2227305806);\n    this.predicate(params.channel);\n    this.vector(this.int, params.id);\n  },\n  'channels.deleteUserHistory': function(params) {\n    this.int32(3507345179);\n    this.predicate(params.channel);\n    this.predicate(params.user_id);\n  },\n  'channels.reportSpam': function(params) {\n    this.int32(4261967888);\n    this.predicate(params.channel);\n    this.predicate(params.user_id);\n    this.vector(this.int, params.id);\n  },\n  'channels.getMessages': function(params) {\n    this.int32(2911672867);\n    this.predicate(params.channel);\n    this.vector(this.predicate, params.id);\n  },\n  'channels.getParticipants': function(params) {\n    this.int32(306054633);\n    this.predicate(params.channel);\n    this.predicate(params.filter);\n    this.int(params.offset);\n    this.int(params.limit);\n    this.int(params.hash);\n  },\n  'channels.getParticipant': function(params) {\n    this.int32(1416484774);\n    this.predicate(params.channel);\n    this.predicate(params.user_id);\n  },\n  'channels.getChannels': function(params) {\n    this.int32(176122811);\n    this.vector(this.predicate, params.id);\n  },\n  'channels.getFullChannel': function(params) {\n    this.int32(141781513);\n    this.predicate(params.channel);\n  },\n  'channels.createChannel': function(params) {\n    this.int32(1029681423);\n    const flags = (this.has(params.broadcast) << 0) | (this.has(params.megagroup) << 1) | (this.has(params.geo_point) << 2) | (this.has(params.address) << 2);\n    this.int32(flags);\n    this.string(params.title);\n    this.string(params.about);\n    this.flag(this.predicate, params.geo_point);\n    this.flag(this.string, params.address);\n  },\n  'channels.editAdmin': function(params) {\n    this.int32(3543959810);\n    this.predicate(params.channel);\n    this.predicate(params.user_id);\n    this.predicate(params.admin_rights);\n    this.string(params.rank);\n  },\n  'channels.editTitle': function(params) {\n    this.int32(1450044624);\n    this.predicate(params.channel);\n    this.string(params.title);\n  },\n  'channels.editPhoto': function(params) {\n    this.int32(4046346185);\n    this.predicate(params.channel);\n    this.predicate(params.photo);\n  },\n  'channels.checkUsername': function(params) {\n    this.int32(283557164);\n    this.predicate(params.channel);\n    this.string(params.username);\n  },\n  'channels.updateUsername': function(params) {\n    this.int32(890549214);\n    this.predicate(params.channel);\n    this.string(params.username);\n  },\n  'channels.joinChannel': function(params) {\n    this.int32(615851205);\n    this.predicate(params.channel);\n  },\n  'channels.leaveChannel': function(params) {\n    this.int32(4164332181);\n    this.predicate(params.channel);\n  },\n  'channels.inviteToChannel': function(params) {\n    this.int32(429865580);\n    this.predicate(params.channel);\n    this.vector(this.predicate, params.users);\n  },\n  'channels.deleteChannel': function(params) {\n    this.int32(3222347747);\n    this.predicate(params.channel);\n  },\n  'channels.exportMessageLink': function(params) {\n    this.int32(3468128611);\n    this.predicate(params.channel);\n    this.int(params.id);\n    this.Bool(params.grouped);\n  },\n  'channels.toggleSignatures': function(params) {\n    this.int32(527021574);\n    this.predicate(params.channel);\n    this.Bool(params.enabled);\n  },\n  'channels.getAdminedPublicChannels': function(params) {\n    this.int32(4172297903);\n    const flags = (this.has(params.by_location) << 0) | (this.has(params.check_limit) << 1);\n    this.int32(flags);\n  },\n  'channels.editBanned': function(params) {\n    this.int32(1920559378);\n    this.predicate(params.channel);\n    this.predicate(params.user_id);\n    this.predicate(params.banned_rights);\n  },\n  'channels.getAdminLog': function(params) {\n    this.int32(870184064);\n    const flags = (this.has(params.events_filter) << 0) | (this.has(params.admins) << 1);\n    this.int32(flags);\n    this.predicate(params.channel);\n    this.string(params.q);\n    this.flag(this.predicate, params.events_filter);\n    this.flagVector(this.predicate, params.admins);\n    this.long(params.max_id);\n    this.long(params.min_id);\n    this.int(params.limit);\n  },\n  'channels.setStickers': function(params) {\n    this.int32(3935085817);\n    this.predicate(params.channel);\n    this.predicate(params.stickerset);\n  },\n  'channels.readMessageContents': function(params) {\n    this.int32(3937786936);\n    this.predicate(params.channel);\n    this.vector(this.int, params.id);\n  },\n  'channels.deleteHistory': function(params) {\n    this.int32(2939592002);\n    this.predicate(params.channel);\n    this.int(params.max_id);\n  },\n  'channels.togglePreHistoryHidden': function(params) {\n    this.int32(3938171212);\n    this.predicate(params.channel);\n    this.Bool(params.enabled);\n  },\n  'channels.getLeftChannels': function(params) {\n    this.int32(2202135744);\n    this.int(params.offset);\n  },\n  'channels.getGroupsForDiscussion': function(params) {\n    this.int32(4124758904);\n  },\n  'channels.setDiscussionGroup': function(params) {\n    this.int32(1079520178);\n    this.predicate(params.broadcast);\n    this.predicate(params.group);\n  },\n  'channels.editCreator': function(params) {\n    this.int32(2402864415);\n    this.predicate(params.channel);\n    this.predicate(params.user_id);\n    this.predicate(params.password);\n  },\n  'channels.editLocation': function(params) {\n    this.int32(1491484525);\n    this.predicate(params.channel);\n    this.predicate(params.geo_point);\n    this.string(params.address);\n  },\n  'channels.toggleSlowMode': function(params) {\n    this.int32(3990134512);\n    this.predicate(params.channel);\n    this.int(params.seconds);\n  },\n  'channels.getInactiveChannels': function(params) {\n    this.int32(300429806);\n  },\n  'bots.sendCustomRequest': function(params) {\n    this.int32(2854709741);\n    this.string(params.custom_method);\n    this.predicate(params.params);\n  },\n  'bots.answerWebhookJSONQuery': function(params) {\n    this.int32(3860938573);\n    this.long(params.query_id);\n    this.predicate(params.data);\n  },\n  'bots.setBotCommands': function(params) {\n    this.int32(2153596662);\n    this.vector(this.predicate, params.commands);\n  },\n  'payments.getPaymentForm': function(params) {\n    this.int32(2582681413);\n    this.int(params.msg_id);\n  },\n  'payments.getPaymentReceipt': function(params) {\n    this.int32(2693966208);\n    this.int(params.msg_id);\n  },\n  'payments.validateRequestedInfo': function(params) {\n    this.int32(1997180532);\n    const flags = (this.has(params.save) << 0);\n    this.int32(flags);\n    this.int(params.msg_id);\n    this.predicate(params.info);\n  },\n  'payments.sendPaymentForm': function(params) {\n    this.int32(730364339);\n    const flags = (this.has(params.requested_info_id) << 0) | (this.has(params.shipping_option_id) << 1);\n    this.int32(flags);\n    this.int(params.msg_id);\n    this.flag(this.string, params.requested_info_id);\n    this.flag(this.string, params.shipping_option_id);\n    this.predicate(params.credentials);\n  },\n  'payments.getSavedInfo': function(params) {\n    this.int32(578650699);\n  },\n  'payments.clearSavedInfo': function(params) {\n    this.int32(3627905217);\n    const flags = (this.has(params.credentials) << 0) | (this.has(params.info) << 1);\n    this.int32(flags);\n  },\n  'payments.getBankCardData': function(params) {\n    this.int32(779736953);\n    this.string(params.number);\n  },\n  'stickers.createStickerSet': function(params) {\n    this.int32(4043532160);\n    const flags = (this.has(params.masks) << 0) | (this.has(params.animated) << 1) | (this.has(params.thumb) << 2);\n    this.int32(flags);\n    this.predicate(params.user_id);\n    this.string(params.title);\n    this.string(params.short_name);\n    this.flag(this.predicate, params.thumb);\n    this.vector(this.predicate, params.stickers);\n  },\n  'stickers.removeStickerFromSet': function(params) {\n    this.int32(4151709521);\n    this.predicate(params.sticker);\n  },\n  'stickers.changeStickerPosition': function(params) {\n    this.int32(4290172106);\n    this.predicate(params.sticker);\n    this.int(params.position);\n  },\n  'stickers.addStickerToSet': function(params) {\n    this.int32(2253651646);\n    this.predicate(params.stickerset);\n    this.predicate(params.sticker);\n  },\n  'stickers.setStickerSetThumb': function(params) {\n    this.int32(2587250224);\n    this.predicate(params.stickerset);\n    this.predicate(params.thumb);\n  },\n  'phone.getCallConfig': function(params) {\n    this.int32(1430593449);\n  },\n  'phone.requestCall': function(params) {\n    this.int32(1124046573);\n    const flags = (this.has(params.video) << 0);\n    this.int32(flags);\n    this.predicate(params.user_id);\n    this.int(params.random_id);\n    this.bytes(params.g_a_hash);\n    this.predicate(params.protocol);\n  },\n  'phone.acceptCall': function(params) {\n    this.int32(1003664544);\n    this.predicate(params.peer);\n    this.bytes(params.g_b);\n    this.predicate(params.protocol);\n  },\n  'phone.confirmCall': function(params) {\n    this.int32(788404002);\n    this.predicate(params.peer);\n    this.bytes(params.g_a);\n    this.long(params.key_fingerprint);\n    this.predicate(params.protocol);\n  },\n  'phone.receivedCall': function(params) {\n    this.int32(399855457);\n    this.predicate(params.peer);\n  },\n  'phone.discardCall': function(params) {\n    this.int32(2999697856);\n    const flags = (this.has(params.video) << 0);\n    this.int32(flags);\n    this.predicate(params.peer);\n    this.int(params.duration);\n    this.predicate(params.reason);\n    this.long(params.connection_id);\n  },\n  'phone.setCallRating': function(params) {\n    this.int32(1508562471);\n    const flags = (this.has(params.user_initiative) << 0);\n    this.int32(flags);\n    this.predicate(params.peer);\n    this.int(params.rating);\n    this.string(params.comment);\n  },\n  'phone.saveCallDebug': function(params) {\n    this.int32(662363518);\n    this.predicate(params.peer);\n    this.predicate(params.debug);\n  },\n  'langpack.getLangPack': function(params) {\n    this.int32(4075959050);\n    this.string(params.lang_pack);\n    this.string(params.lang_code);\n  },\n  'langpack.getStrings': function(params) {\n    this.int32(4025104387);\n    this.string(params.lang_pack);\n    this.string(params.lang_code);\n    this.vector(this.string, params.keys);\n  },\n  'langpack.getDifference': function(params) {\n    this.int32(3449309861);\n    this.string(params.lang_pack);\n    this.string(params.lang_code);\n    this.int(params.from_version);\n  },\n  'langpack.getLanguages': function(params) {\n    this.int32(1120311183);\n    this.string(params.lang_pack);\n  },\n  'langpack.getLanguage': function(params) {\n    this.int32(1784243458);\n    this.string(params.lang_pack);\n    this.string(params.lang_code);\n  },\n  'folders.editPeerFolders': function(params) {\n    this.int32(1749536939);\n    this.vector(this.predicate, params.folder_peers);\n  },\n  'folders.deleteFolder': function(params) {\n    this.int32(472471681);\n    this.int(params.folder_id);\n  },\n  'stats.getBroadcastStats': function(params) {\n    this.int32(2873246746);\n    const flags = (this.has(params.dark) << 0);\n    this.int32(flags);\n    this.predicate(params.channel);\n  },\n  'stats.loadAsyncGraph': function(params) {\n    this.int32(1646092192);\n    const flags = (this.has(params.x) << 0);\n    this.int32(flags);\n    this.string(params.token);\n    this.flag(this.long, params.x);\n  },\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (builderMap);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@mtproto/core/src/tl/builder/index.js\n");

/***/ }),

/***/ "./node_modules/@mtproto/core/src/tl/deserializer/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@mtproto/core/src/tl/deserializer/index.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var pako_lib_inflate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pako/lib/inflate */ \"./node_modules/pako/lib/inflate.js\");\n/* harmony import */ var pako_lib_inflate__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pako_lib_inflate__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _parser_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/index.js */ \"./node_modules/@mtproto/core/src/tl/parser/index.js\");\n/* harmony import */ var _utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/common/index.js */ \"./node_modules/@mtproto/core/src/utils/common/index.js\");\n\n\n\n\nclass Deserializer {\n  constructor(buffer) {\n    this.buffer = buffer;\n    this.byteView = new Uint8Array(this.buffer);\n    this.dataView = new DataView(\n      this.buffer,\n      this.byteView.byteOffset,\n      this.byteView.byteLength\n    );\n\n    this.offset = 0;\n  }\n\n  uint32() {\n    const value = this.dataView.getUint32(this.offset, true);\n    this.offset += 4;\n    return value;\n  }\n\n  int32() {\n    const value = this.dataView.getInt32(this.offset, true);\n    this.offset += 4;\n    return value;\n  }\n\n  long() {\n    const high = this.uint32();\n    const low = this.uint32();\n\n    const result = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"intsToLong\"])(low, high);\n\n    return result;\n  }\n\n  int128() {\n    return this.byteView.slice(this.offset, (this.offset += 16));\n  }\n\n  int256() {\n    return this.byteView.slice(this.offset, (this.offset += 32));\n  }\n\n  double() {\n    const value = this.dataView.getFloat64(this.offset, true);\n    this.offset += 8;\n    return value;\n  }\n\n  string() {\n    const decoder = new TextDecoder();\n\n    return decoder.decode(this.bytes());\n  }\n\n  bytes() {\n    let length = this.byteView[this.offset++];\n    if (length === 254) {\n      length =\n        this.byteView[this.offset++] |\n        (this.byteView[this.offset++] << 8) |\n        (this.byteView[this.offset++] << 16);\n    }\n    const bytes = this.byteView.slice(this.offset, (this.offset += length));\n\n    while (this.offset % 4 !== 0) {\n      this.offset++;\n    }\n\n    return bytes;\n  }\n\n  int() {\n    return this.int32();\n  }\n\n  vector(fn, bare = false) {\n    if (!bare) {\n      this.int32();\n    }\n\n    const length = this.int32();\n    const result = [];\n\n    for (let i = 0; i < length; i++) {\n      result.push(fn.call(this));\n    }\n\n    return result;\n  }\n\n  gzip() {\n    const deserializer = new Deserializer(Object(pako_lib_inflate__WEBPACK_IMPORTED_MODULE_0__[\"inflate\"])(this.bytes()).buffer);\n\n    return deserializer.predicate();\n  }\n\n  mt_message() {\n    const fn = _parser_index_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(1538843921);\n\n    return fn.call(this);\n  }\n\n  predicate() {\n    const id = this.int32() >>> 0;\n    const fn = _parser_index_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(id);\n\n    if (!fn) {\n      console.log('Not found predicate with id:', id);\n\n      return;\n    }\n\n    return fn.call(this);\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Deserializer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvdGwvZGVzZXJpYWxpemVyL2luZGV4LmpzPzVjNTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUEyQztBQUNBO0FBQ2M7O0FBRXpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CLHlFQUFVOztBQUU3QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG1CQUFtQixZQUFZO0FBQy9CO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLDBDQUEwQyxnRUFBTzs7QUFFakQ7QUFDQTs7QUFFQTtBQUNBLGVBQWUsd0RBQVM7O0FBRXhCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsd0RBQVM7O0FBRXhCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWUsMkVBQVksRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AbXRwcm90by9jb3JlL3NyYy90bC9kZXNlcmlhbGl6ZXIvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmZsYXRlIH0gZnJvbSAncGFrby9saWIvaW5mbGF0ZSc7XG5pbXBvcnQgcGFyc2VyTWFwIGZyb20gJy4uL3BhcnNlci9pbmRleC5qcyc7XG5pbXBvcnQgeyBpbnRzVG9Mb25nIH0gZnJvbSAnLi4vLi4vdXRpbHMvY29tbW9uL2luZGV4LmpzJztcblxuY2xhc3MgRGVzZXJpYWxpemVyIHtcbiAgY29uc3RydWN0b3IoYnVmZmVyKSB7XG4gICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgdGhpcy5ieXRlVmlldyA9IG5ldyBVaW50OEFycmF5KHRoaXMuYnVmZmVyKTtcbiAgICB0aGlzLmRhdGFWaWV3ID0gbmV3IERhdGFWaWV3KFxuICAgICAgdGhpcy5idWZmZXIsXG4gICAgICB0aGlzLmJ5dGVWaWV3LmJ5dGVPZmZzZXQsXG4gICAgICB0aGlzLmJ5dGVWaWV3LmJ5dGVMZW5ndGhcbiAgICApO1xuXG4gICAgdGhpcy5vZmZzZXQgPSAwO1xuICB9XG5cbiAgdWludDMyKCkge1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5kYXRhVmlldy5nZXRVaW50MzIodGhpcy5vZmZzZXQsIHRydWUpO1xuICAgIHRoaXMub2Zmc2V0ICs9IDQ7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgaW50MzIoKSB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLmRhdGFWaWV3LmdldEludDMyKHRoaXMub2Zmc2V0LCB0cnVlKTtcbiAgICB0aGlzLm9mZnNldCArPSA0O1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGxvbmcoKSB7XG4gICAgY29uc3QgaGlnaCA9IHRoaXMudWludDMyKCk7XG4gICAgY29uc3QgbG93ID0gdGhpcy51aW50MzIoKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGludHNUb0xvbmcobG93LCBoaWdoKTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpbnQxMjgoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnl0ZVZpZXcuc2xpY2UodGhpcy5vZmZzZXQsICh0aGlzLm9mZnNldCArPSAxNikpO1xuICB9XG5cbiAgaW50MjU2KCkge1xuICAgIHJldHVybiB0aGlzLmJ5dGVWaWV3LnNsaWNlKHRoaXMub2Zmc2V0LCAodGhpcy5vZmZzZXQgKz0gMzIpKTtcbiAgfVxuXG4gIGRvdWJsZSgpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZGF0YVZpZXcuZ2V0RmxvYXQ2NCh0aGlzLm9mZnNldCwgdHJ1ZSk7XG4gICAgdGhpcy5vZmZzZXQgKz0gODtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBzdHJpbmcoKSB7XG4gICAgY29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xuXG4gICAgcmV0dXJuIGRlY29kZXIuZGVjb2RlKHRoaXMuYnl0ZXMoKSk7XG4gIH1cblxuICBieXRlcygpIHtcbiAgICBsZXQgbGVuZ3RoID0gdGhpcy5ieXRlVmlld1t0aGlzLm9mZnNldCsrXTtcbiAgICBpZiAobGVuZ3RoID09PSAyNTQpIHtcbiAgICAgIGxlbmd0aCA9XG4gICAgICAgIHRoaXMuYnl0ZVZpZXdbdGhpcy5vZmZzZXQrK10gfFxuICAgICAgICAodGhpcy5ieXRlVmlld1t0aGlzLm9mZnNldCsrXSA8PCA4KSB8XG4gICAgICAgICh0aGlzLmJ5dGVWaWV3W3RoaXMub2Zmc2V0KytdIDw8IDE2KTtcbiAgICB9XG4gICAgY29uc3QgYnl0ZXMgPSB0aGlzLmJ5dGVWaWV3LnNsaWNlKHRoaXMub2Zmc2V0LCAodGhpcy5vZmZzZXQgKz0gbGVuZ3RoKSk7XG5cbiAgICB3aGlsZSAodGhpcy5vZmZzZXQgJSA0ICE9PSAwKSB7XG4gICAgICB0aGlzLm9mZnNldCsrO1xuICAgIH1cblxuICAgIHJldHVybiBieXRlcztcbiAgfVxuXG4gIGludCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnQzMigpO1xuICB9XG5cbiAgdmVjdG9yKGZuLCBiYXJlID0gZmFsc2UpIHtcbiAgICBpZiAoIWJhcmUpIHtcbiAgICAgIHRoaXMuaW50MzIoKTtcbiAgICB9XG5cbiAgICBjb25zdCBsZW5ndGggPSB0aGlzLmludDMyKCk7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHQucHVzaChmbi5jYWxsKHRoaXMpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZ3ppcCgpIHtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZXIgPSBuZXcgRGVzZXJpYWxpemVyKGluZmxhdGUodGhpcy5ieXRlcygpKS5idWZmZXIpO1xuXG4gICAgcmV0dXJuIGRlc2VyaWFsaXplci5wcmVkaWNhdGUoKTtcbiAgfVxuXG4gIG10X21lc3NhZ2UoKSB7XG4gICAgY29uc3QgZm4gPSBwYXJzZXJNYXAuZ2V0KDE1Mzg4NDM5MjEpO1xuXG4gICAgcmV0dXJuIGZuLmNhbGwodGhpcyk7XG4gIH1cblxuICBwcmVkaWNhdGUoKSB7XG4gICAgY29uc3QgaWQgPSB0aGlzLmludDMyKCkgPj4+IDA7XG4gICAgY29uc3QgZm4gPSBwYXJzZXJNYXAuZ2V0KGlkKTtcblxuICAgIGlmICghZm4pIHtcbiAgICAgIGNvbnNvbGUubG9nKCdOb3QgZm91bmQgcHJlZGljYXRlIHdpdGggaWQ6JywgaWQpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIGZuLmNhbGwodGhpcyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRGVzZXJpYWxpemVyO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@mtproto/core/src/tl/deserializer/index.js\n");

/***/ }),

/***/ "./node_modules/@mtproto/core/src/tl/parser/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@mtproto/core/src/tl/parser/index.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nconst parserMap = new Map([\n  [481674261, function() {\nreturn this.vector(this.predicate, true);\n  }],\n  [85337187, function() {\nconst result = { _: 'mt_resPQ' };\nresult.nonce = this.int128();\nresult.server_nonce = this.int128();\nresult.pq = this.bytes();\nresult.server_public_key_fingerprints = this.vector(this.long, false);\nreturn result;\n  }],\n  [2211011308, function() {\nconst result = { _: 'mt_p_q_inner_data' };\nresult.pq = this.bytes();\nresult.p = this.bytes();\nresult.q = this.bytes();\nresult.nonce = this.int128();\nresult.server_nonce = this.int128();\nresult.new_nonce = this.int256();\nreturn result;\n  }],\n  [2851430293, function() {\nconst result = { _: 'mt_p_q_inner_data_dc' };\nresult.pq = this.bytes();\nresult.p = this.bytes();\nresult.q = this.bytes();\nresult.nonce = this.int128();\nresult.server_nonce = this.int128();\nresult.new_nonce = this.int256();\nresult.dc = this.int();\nreturn result;\n  }],\n  [1013613780, function() {\nconst result = { _: 'mt_p_q_inner_data_temp' };\nresult.pq = this.bytes();\nresult.p = this.bytes();\nresult.q = this.bytes();\nresult.nonce = this.int128();\nresult.server_nonce = this.int128();\nresult.new_nonce = this.int256();\nresult.expires_in = this.int();\nreturn result;\n  }],\n  [1459478408, function() {\nconst result = { _: 'mt_p_q_inner_data_temp_dc' };\nresult.pq = this.bytes();\nresult.p = this.bytes();\nresult.q = this.bytes();\nresult.nonce = this.int128();\nresult.server_nonce = this.int128();\nresult.new_nonce = this.int256();\nresult.dc = this.int();\nresult.expires_in = this.int();\nreturn result;\n  }],\n  [2043348061, function() {\nconst result = { _: 'mt_server_DH_params_fail' };\nresult.nonce = this.int128();\nresult.server_nonce = this.int128();\nresult.new_nonce_hash = this.int128();\nreturn result;\n  }],\n  [3504867164, function() {\nconst result = { _: 'mt_server_DH_params_ok' };\nresult.nonce = this.int128();\nresult.server_nonce = this.int128();\nresult.encrypted_answer = this.bytes();\nreturn result;\n  }],\n  [3045658042, function() {\nconst result = { _: 'mt_server_DH_inner_data' };\nresult.nonce = this.int128();\nresult.server_nonce = this.int128();\nresult.g = this.int();\nresult.dh_prime = this.bytes();\nresult.g_a = this.bytes();\nresult.server_time = this.int();\nreturn result;\n  }],\n  [1715713620, function() {\nconst result = { _: 'mt_client_DH_inner_data' };\nresult.nonce = this.int128();\nresult.server_nonce = this.int128();\nresult.retry_id = this.long();\nresult.g_b = this.bytes();\nreturn result;\n  }],\n  [1003222836, function() {\nconst result = { _: 'mt_dh_gen_ok' };\nresult.nonce = this.int128();\nresult.server_nonce = this.int128();\nresult.new_nonce_hash1 = this.int128();\nreturn result;\n  }],\n  [1188831161, function() {\nconst result = { _: 'mt_dh_gen_retry' };\nresult.nonce = this.int128();\nresult.server_nonce = this.int128();\nresult.new_nonce_hash2 = this.int128();\nreturn result;\n  }],\n  [2795351554, function() {\nconst result = { _: 'mt_dh_gen_fail' };\nresult.nonce = this.int128();\nresult.server_nonce = this.int128();\nresult.new_nonce_hash3 = this.int128();\nreturn result;\n  }],\n  [4082920705, function() {\nconst result = { _: 'mt_rpc_result' };\nresult.req_msg_id = this.long();\nresult.result = this.predicate();\nreturn result;\n  }],\n  [558156313, function() {\nconst result = { _: 'mt_rpc_error' };\nresult.error_code = this.int();\nresult.error_message = this.string();\nreturn result;\n  }],\n  [1579864942, function() {\nconst result = { _: 'mt_rpc_answer_unknown' };\nreturn result;\n  }],\n  [3447252358, function() {\nconst result = { _: 'mt_rpc_answer_dropped_running' };\nreturn result;\n  }],\n  [2755319991, function() {\nconst result = { _: 'mt_rpc_answer_dropped' };\nresult.msg_id = this.long();\nresult.seq_no = this.int();\nresult.bytes = this.int();\nreturn result;\n  }],\n  [155834844, function() {\nconst result = { _: 'mt_future_salt' };\nresult.valid_since = this.int();\nresult.valid_until = this.int();\nresult.salt = this.long();\nreturn result;\n  }],\n  [2924480661, function() {\nconst result = { _: 'mt_future_salts' };\nresult.req_msg_id = this.long();\nresult.now = this.int();\nresult.salts = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [880243653, function() {\nconst result = { _: 'mt_pong' };\nresult.msg_id = this.long();\nresult.ping_id = this.long();\nreturn result;\n  }],\n  [2663516424, function() {\nconst result = { _: 'mt_new_session_created' };\nresult.first_msg_id = this.long();\nresult.unique_id = this.long();\nresult.server_salt = this.long();\nreturn result;\n  }],\n  [1945237724, function() {\nconst result = { _: 'mt_msg_container' };\nresult.messages = this.vector(this.mt_message, true);\nreturn result;\n  }],\n  [1538843921, function() {\nconst result = { _: 'mt_message' };\nresult.msg_id = this.long();\nresult.seqno = this.int();\nresult.bytes = this.int();\nresult.body = this.predicate();\nreturn result;\n  }],\n  [3764405938, function() {\nconst result = { _: 'mt_msg_copy' };\nresult.orig_message = this.predicate();\nreturn result;\n  }],\n  [812830625, function() {\nreturn this.gzip();\n  }],\n  [1658238041, function() {\nconst result = { _: 'mt_msgs_ack' };\nresult.msg_ids = this.vector(this.long, false);\nreturn result;\n  }],\n  [2817521681, function() {\nconst result = { _: 'mt_bad_msg_notification' };\nresult.bad_msg_id = this.long();\nresult.bad_msg_seqno = this.int();\nresult.error_code = this.int();\nreturn result;\n  }],\n  [3987424379, function() {\nconst result = { _: 'mt_bad_server_salt' };\nresult.bad_msg_id = this.long();\nresult.bad_msg_seqno = this.int();\nresult.error_code = this.int();\nresult.new_server_salt = this.long();\nreturn result;\n  }],\n  [2105940488, function() {\nconst result = { _: 'mt_msg_resend_req' };\nresult.msg_ids = this.vector(this.long, false);\nreturn result;\n  }],\n  [2249243371, function() {\nconst result = { _: 'mt_msg_resend_ans_req' };\nresult.msg_ids = this.vector(this.long, false);\nreturn result;\n  }],\n  [3664378706, function() {\nconst result = { _: 'mt_msgs_state_req' };\nresult.msg_ids = this.vector(this.long, false);\nreturn result;\n  }],\n  [81704317, function() {\nconst result = { _: 'mt_msgs_state_info' };\nresult.req_msg_id = this.long();\nresult.info = this.bytes();\nreturn result;\n  }],\n  [2361446705, function() {\nconst result = { _: 'mt_msgs_all_info' };\nresult.msg_ids = this.vector(this.long, false);\nresult.info = this.bytes();\nreturn result;\n  }],\n  [661470918, function() {\nconst result = { _: 'mt_msg_detailed_info' };\nresult.msg_id = this.long();\nresult.answer_msg_id = this.long();\nresult.bytes = this.int();\nresult.status = this.int();\nreturn result;\n  }],\n  [2157819615, function() {\nconst result = { _: 'mt_msg_new_detailed_info' };\nresult.answer_msg_id = this.long();\nresult.bytes = this.int();\nresult.status = this.int();\nreturn result;\n  }],\n  [1973679973, function() {\nconst result = { _: 'mt_bind_auth_key_inner' };\nresult.nonce = this.long();\nresult.temp_auth_key_id = this.long();\nresult.perm_auth_key_id = this.long();\nresult.temp_session_id = this.long();\nresult.expires_at = this.int();\nreturn result;\n  }],\n  [4133544404, function() {\nconst result = { _: 'mt_destroy_auth_key_ok' };\nreturn result;\n  }],\n  [178201177, function() {\nconst result = { _: 'mt_destroy_auth_key_none' };\nreturn result;\n  }],\n  [3926956819, function() {\nconst result = { _: 'mt_destroy_auth_key_fail' };\nreturn result;\n  }],\n  [3793765884, function() {\nconst result = { _: 'mt_destroy_session_ok' };\nresult.session_id = this.long();\nreturn result;\n  }],\n  [1658015945, function() {\nconst result = { _: 'mt_destroy_session_none' };\nresult.session_id = this.long();\nreturn result;\n  }],\n  [3162085175, function() {\nreturn false;\n  }],\n  [2574415285, function() {\nreturn true;\n  }],\n  [1072550713, function() {\nreturn true;\n  }],\n  [481674261, function() {\nreturn this.vector(this.predicate, true);\n  }],\n  [3300522427, function() {\nconst result = { _: 'error' };\nresult.code = this.int();\nresult.text = this.string();\nreturn result;\n  }],\n  [1450380236, function() {\nreturn null;\n  }],\n  [2134579434, function() {\nconst result = { _: 'inputPeerEmpty' };\nreturn result;\n  }],\n  [2107670217, function() {\nconst result = { _: 'inputPeerSelf' };\nreturn result;\n  }],\n  [396093539, function() {\nconst result = { _: 'inputPeerChat' };\nresult.chat_id = this.int();\nreturn result;\n  }],\n  [2072935910, function() {\nconst result = { _: 'inputPeerUser' };\nresult.user_id = this.int();\nresult.access_hash = this.long();\nreturn result;\n  }],\n  [548253432, function() {\nconst result = { _: 'inputPeerChannel' };\nresult.channel_id = this.int();\nresult.access_hash = this.long();\nreturn result;\n  }],\n  [398123750, function() {\nconst result = { _: 'inputPeerUserFromMessage' };\nresult.peer = this.predicate();\nresult.msg_id = this.int();\nresult.user_id = this.int();\nreturn result;\n  }],\n  [2627073979, function() {\nconst result = { _: 'inputPeerChannelFromMessage' };\nresult.peer = this.predicate();\nresult.msg_id = this.int();\nresult.channel_id = this.int();\nreturn result;\n  }],\n  [3112732367, function() {\nconst result = { _: 'inputUserEmpty' };\nreturn result;\n  }],\n  [4156666175, function() {\nconst result = { _: 'inputUserSelf' };\nreturn result;\n  }],\n  [3626575894, function() {\nconst result = { _: 'inputUser' };\nresult.user_id = this.int();\nresult.access_hash = this.long();\nreturn result;\n  }],\n  [756118935, function() {\nconst result = { _: 'inputUserFromMessage' };\nresult.peer = this.predicate();\nresult.msg_id = this.int();\nresult.user_id = this.int();\nreturn result;\n  }],\n  [4086478836, function() {\nconst result = { _: 'inputPhoneContact' };\nresult.client_id = this.long();\nresult.phone = this.string();\nresult.first_name = this.string();\nresult.last_name = this.string();\nreturn result;\n  }],\n  [4113560191, function() {\nconst result = { _: 'inputFile' };\nresult.id = this.long();\nresult.parts = this.int();\nresult.name = this.string();\nresult.md5_checksum = this.string();\nreturn result;\n  }],\n  [4199484341, function() {\nconst result = { _: 'inputFileBig' };\nresult.id = this.long();\nresult.parts = this.int();\nresult.name = this.string();\nreturn result;\n  }],\n  [2523198847, function() {\nconst result = { _: 'inputMediaEmpty' };\nreturn result;\n  }],\n  [505969924, function() {\nconst result = { _: 'inputMediaUploadedPhoto' };\nresult.flags = this.int();\nresult.file = this.predicate();\nif (result.flags & 1) result.stickers = this.vector(this.predicate);\nif (result.flags & 2) result.ttl_seconds = this.int();\nreturn result;\n  }],\n  [3015312949, function() {\nconst result = { _: 'inputMediaPhoto' };\nresult.flags = this.int();\nresult.id = this.predicate();\nif (result.flags & 1) result.ttl_seconds = this.int();\nreturn result;\n  }],\n  [4190388548, function() {\nconst result = { _: 'inputMediaGeoPoint' };\nresult.geo_point = this.predicate();\nreturn result;\n  }],\n  [4171988475, function() {\nconst result = { _: 'inputMediaContact' };\nresult.phone_number = this.string();\nresult.first_name = this.string();\nresult.last_name = this.string();\nresult.vcard = this.string();\nreturn result;\n  }],\n  [1530447553, function() {\nconst result = { _: 'inputMediaUploadedDocument' };\nresult.flags = this.int();\nresult.nosound_video = !!(result.flags & 8);\nresult.file = this.predicate();\nif (result.flags & 4) result.thumb = this.predicate();\nresult.mime_type = this.string();\nresult.attributes = this.vector(this.predicate, false);\nif (result.flags & 1) result.stickers = this.vector(this.predicate);\nif (result.flags & 2) result.ttl_seconds = this.int();\nreturn result;\n  }],\n  [598418386, function() {\nconst result = { _: 'inputMediaDocument' };\nresult.flags = this.int();\nresult.id = this.predicate();\nif (result.flags & 1) result.ttl_seconds = this.int();\nreturn result;\n  }],\n  [3242007569, function() {\nconst result = { _: 'inputMediaVenue' };\nresult.geo_point = this.predicate();\nresult.title = this.string();\nresult.address = this.string();\nresult.provider = this.string();\nresult.venue_id = this.string();\nresult.venue_type = this.string();\nreturn result;\n  }],\n  [1212395773, function() {\nconst result = { _: 'inputMediaGifExternal' };\nresult.url = this.string();\nresult.q = this.string();\nreturn result;\n  }],\n  [3854302746, function() {\nconst result = { _: 'inputMediaPhotoExternal' };\nresult.flags = this.int();\nresult.url = this.string();\nif (result.flags & 1) result.ttl_seconds = this.int();\nreturn result;\n  }],\n  [4216511641, function() {\nconst result = { _: 'inputMediaDocumentExternal' };\nresult.flags = this.int();\nresult.url = this.string();\nif (result.flags & 1) result.ttl_seconds = this.int();\nreturn result;\n  }],\n  [3544138739, function() {\nconst result = { _: 'inputMediaGame' };\nresult.id = this.predicate();\nreturn result;\n  }],\n  [4108359363, function() {\nconst result = { _: 'inputMediaInvoice' };\nresult.flags = this.int();\nresult.title = this.string();\nresult.description = this.string();\nif (result.flags & 1) result.photo = this.predicate();\nresult.invoice = this.predicate();\nresult.payload = this.bytes();\nresult.provider = this.string();\nresult.provider_data = this.predicate();\nresult.start_param = this.string();\nreturn result;\n  }],\n  [3461251837, function() {\nconst result = { _: 'inputMediaGeoLive' };\nresult.flags = this.int();\nresult.stopped = !!(result.flags & 1);\nresult.geo_point = this.predicate();\nif (result.flags & 2) result.period = this.int();\nreturn result;\n  }],\n  [261416433, function() {\nconst result = { _: 'inputMediaPoll' };\nresult.flags = this.int();\nresult.poll = this.predicate();\nif (result.flags & 1) result.correct_answers = this.vector(this.bytes);\nif (result.flags & 2) result.solution = this.string();\nif (result.flags & 2) result.solution_entities = this.vector(this.predicate);\nreturn result;\n  }],\n  [3866083195, function() {\nconst result = { _: 'inputMediaDice' };\nresult.emoticon = this.string();\nreturn result;\n  }],\n  [480546647, function() {\nconst result = { _: 'inputChatPhotoEmpty' };\nreturn result;\n  }],\n  [2457621940, function() {\nconst result = { _: 'inputChatUploadedPhoto' };\nresult.file = this.predicate();\nreturn result;\n  }],\n  [2303962423, function() {\nconst result = { _: 'inputChatPhoto' };\nresult.id = this.predicate();\nreturn result;\n  }],\n  [3837862870, function() {\nconst result = { _: 'inputGeoPointEmpty' };\nreturn result;\n  }],\n  [4088900809, function() {\nconst result = { _: 'inputGeoPoint' };\nresult.lat = this.double();\nresult.long = this.double();\nreturn result;\n  }],\n  [483901197, function() {\nconst result = { _: 'inputPhotoEmpty' };\nreturn result;\n  }],\n  [1001634122, function() {\nconst result = { _: 'inputPhoto' };\nresult.id = this.long();\nresult.access_hash = this.long();\nresult.file_reference = this.bytes();\nreturn result;\n  }],\n  [3755650017, function() {\nconst result = { _: 'inputFileLocation' };\nresult.volume_id = this.long();\nresult.local_id = this.int();\nresult.secret = this.long();\nresult.file_reference = this.bytes();\nreturn result;\n  }],\n  [4112735573, function() {\nconst result = { _: 'inputEncryptedFileLocation' };\nresult.id = this.long();\nresult.access_hash = this.long();\nreturn result;\n  }],\n  [3134223748, function() {\nconst result = { _: 'inputDocumentFileLocation' };\nresult.id = this.long();\nresult.access_hash = this.long();\nresult.file_reference = this.bytes();\nresult.thumb_size = this.string();\nreturn result;\n  }],\n  [3418877480, function() {\nconst result = { _: 'inputSecureFileLocation' };\nresult.id = this.long();\nresult.access_hash = this.long();\nreturn result;\n  }],\n  [700340377, function() {\nconst result = { _: 'inputTakeoutFileLocation' };\nreturn result;\n  }],\n  [1075322878, function() {\nconst result = { _: 'inputPhotoFileLocation' };\nresult.id = this.long();\nresult.access_hash = this.long();\nresult.file_reference = this.bytes();\nresult.thumb_size = this.string();\nreturn result;\n  }],\n  [3627312883, function() {\nconst result = { _: 'inputPhotoLegacyFileLocation' };\nresult.id = this.long();\nresult.access_hash = this.long();\nresult.file_reference = this.bytes();\nresult.volume_id = this.long();\nresult.local_id = this.int();\nresult.secret = this.long();\nreturn result;\n  }],\n  [668375447, function() {\nconst result = { _: 'inputPeerPhotoFileLocation' };\nresult.flags = this.int();\nresult.big = !!(result.flags & 1);\nresult.peer = this.predicate();\nresult.volume_id = this.long();\nresult.local_id = this.int();\nreturn result;\n  }],\n  [230353641, function() {\nconst result = { _: 'inputStickerSetThumb' };\nresult.stickerset = this.predicate();\nresult.volume_id = this.long();\nresult.local_id = this.int();\nreturn result;\n  }],\n  [2645671021, function() {\nconst result = { _: 'peerUser' };\nresult.user_id = this.int();\nreturn result;\n  }],\n  [3134252475, function() {\nconst result = { _: 'peerChat' };\nresult.chat_id = this.int();\nreturn result;\n  }],\n  [3185435954, function() {\nconst result = { _: 'peerChannel' };\nresult.channel_id = this.int();\nreturn result;\n  }],\n  [2861972229, function() {\nconst result = { _: 'storage.fileUnknown' };\nreturn result;\n  }],\n  [1086091090, function() {\nconst result = { _: 'storage.filePartial' };\nreturn result;\n  }],\n  [8322574, function() {\nconst result = { _: 'storage.fileJpeg' };\nreturn result;\n  }],\n  [3403786975, function() {\nconst result = { _: 'storage.fileGif' };\nreturn result;\n  }],\n  [172975040, function() {\nconst result = { _: 'storage.filePng' };\nreturn result;\n  }],\n  [2921222285, function() {\nconst result = { _: 'storage.filePdf' };\nreturn result;\n  }],\n  [1384777335, function() {\nconst result = { _: 'storage.fileMp3' };\nreturn result;\n  }],\n  [1258941372, function() {\nconst result = { _: 'storage.fileMov' };\nreturn result;\n  }],\n  [3016663268, function() {\nconst result = { _: 'storage.fileMp4' };\nreturn result;\n  }],\n  [276907596, function() {\nconst result = { _: 'storage.fileWebp' };\nreturn result;\n  }],\n  [537022650, function() {\nconst result = { _: 'userEmpty' };\nresult.id = this.int();\nreturn result;\n  }],\n  [2474924225, function() {\nconst result = { _: 'user' };\nresult.flags = this.int();\nresult.self = !!(result.flags & 1024);\nresult.contact = !!(result.flags & 2048);\nresult.mutual_contact = !!(result.flags & 4096);\nresult.deleted = !!(result.flags & 8192);\nresult.bot = !!(result.flags & 16384);\nresult.bot_chat_history = !!(result.flags & 32768);\nresult.bot_nochats = !!(result.flags & 65536);\nresult.verified = !!(result.flags & 131072);\nresult.restricted = !!(result.flags & 262144);\nresult.min = !!(result.flags & 1048576);\nresult.bot_inline_geo = !!(result.flags & 2097152);\nresult.support = !!(result.flags & 8388608);\nresult.scam = !!(result.flags & 16777216);\nresult.id = this.int();\nif (result.flags & 1) result.access_hash = this.long();\nif (result.flags & 2) result.first_name = this.string();\nif (result.flags & 4) result.last_name = this.string();\nif (result.flags & 8) result.username = this.string();\nif (result.flags & 16) result.phone = this.string();\nif (result.flags & 32) result.photo = this.predicate();\nif (result.flags & 64) result.status = this.predicate();\nif (result.flags & 16384) result.bot_info_version = this.int();\nif (result.flags & 262144) result.restriction_reason = this.vector(this.predicate);\nif (result.flags & 524288) result.bot_inline_placeholder = this.string();\nif (result.flags & 4194304) result.lang_code = this.string();\nreturn result;\n  }],\n  [1326562017, function() {\nconst result = { _: 'userProfilePhotoEmpty' };\nreturn result;\n  }],\n  [3973537164, function() {\nconst result = { _: 'userProfilePhoto' };\nresult.photo_id = this.long();\nresult.photo_small = this.predicate();\nresult.photo_big = this.predicate();\nresult.dc_id = this.int();\nreturn result;\n  }],\n  [164646985, function() {\nconst result = { _: 'userStatusEmpty' };\nreturn result;\n  }],\n  [3988339017, function() {\nconst result = { _: 'userStatusOnline' };\nresult.expires = this.int();\nreturn result;\n  }],\n  [9203775, function() {\nconst result = { _: 'userStatusOffline' };\nresult.was_online = this.int();\nreturn result;\n  }],\n  [3798942449, function() {\nconst result = { _: 'userStatusRecently' };\nreturn result;\n  }],\n  [129960444, function() {\nconst result = { _: 'userStatusLastWeek' };\nreturn result;\n  }],\n  [2011940674, function() {\nconst result = { _: 'userStatusLastMonth' };\nreturn result;\n  }],\n  [2611140608, function() {\nconst result = { _: 'chatEmpty' };\nresult.id = this.int();\nreturn result;\n  }],\n  [1004149726, function() {\nconst result = { _: 'chat' };\nresult.flags = this.int();\nresult.creator = !!(result.flags & 1);\nresult.kicked = !!(result.flags & 2);\nresult.left = !!(result.flags & 4);\nresult.deactivated = !!(result.flags & 32);\nresult.id = this.int();\nresult.title = this.string();\nresult.photo = this.predicate();\nresult.participants_count = this.int();\nresult.date = this.int();\nresult.version = this.int();\nif (result.flags & 64) result.migrated_to = this.predicate();\nif (result.flags & 16384) result.admin_rights = this.predicate();\nif (result.flags & 262144) result.default_banned_rights = this.predicate();\nreturn result;\n  }],\n  [120753115, function() {\nconst result = { _: 'chatForbidden' };\nresult.id = this.int();\nresult.title = this.string();\nreturn result;\n  }],\n  [3541734942, function() {\nconst result = { _: 'channel' };\nresult.flags = this.int();\nresult.creator = !!(result.flags & 1);\nresult.left = !!(result.flags & 4);\nresult.broadcast = !!(result.flags & 32);\nresult.verified = !!(result.flags & 128);\nresult.megagroup = !!(result.flags & 256);\nresult.restricted = !!(result.flags & 512);\nresult.signatures = !!(result.flags & 2048);\nresult.min = !!(result.flags & 4096);\nresult.scam = !!(result.flags & 524288);\nresult.has_link = !!(result.flags & 1048576);\nresult.has_geo = !!(result.flags & 2097152);\nresult.slowmode_enabled = !!(result.flags & 4194304);\nresult.id = this.int();\nif (result.flags & 8192) result.access_hash = this.long();\nresult.title = this.string();\nif (result.flags & 64) result.username = this.string();\nresult.photo = this.predicate();\nresult.date = this.int();\nresult.version = this.int();\nif (result.flags & 512) result.restriction_reason = this.vector(this.predicate);\nif (result.flags & 16384) result.admin_rights = this.predicate();\nif (result.flags & 32768) result.banned_rights = this.predicate();\nif (result.flags & 262144) result.default_banned_rights = this.predicate();\nif (result.flags & 131072) result.participants_count = this.int();\nreturn result;\n  }],\n  [681420594, function() {\nconst result = { _: 'channelForbidden' };\nresult.flags = this.int();\nresult.broadcast = !!(result.flags & 32);\nresult.megagroup = !!(result.flags & 256);\nresult.id = this.int();\nresult.access_hash = this.long();\nresult.title = this.string();\nif (result.flags & 65536) result.until_date = this.int();\nreturn result;\n  }],\n  [461151667, function() {\nconst result = { _: 'chatFull' };\nresult.flags = this.int();\nresult.can_set_username = !!(result.flags & 128);\nresult.has_scheduled = !!(result.flags & 256);\nresult.id = this.int();\nresult.about = this.string();\nresult.participants = this.predicate();\nif (result.flags & 4) result.chat_photo = this.predicate();\nresult.notify_settings = this.predicate();\nresult.exported_invite = this.predicate();\nif (result.flags & 8) result.bot_info = this.vector(this.predicate);\nif (result.flags & 64) result.pinned_msg_id = this.int();\nif (result.flags & 2048) result.folder_id = this.int();\nreturn result;\n  }],\n  [4041631530, function() {\nconst result = { _: 'channelFull' };\nresult.flags = this.int();\nresult.can_view_participants = !!(result.flags & 8);\nresult.can_set_username = !!(result.flags & 64);\nresult.can_set_stickers = !!(result.flags & 128);\nresult.hidden_prehistory = !!(result.flags & 1024);\nresult.can_view_stats = !!(result.flags & 4096);\nresult.can_set_location = !!(result.flags & 65536);\nresult.has_scheduled = !!(result.flags & 524288);\nresult.id = this.int();\nresult.about = this.string();\nif (result.flags & 1) result.participants_count = this.int();\nif (result.flags & 2) result.admins_count = this.int();\nif (result.flags & 4) result.kicked_count = this.int();\nif (result.flags & 4) result.banned_count = this.int();\nif (result.flags & 8192) result.online_count = this.int();\nresult.read_inbox_max_id = this.int();\nresult.read_outbox_max_id = this.int();\nresult.unread_count = this.int();\nresult.chat_photo = this.predicate();\nresult.notify_settings = this.predicate();\nresult.exported_invite = this.predicate();\nresult.bot_info = this.vector(this.predicate, false);\nif (result.flags & 16) result.migrated_from_chat_id = this.int();\nif (result.flags & 16) result.migrated_from_max_id = this.int();\nif (result.flags & 32) result.pinned_msg_id = this.int();\nif (result.flags & 256) result.stickerset = this.predicate();\nif (result.flags & 512) result.available_min_id = this.int();\nif (result.flags & 2048) result.folder_id = this.int();\nif (result.flags & 16384) result.linked_chat_id = this.int();\nif (result.flags & 32768) result.location = this.predicate();\nif (result.flags & 131072) result.slowmode_seconds = this.int();\nif (result.flags & 262144) result.slowmode_next_send_date = this.int();\nif (result.flags & 4096) result.stats_dc = this.int();\nresult.pts = this.int();\nreturn result;\n  }],\n  [3369552190, function() {\nconst result = { _: 'chatParticipant' };\nresult.user_id = this.int();\nresult.inviter_id = this.int();\nresult.date = this.int();\nreturn result;\n  }],\n  [3658699658, function() {\nconst result = { _: 'chatParticipantCreator' };\nresult.user_id = this.int();\nreturn result;\n  }],\n  [3805733942, function() {\nconst result = { _: 'chatParticipantAdmin' };\nresult.user_id = this.int();\nresult.inviter_id = this.int();\nresult.date = this.int();\nreturn result;\n  }],\n  [4237298731, function() {\nconst result = { _: 'chatParticipantsForbidden' };\nresult.flags = this.int();\nresult.chat_id = this.int();\nif (result.flags & 1) result.self_participant = this.predicate();\nreturn result;\n  }],\n  [1061556205, function() {\nconst result = { _: 'chatParticipants' };\nresult.chat_id = this.int();\nresult.participants = this.vector(this.predicate, false);\nresult.version = this.int();\nreturn result;\n  }],\n  [935395612, function() {\nconst result = { _: 'chatPhotoEmpty' };\nreturn result;\n  }],\n  [1197267925, function() {\nconst result = { _: 'chatPhoto' };\nresult.photo_small = this.predicate();\nresult.photo_big = this.predicate();\nresult.dc_id = this.int();\nreturn result;\n  }],\n  [2212879956, function() {\nconst result = { _: 'messageEmpty' };\nresult.id = this.int();\nreturn result;\n  }],\n  [1160515173, function() {\nconst result = { _: 'message' };\nresult.flags = this.int();\nresult.out = !!(result.flags & 2);\nresult.mentioned = !!(result.flags & 16);\nresult.media_unread = !!(result.flags & 32);\nresult.silent = !!(result.flags & 8192);\nresult.post = !!(result.flags & 16384);\nresult.from_scheduled = !!(result.flags & 262144);\nresult.legacy = !!(result.flags & 524288);\nresult.edit_hide = !!(result.flags & 2097152);\nresult.id = this.int();\nif (result.flags & 256) result.from_id = this.int();\nresult.to_id = this.predicate();\nif (result.flags & 4) result.fwd_from = this.predicate();\nif (result.flags & 2048) result.via_bot_id = this.int();\nif (result.flags & 8) result.reply_to_msg_id = this.int();\nresult.date = this.int();\nresult.message = this.string();\nif (result.flags & 512) result.media = this.predicate();\nif (result.flags & 64) result.reply_markup = this.predicate();\nif (result.flags & 128) result.entities = this.vector(this.predicate);\nif (result.flags & 1024) result.views = this.int();\nif (result.flags & 32768) result.edit_date = this.int();\nif (result.flags & 65536) result.post_author = this.string();\nif (result.flags & 131072) result.grouped_id = this.long();\nif (result.flags & 4194304) result.restriction_reason = this.vector(this.predicate);\nreturn result;\n  }],\n  [2652479990, function() {\nconst result = { _: 'messageService' };\nresult.flags = this.int();\nresult.out = !!(result.flags & 2);\nresult.mentioned = !!(result.flags & 16);\nresult.media_unread = !!(result.flags & 32);\nresult.silent = !!(result.flags & 8192);\nresult.post = !!(result.flags & 16384);\nresult.legacy = !!(result.flags & 524288);\nresult.id = this.int();\nif (result.flags & 256) result.from_id = this.int();\nresult.to_id = this.predicate();\nif (result.flags & 8) result.reply_to_msg_id = this.int();\nresult.date = this.int();\nresult.action = this.predicate();\nreturn result;\n  }],\n  [1038967584, function() {\nconst result = { _: 'messageMediaEmpty' };\nreturn result;\n  }],\n  [1766936791, function() {\nconst result = { _: 'messageMediaPhoto' };\nresult.flags = this.int();\nif (result.flags & 1) result.photo = this.predicate();\nif (result.flags & 4) result.ttl_seconds = this.int();\nreturn result;\n  }],\n  [1457575028, function() {\nconst result = { _: 'messageMediaGeo' };\nresult.geo = this.predicate();\nreturn result;\n  }],\n  [3421653312, function() {\nconst result = { _: 'messageMediaContact' };\nresult.phone_number = this.string();\nresult.first_name = this.string();\nresult.last_name = this.string();\nresult.vcard = this.string();\nresult.user_id = this.int();\nreturn result;\n  }],\n  [2676290718, function() {\nconst result = { _: 'messageMediaUnsupported' };\nreturn result;\n  }],\n  [2628808919, function() {\nconst result = { _: 'messageMediaDocument' };\nresult.flags = this.int();\nif (result.flags & 1) result.document = this.predicate();\nif (result.flags & 4) result.ttl_seconds = this.int();\nreturn result;\n  }],\n  [2737690112, function() {\nconst result = { _: 'messageMediaWebPage' };\nresult.webpage = this.predicate();\nreturn result;\n  }],\n  [784356159, function() {\nconst result = { _: 'messageMediaVenue' };\nresult.geo = this.predicate();\nresult.title = this.string();\nresult.address = this.string();\nresult.provider = this.string();\nresult.venue_id = this.string();\nresult.venue_type = this.string();\nreturn result;\n  }],\n  [4256272392, function() {\nconst result = { _: 'messageMediaGame' };\nresult.game = this.predicate();\nreturn result;\n  }],\n  [2220168007, function() {\nconst result = { _: 'messageMediaInvoice' };\nresult.flags = this.int();\nresult.shipping_address_requested = !!(result.flags & 2);\nresult.test = !!(result.flags & 8);\nresult.title = this.string();\nresult.description = this.string();\nif (result.flags & 1) result.photo = this.predicate();\nif (result.flags & 4) result.receipt_msg_id = this.int();\nresult.currency = this.string();\nresult.total_amount = this.long();\nresult.start_param = this.string();\nreturn result;\n  }],\n  [2084316681, function() {\nconst result = { _: 'messageMediaGeoLive' };\nresult.geo = this.predicate();\nresult.period = this.int();\nreturn result;\n  }],\n  [1272375192, function() {\nconst result = { _: 'messageMediaPoll' };\nresult.poll = this.predicate();\nresult.results = this.predicate();\nreturn result;\n  }],\n  [1065280907, function() {\nconst result = { _: 'messageMediaDice' };\nresult.value = this.int();\nresult.emoticon = this.string();\nreturn result;\n  }],\n  [3064919984, function() {\nconst result = { _: 'messageActionEmpty' };\nreturn result;\n  }],\n  [2791541658, function() {\nconst result = { _: 'messageActionChatCreate' };\nresult.title = this.string();\nresult.users = this.vector(this.int, false);\nreturn result;\n  }],\n  [3047280218, function() {\nconst result = { _: 'messageActionChatEditTitle' };\nresult.title = this.string();\nreturn result;\n  }],\n  [2144015272, function() {\nconst result = { _: 'messageActionChatEditPhoto' };\nresult.photo = this.predicate();\nreturn result;\n  }],\n  [2514746351, function() {\nconst result = { _: 'messageActionChatDeletePhoto' };\nreturn result;\n  }],\n  [1217033015, function() {\nconst result = { _: 'messageActionChatAddUser' };\nresult.users = this.vector(this.int, false);\nreturn result;\n  }],\n  [2997787404, function() {\nconst result = { _: 'messageActionChatDeleteUser' };\nresult.user_id = this.int();\nreturn result;\n  }],\n  [4171036136, function() {\nconst result = { _: 'messageActionChatJoinedByLink' };\nresult.inviter_id = this.int();\nreturn result;\n  }],\n  [2513611922, function() {\nconst result = { _: 'messageActionChannelCreate' };\nresult.title = this.string();\nreturn result;\n  }],\n  [1371385889, function() {\nconst result = { _: 'messageActionChatMigrateTo' };\nresult.channel_id = this.int();\nreturn result;\n  }],\n  [2958420718, function() {\nconst result = { _: 'messageActionChannelMigrateFrom' };\nresult.title = this.string();\nresult.chat_id = this.int();\nreturn result;\n  }],\n  [2495428845, function() {\nconst result = { _: 'messageActionPinMessage' };\nreturn result;\n  }],\n  [2679813636, function() {\nconst result = { _: 'messageActionHistoryClear' };\nreturn result;\n  }],\n  [2460428406, function() {\nconst result = { _: 'messageActionGameScore' };\nresult.game_id = this.long();\nresult.score = this.int();\nreturn result;\n  }],\n  [2402399015, function() {\nconst result = { _: 'messageActionPaymentSentMe' };\nresult.flags = this.int();\nresult.currency = this.string();\nresult.total_amount = this.long();\nresult.payload = this.bytes();\nif (result.flags & 1) result.info = this.predicate();\nif (result.flags & 2) result.shipping_option_id = this.string();\nresult.charge = this.predicate();\nreturn result;\n  }],\n  [1080663248, function() {\nconst result = { _: 'messageActionPaymentSent' };\nresult.currency = this.string();\nresult.total_amount = this.long();\nreturn result;\n  }],\n  [2162236031, function() {\nconst result = { _: 'messageActionPhoneCall' };\nresult.flags = this.int();\nresult.video = !!(result.flags & 4);\nresult.call_id = this.long();\nif (result.flags & 1) result.reason = this.predicate();\nif (result.flags & 2) result.duration = this.int();\nreturn result;\n  }],\n  [1200788123, function() {\nconst result = { _: 'messageActionScreenshotTaken' };\nreturn result;\n  }],\n  [4209418070, function() {\nconst result = { _: 'messageActionCustomAction' };\nresult.message = this.string();\nreturn result;\n  }],\n  [2884218878, function() {\nconst result = { _: 'messageActionBotAllowed' };\nresult.domain = this.string();\nreturn result;\n  }],\n  [455635795, function() {\nconst result = { _: 'messageActionSecureValuesSentMe' };\nresult.values = this.vector(this.predicate, false);\nresult.credentials = this.predicate();\nreturn result;\n  }],\n  [3646710100, function() {\nconst result = { _: 'messageActionSecureValuesSent' };\nresult.types = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [4092747638, function() {\nconst result = { _: 'messageActionContactSignUp' };\nreturn result;\n  }],\n  [739712882, function() {\nconst result = { _: 'dialog' };\nresult.flags = this.int();\nresult.pinned = !!(result.flags & 4);\nresult.unread_mark = !!(result.flags & 8);\nresult.peer = this.predicate();\nresult.top_message = this.int();\nresult.read_inbox_max_id = this.int();\nresult.read_outbox_max_id = this.int();\nresult.unread_count = this.int();\nresult.unread_mentions_count = this.int();\nresult.notify_settings = this.predicate();\nif (result.flags & 1) result.pts = this.int();\nif (result.flags & 2) result.draft = this.predicate();\nif (result.flags & 16) result.folder_id = this.int();\nreturn result;\n  }],\n  [1908216652, function() {\nconst result = { _: 'dialogFolder' };\nresult.flags = this.int();\nresult.pinned = !!(result.flags & 4);\nresult.folder = this.predicate();\nresult.peer = this.predicate();\nresult.top_message = this.int();\nresult.unread_muted_peers_count = this.int();\nresult.unread_unmuted_peers_count = this.int();\nresult.unread_muted_messages_count = this.int();\nresult.unread_unmuted_messages_count = this.int();\nreturn result;\n  }],\n  [590459437, function() {\nconst result = { _: 'photoEmpty' };\nresult.id = this.long();\nreturn result;\n  }],\n  [3497329829, function() {\nconst result = { _: 'photo' };\nresult.flags = this.int();\nresult.has_stickers = !!(result.flags & 1);\nresult.id = this.long();\nresult.access_hash = this.long();\nresult.file_reference = this.bytes();\nresult.date = this.int();\nresult.sizes = this.vector(this.predicate, false);\nresult.dc_id = this.int();\nreturn result;\n  }],\n  [236446268, function() {\nconst result = { _: 'photoSizeEmpty' };\nresult.type = this.string();\nreturn result;\n  }],\n  [2009052699, function() {\nconst result = { _: 'photoSize' };\nresult.type = this.string();\nresult.location = this.predicate();\nresult.w = this.int();\nresult.h = this.int();\nresult.size = this.int();\nreturn result;\n  }],\n  [3920049402, function() {\nconst result = { _: 'photoCachedSize' };\nresult.type = this.string();\nresult.location = this.predicate();\nresult.w = this.int();\nresult.h = this.int();\nresult.bytes = this.bytes();\nreturn result;\n  }],\n  [3769678894, function() {\nconst result = { _: 'photoStrippedSize' };\nresult.type = this.string();\nresult.bytes = this.bytes();\nreturn result;\n  }],\n  [286776671, function() {\nconst result = { _: 'geoPointEmpty' };\nreturn result;\n  }],\n  [43446532, function() {\nconst result = { _: 'geoPoint' };\nresult.long = this.double();\nresult.lat = this.double();\nresult.access_hash = this.long();\nreturn result;\n  }],\n  [1577067778, function() {\nconst result = { _: 'auth.sentCode' };\nresult.flags = this.int();\nresult.type = this.predicate();\nresult.phone_code_hash = this.string();\nif (result.flags & 2) result.next_type = this.predicate();\nif (result.flags & 4) result.timeout = this.int();\nreturn result;\n  }],\n  [3439659286, function() {\nconst result = { _: 'auth.authorization' };\nresult.flags = this.int();\nif (result.flags & 1) result.tmp_sessions = this.int();\nresult.user = this.predicate();\nreturn result;\n  }],\n  [1148485274, function() {\nconst result = { _: 'auth.authorizationSignUpRequired' };\nresult.flags = this.int();\nif (result.flags & 1) result.terms_of_service = this.predicate();\nreturn result;\n  }],\n  [3751189549, function() {\nconst result = { _: 'auth.exportedAuthorization' };\nresult.id = this.int();\nresult.bytes = this.bytes();\nreturn result;\n  }],\n  [3099351820, function() {\nconst result = { _: 'inputNotifyPeer' };\nresult.peer = this.predicate();\nreturn result;\n  }],\n  [423314455, function() {\nconst result = { _: 'inputNotifyUsers' };\nreturn result;\n  }],\n  [1251338318, function() {\nconst result = { _: 'inputNotifyChats' };\nreturn result;\n  }],\n  [2983951486, function() {\nconst result = { _: 'inputNotifyBroadcasts' };\nreturn result;\n  }],\n  [2621249934, function() {\nconst result = { _: 'inputPeerNotifySettings' };\nresult.flags = this.int();\nif (result.flags & 1) result.show_previews = this.predicate();\nif (result.flags & 2) result.silent = this.predicate();\nif (result.flags & 4) result.mute_until = this.int();\nif (result.flags & 8) result.sound = this.string();\nreturn result;\n  }],\n  [2941295904, function() {\nconst result = { _: 'peerNotifySettings' };\nresult.flags = this.int();\nif (result.flags & 1) result.show_previews = this.predicate();\nif (result.flags & 2) result.silent = this.predicate();\nif (result.flags & 4) result.mute_until = this.int();\nif (result.flags & 8) result.sound = this.string();\nreturn result;\n  }],\n  [2172921549, function() {\nconst result = { _: 'peerSettings' };\nresult.flags = this.int();\nresult.report_spam = !!(result.flags & 1);\nresult.add_contact = !!(result.flags & 2);\nresult.block_contact = !!(result.flags & 4);\nresult.share_contact = !!(result.flags & 8);\nresult.need_contacts_exception = !!(result.flags & 16);\nresult.report_geo = !!(result.flags & 32);\nreturn result;\n  }],\n  [2755118061, function() {\nconst result = { _: 'wallPaper' };\nresult.id = this.long();\nresult.flags = this.int();\nresult.creator = !!(result.flags & 1);\nresult.default = !!(result.flags & 2);\nresult.pattern = !!(result.flags & 8);\nresult.dark = !!(result.flags & 16);\nresult.access_hash = this.long();\nresult.slug = this.string();\nresult.document = this.predicate();\nif (result.flags & 4) result.settings = this.predicate();\nreturn result;\n  }],\n  [2331249445, function() {\nconst result = { _: 'wallPaperNoFile' };\nresult.flags = this.int();\nresult.default = !!(result.flags & 2);\nresult.dark = !!(result.flags & 16);\nif (result.flags & 4) result.settings = this.predicate();\nreturn result;\n  }],\n  [1490799288, function() {\nconst result = { _: 'inputReportReasonSpam' };\nreturn result;\n  }],\n  [505595789, function() {\nconst result = { _: 'inputReportReasonViolence' };\nreturn result;\n  }],\n  [777640226, function() {\nconst result = { _: 'inputReportReasonPornography' };\nreturn result;\n  }],\n  [2918469347, function() {\nconst result = { _: 'inputReportReasonChildAbuse' };\nreturn result;\n  }],\n  [3782503690, function() {\nconst result = { _: 'inputReportReasonOther' };\nresult.text = this.string();\nreturn result;\n  }],\n  [2609510714, function() {\nconst result = { _: 'inputReportReasonCopyright' };\nreturn result;\n  }],\n  [3688169197, function() {\nconst result = { _: 'inputReportReasonGeoIrrelevant' };\nreturn result;\n  }],\n  [3992026130, function() {\nconst result = { _: 'userFull' };\nresult.flags = this.int();\nresult.blocked = !!(result.flags & 1);\nresult.phone_calls_available = !!(result.flags & 16);\nresult.phone_calls_private = !!(result.flags & 32);\nresult.can_pin_message = !!(result.flags & 128);\nresult.has_scheduled = !!(result.flags & 4096);\nresult.user = this.predicate();\nif (result.flags & 2) result.about = this.string();\nresult.settings = this.predicate();\nif (result.flags & 4) result.profile_photo = this.predicate();\nresult.notify_settings = this.predicate();\nif (result.flags & 8) result.bot_info = this.predicate();\nif (result.flags & 64) result.pinned_msg_id = this.int();\nresult.common_chats_count = this.int();\nif (result.flags & 2048) result.folder_id = this.int();\nreturn result;\n  }],\n  [4178692500, function() {\nconst result = { _: 'contact' };\nresult.user_id = this.int();\nresult.mutual = this.predicate();\nreturn result;\n  }],\n  [3489825848, function() {\nconst result = { _: 'importedContact' };\nresult.user_id = this.int();\nresult.client_id = this.long();\nreturn result;\n  }],\n  [1444661369, function() {\nconst result = { _: 'contactBlocked' };\nresult.user_id = this.int();\nresult.date = this.int();\nreturn result;\n  }],\n  [3546811489, function() {\nconst result = { _: 'contactStatus' };\nresult.user_id = this.int();\nresult.status = this.predicate();\nreturn result;\n  }],\n  [3075189202, function() {\nconst result = { _: 'contacts.contactsNotModified' };\nreturn result;\n  }],\n  [3941105218, function() {\nconst result = { _: 'contacts.contacts' };\nresult.contacts = this.vector(this.predicate, false);\nresult.saved_count = this.int();\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [2010127419, function() {\nconst result = { _: 'contacts.importedContacts' };\nresult.imported = this.vector(this.predicate, false);\nresult.popular_invites = this.vector(this.predicate, false);\nresult.retry_contacts = this.vector(this.long, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [471043349, function() {\nconst result = { _: 'contacts.blocked' };\nresult.blocked = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [2416444065, function() {\nconst result = { _: 'contacts.blockedSlice' };\nresult.count = this.int();\nresult.blocked = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [364538944, function() {\nconst result = { _: 'messages.dialogs' };\nresult.dialogs = this.vector(this.predicate, false);\nresult.messages = this.vector(this.predicate, false);\nresult.chats = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [1910543603, function() {\nconst result = { _: 'messages.dialogsSlice' };\nresult.count = this.int();\nresult.dialogs = this.vector(this.predicate, false);\nresult.messages = this.vector(this.predicate, false);\nresult.chats = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [4041467286, function() {\nconst result = { _: 'messages.dialogsNotModified' };\nresult.count = this.int();\nreturn result;\n  }],\n  [2356252295, function() {\nconst result = { _: 'messages.messages' };\nresult.messages = this.vector(this.predicate, false);\nresult.chats = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [3371027998, function() {\nconst result = { _: 'messages.messagesSlice' };\nresult.flags = this.int();\nresult.inexact = !!(result.flags & 2);\nresult.count = this.int();\nif (result.flags & 1) result.next_rate = this.int();\nresult.messages = this.vector(this.predicate, false);\nresult.chats = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [2569416247, function() {\nconst result = { _: 'messages.channelMessages' };\nresult.flags = this.int();\nresult.inexact = !!(result.flags & 2);\nresult.pts = this.int();\nresult.count = this.int();\nresult.messages = this.vector(this.predicate, false);\nresult.chats = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [1951620897, function() {\nconst result = { _: 'messages.messagesNotModified' };\nresult.count = this.int();\nreturn result;\n  }],\n  [1694474197, function() {\nconst result = { _: 'messages.chats' };\nresult.chats = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [2631405892, function() {\nconst result = { _: 'messages.chatsSlice' };\nresult.count = this.int();\nresult.chats = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [3856126364, function() {\nconst result = { _: 'messages.chatFull' };\nresult.full_chat = this.predicate();\nresult.chats = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [3025955281, function() {\nconst result = { _: 'messages.affectedHistory' };\nresult.pts = this.int();\nresult.pts_count = this.int();\nresult.offset = this.int();\nreturn result;\n  }],\n  [1474492012, function() {\nconst result = { _: 'inputMessagesFilterEmpty' };\nreturn result;\n  }],\n  [2517214492, function() {\nconst result = { _: 'inputMessagesFilterPhotos' };\nreturn result;\n  }],\n  [2680163941, function() {\nconst result = { _: 'inputMessagesFilterVideo' };\nreturn result;\n  }],\n  [1458172132, function() {\nconst result = { _: 'inputMessagesFilterPhotoVideo' };\nreturn result;\n  }],\n  [2665345416, function() {\nconst result = { _: 'inputMessagesFilterDocument' };\nreturn result;\n  }],\n  [2129714567, function() {\nconst result = { _: 'inputMessagesFilterUrl' };\nreturn result;\n  }],\n  [4291323271, function() {\nconst result = { _: 'inputMessagesFilterGif' };\nreturn result;\n  }],\n  [1358283666, function() {\nconst result = { _: 'inputMessagesFilterVoice' };\nreturn result;\n  }],\n  [928101534, function() {\nconst result = { _: 'inputMessagesFilterMusic' };\nreturn result;\n  }],\n  [975236280, function() {\nconst result = { _: 'inputMessagesFilterChatPhotos' };\nreturn result;\n  }],\n  [2160695144, function() {\nconst result = { _: 'inputMessagesFilterPhoneCalls' };\nresult.flags = this.int();\nresult.missed = !!(result.flags & 1);\nreturn result;\n  }],\n  [2054952868, function() {\nconst result = { _: 'inputMessagesFilterRoundVoice' };\nreturn result;\n  }],\n  [3041516115, function() {\nconst result = { _: 'inputMessagesFilterRoundVideo' };\nreturn result;\n  }],\n  [3254314650, function() {\nconst result = { _: 'inputMessagesFilterMyMentions' };\nreturn result;\n  }],\n  [3875695885, function() {\nconst result = { _: 'inputMessagesFilterGeo' };\nreturn result;\n  }],\n  [3764575107, function() {\nconst result = { _: 'inputMessagesFilterContacts' };\nreturn result;\n  }],\n  [522914557, function() {\nconst result = { _: 'updateNewMessage' };\nresult.message = this.predicate();\nresult.pts = this.int();\nresult.pts_count = this.int();\nreturn result;\n  }],\n  [1318109142, function() {\nconst result = { _: 'updateMessageID' };\nresult.id = this.int();\nresult.random_id = this.long();\nreturn result;\n  }],\n  [2718806245, function() {\nconst result = { _: 'updateDeleteMessages' };\nresult.messages = this.vector(this.int, false);\nresult.pts = this.int();\nresult.pts_count = this.int();\nreturn result;\n  }],\n  [1548249383, function() {\nconst result = { _: 'updateUserTyping' };\nresult.user_id = this.int();\nresult.action = this.predicate();\nreturn result;\n  }],\n  [2590370335, function() {\nconst result = { _: 'updateChatUserTyping' };\nresult.chat_id = this.int();\nresult.user_id = this.int();\nresult.action = this.predicate();\nreturn result;\n  }],\n  [125178264, function() {\nconst result = { _: 'updateChatParticipants' };\nresult.participants = this.predicate();\nreturn result;\n  }],\n  [469489699, function() {\nconst result = { _: 'updateUserStatus' };\nresult.user_id = this.int();\nresult.status = this.predicate();\nreturn result;\n  }],\n  [2805148531, function() {\nconst result = { _: 'updateUserName' };\nresult.user_id = this.int();\nresult.first_name = this.string();\nresult.last_name = this.string();\nresult.username = this.string();\nreturn result;\n  }],\n  [2503031564, function() {\nconst result = { _: 'updateUserPhoto' };\nresult.user_id = this.int();\nresult.date = this.int();\nresult.photo = this.predicate();\nresult.previous = this.predicate();\nreturn result;\n  }],\n  [314359194, function() {\nconst result = { _: 'updateNewEncryptedMessage' };\nresult.message = this.predicate();\nresult.qts = this.int();\nreturn result;\n  }],\n  [386986326, function() {\nconst result = { _: 'updateEncryptedChatTyping' };\nresult.chat_id = this.int();\nreturn result;\n  }],\n  [3030575245, function() {\nconst result = { _: 'updateEncryption' };\nresult.chat = this.predicate();\nresult.date = this.int();\nreturn result;\n  }],\n  [956179895, function() {\nconst result = { _: 'updateEncryptedMessagesRead' };\nresult.chat_id = this.int();\nresult.max_date = this.int();\nresult.date = this.int();\nreturn result;\n  }],\n  [3930787420, function() {\nconst result = { _: 'updateChatParticipantAdd' };\nresult.chat_id = this.int();\nresult.user_id = this.int();\nresult.inviter_id = this.int();\nresult.date = this.int();\nresult.version = this.int();\nreturn result;\n  }],\n  [1851755554, function() {\nconst result = { _: 'updateChatParticipantDelete' };\nresult.chat_id = this.int();\nresult.user_id = this.int();\nresult.version = this.int();\nreturn result;\n  }],\n  [2388564083, function() {\nconst result = { _: 'updateDcOptions' };\nresult.dc_options = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [2163009562, function() {\nconst result = { _: 'updateUserBlocked' };\nresult.user_id = this.int();\nresult.blocked = this.predicate();\nreturn result;\n  }],\n  [3200411887, function() {\nconst result = { _: 'updateNotifySettings' };\nresult.peer = this.predicate();\nresult.notify_settings = this.predicate();\nreturn result;\n  }],\n  [3957614617, function() {\nconst result = { _: 'updateServiceNotification' };\nresult.flags = this.int();\nresult.popup = !!(result.flags & 1);\nif (result.flags & 2) result.inbox_date = this.int();\nresult.type = this.string();\nresult.message = this.string();\nresult.media = this.predicate();\nresult.entities = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [3996854058, function() {\nconst result = { _: 'updatePrivacy' };\nresult.key = this.predicate();\nresult.rules = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [314130811, function() {\nconst result = { _: 'updateUserPhone' };\nresult.user_id = this.int();\nresult.phone = this.string();\nreturn result;\n  }],\n  [2627162079, function() {\nconst result = { _: 'updateReadHistoryInbox' };\nresult.flags = this.int();\nif (result.flags & 1) result.folder_id = this.int();\nresult.peer = this.predicate();\nresult.max_id = this.int();\nresult.still_unread_count = this.int();\nresult.pts = this.int();\nresult.pts_count = this.int();\nreturn result;\n  }],\n  [791617983, function() {\nconst result = { _: 'updateReadHistoryOutbox' };\nresult.peer = this.predicate();\nresult.max_id = this.int();\nresult.pts = this.int();\nresult.pts_count = this.int();\nreturn result;\n  }],\n  [2139689491, function() {\nconst result = { _: 'updateWebPage' };\nresult.webpage = this.predicate();\nresult.pts = this.int();\nresult.pts_count = this.int();\nreturn result;\n  }],\n  [1757493555, function() {\nconst result = { _: 'updateReadMessagesContents' };\nresult.messages = this.vector(this.int, false);\nresult.pts = this.int();\nresult.pts_count = this.int();\nreturn result;\n  }],\n  [3942934523, function() {\nconst result = { _: 'updateChannelTooLong' };\nresult.flags = this.int();\nresult.channel_id = this.int();\nif (result.flags & 1) result.pts = this.int();\nreturn result;\n  }],\n  [3067369046, function() {\nconst result = { _: 'updateChannel' };\nresult.channel_id = this.int();\nreturn result;\n  }],\n  [1656358105, function() {\nconst result = { _: 'updateNewChannelMessage' };\nresult.message = this.predicate();\nresult.pts = this.int();\nresult.pts_count = this.int();\nreturn result;\n  }],\n  [856380452, function() {\nconst result = { _: 'updateReadChannelInbox' };\nresult.flags = this.int();\nif (result.flags & 1) result.folder_id = this.int();\nresult.channel_id = this.int();\nresult.max_id = this.int();\nresult.still_unread_count = this.int();\nresult.pts = this.int();\nreturn result;\n  }],\n  [3279233481, function() {\nconst result = { _: 'updateDeleteChannelMessages' };\nresult.channel_id = this.int();\nresult.messages = this.vector(this.int, false);\nresult.pts = this.int();\nresult.pts_count = this.int();\nreturn result;\n  }],\n  [2560699211, function() {\nconst result = { _: 'updateChannelMessageViews' };\nresult.channel_id = this.int();\nresult.id = this.int();\nresult.views = this.int();\nreturn result;\n  }],\n  [3062896985, function() {\nconst result = { _: 'updateChatParticipantAdmin' };\nresult.chat_id = this.int();\nresult.user_id = this.int();\nresult.is_admin = this.predicate();\nresult.version = this.int();\nreturn result;\n  }],\n  [1753886890, function() {\nconst result = { _: 'updateNewStickerSet' };\nresult.stickerset = this.predicate();\nreturn result;\n  }],\n  [196268545, function() {\nconst result = { _: 'updateStickerSetsOrder' };\nresult.flags = this.int();\nresult.masks = !!(result.flags & 1);\nresult.order = this.vector(this.long, false);\nreturn result;\n  }],\n  [1135492588, function() {\nconst result = { _: 'updateStickerSets' };\nreturn result;\n  }],\n  [2473931806, function() {\nconst result = { _: 'updateSavedGifs' };\nreturn result;\n  }],\n  [1417832080, function() {\nconst result = { _: 'updateBotInlineQuery' };\nresult.flags = this.int();\nresult.query_id = this.long();\nresult.user_id = this.int();\nresult.query = this.string();\nif (result.flags & 1) result.geo = this.predicate();\nresult.offset = this.string();\nreturn result;\n  }],\n  [239663460, function() {\nconst result = { _: 'updateBotInlineSend' };\nresult.flags = this.int();\nresult.user_id = this.int();\nresult.query = this.string();\nif (result.flags & 1) result.geo = this.predicate();\nresult.id = this.string();\nif (result.flags & 2) result.msg_id = this.predicate();\nreturn result;\n  }],\n  [457133559, function() {\nconst result = { _: 'updateEditChannelMessage' };\nresult.message = this.predicate();\nresult.pts = this.int();\nresult.pts_count = this.int();\nreturn result;\n  }],\n  [2555978869, function() {\nconst result = { _: 'updateChannelPinnedMessage' };\nresult.channel_id = this.int();\nresult.id = this.int();\nreturn result;\n  }],\n  [3879028705, function() {\nconst result = { _: 'updateBotCallbackQuery' };\nresult.flags = this.int();\nresult.query_id = this.long();\nresult.user_id = this.int();\nresult.peer = this.predicate();\nresult.msg_id = this.int();\nresult.chat_instance = this.long();\nif (result.flags & 1) result.data = this.bytes();\nif (result.flags & 2) result.game_short_name = this.string();\nreturn result;\n  }],\n  [3825430691, function() {\nconst result = { _: 'updateEditMessage' };\nresult.message = this.predicate();\nresult.pts = this.int();\nresult.pts_count = this.int();\nreturn result;\n  }],\n  [4191320666, function() {\nconst result = { _: 'updateInlineBotCallbackQuery' };\nresult.flags = this.int();\nresult.query_id = this.long();\nresult.user_id = this.int();\nresult.msg_id = this.predicate();\nresult.chat_instance = this.long();\nif (result.flags & 1) result.data = this.bytes();\nif (result.flags & 2) result.game_short_name = this.string();\nreturn result;\n  }],\n  [634833351, function() {\nconst result = { _: 'updateReadChannelOutbox' };\nresult.channel_id = this.int();\nresult.max_id = this.int();\nreturn result;\n  }],\n  [3995842921, function() {\nconst result = { _: 'updateDraftMessage' };\nresult.peer = this.predicate();\nresult.draft = this.predicate();\nreturn result;\n  }],\n  [1461528386, function() {\nconst result = { _: 'updateReadFeaturedStickers' };\nreturn result;\n  }],\n  [2588027936, function() {\nconst result = { _: 'updateRecentStickers' };\nreturn result;\n  }],\n  [2720652550, function() {\nconst result = { _: 'updateConfig' };\nreturn result;\n  }],\n  [861169551, function() {\nconst result = { _: 'updatePtsChanged' };\nreturn result;\n  }],\n  [1081547008, function() {\nconst result = { _: 'updateChannelWebPage' };\nresult.channel_id = this.int();\nresult.webpage = this.predicate();\nresult.pts = this.int();\nresult.pts_count = this.int();\nreturn result;\n  }],\n  [1852826908, function() {\nconst result = { _: 'updateDialogPinned' };\nresult.flags = this.int();\nresult.pinned = !!(result.flags & 1);\nif (result.flags & 2) result.folder_id = this.int();\nresult.peer = this.predicate();\nreturn result;\n  }],\n  [4195302562, function() {\nconst result = { _: 'updatePinnedDialogs' };\nresult.flags = this.int();\nif (result.flags & 2) result.folder_id = this.int();\nif (result.flags & 1) result.order = this.vector(this.predicate);\nreturn result;\n  }],\n  [2199371971, function() {\nconst result = { _: 'updateBotWebhookJSON' };\nresult.data = this.predicate();\nreturn result;\n  }],\n  [2610053286, function() {\nconst result = { _: 'updateBotWebhookJSONQuery' };\nresult.query_id = this.long();\nresult.data = this.predicate();\nresult.timeout = this.int();\nreturn result;\n  }],\n  [3771582784, function() {\nconst result = { _: 'updateBotShippingQuery' };\nresult.query_id = this.long();\nresult.user_id = this.int();\nresult.payload = this.bytes();\nresult.shipping_address = this.predicate();\nreturn result;\n  }],\n  [1563376297, function() {\nconst result = { _: 'updateBotPrecheckoutQuery' };\nresult.flags = this.int();\nresult.query_id = this.long();\nresult.user_id = this.int();\nresult.payload = this.bytes();\nif (result.flags & 1) result.info = this.predicate();\nif (result.flags & 2) result.shipping_option_id = this.string();\nresult.currency = this.string();\nresult.total_amount = this.long();\nreturn result;\n  }],\n  [2869914398, function() {\nconst result = { _: 'updatePhoneCall' };\nresult.phone_call = this.predicate();\nreturn result;\n  }],\n  [1180041828, function() {\nconst result = { _: 'updateLangPackTooLong' };\nresult.lang_code = this.string();\nreturn result;\n  }],\n  [1442983757, function() {\nconst result = { _: 'updateLangPack' };\nresult.difference = this.predicate();\nreturn result;\n  }],\n  [3843135853, function() {\nconst result = { _: 'updateFavedStickers' };\nreturn result;\n  }],\n  [2307472197, function() {\nconst result = { _: 'updateChannelReadMessagesContents' };\nresult.channel_id = this.int();\nresult.messages = this.vector(this.int, false);\nreturn result;\n  }],\n  [1887741886, function() {\nconst result = { _: 'updateContactsReset' };\nreturn result;\n  }],\n  [1893427255, function() {\nconst result = { _: 'updateChannelAvailableMessages' };\nresult.channel_id = this.int();\nresult.available_min_id = this.int();\nreturn result;\n  }],\n  [3781450179, function() {\nconst result = { _: 'updateDialogUnreadMark' };\nresult.flags = this.int();\nresult.unread = !!(result.flags & 1);\nresult.peer = this.predicate();\nreturn result;\n  }],\n  [1279515160, function() {\nconst result = { _: 'updateUserPinnedMessage' };\nresult.user_id = this.int();\nresult.id = this.int();\nreturn result;\n  }],\n  [3775771465, function() {\nconst result = { _: 'updateChatPinnedMessage' };\nresult.chat_id = this.int();\nresult.id = this.int();\nresult.version = this.int();\nreturn result;\n  }],\n  [2896258427, function() {\nconst result = { _: 'updateMessagePoll' };\nresult.flags = this.int();\nresult.poll_id = this.long();\nif (result.flags & 1) result.poll = this.predicate();\nresult.results = this.predicate();\nreturn result;\n  }],\n  [1421875280, function() {\nconst result = { _: 'updateChatDefaultBannedRights' };\nresult.peer = this.predicate();\nresult.default_banned_rights = this.predicate();\nresult.version = this.int();\nreturn result;\n  }],\n  [422972864, function() {\nconst result = { _: 'updateFolderPeers' };\nresult.folder_peers = this.vector(this.predicate, false);\nresult.pts = this.int();\nresult.pts_count = this.int();\nreturn result;\n  }],\n  [1786671974, function() {\nconst result = { _: 'updatePeerSettings' };\nresult.peer = this.predicate();\nresult.settings = this.predicate();\nreturn result;\n  }],\n  [3031420848, function() {\nconst result = { _: 'updatePeerLocated' };\nresult.peers = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [967122427, function() {\nconst result = { _: 'updateNewScheduledMessage' };\nresult.message = this.predicate();\nreturn result;\n  }],\n  [2424728814, function() {\nconst result = { _: 'updateDeleteScheduledMessages' };\nresult.peer = this.predicate();\nresult.messages = this.vector(this.int, false);\nreturn result;\n  }],\n  [2182544291, function() {\nconst result = { _: 'updateTheme' };\nresult.theme = this.predicate();\nreturn result;\n  }],\n  [2267003193, function() {\nconst result = { _: 'updateGeoLiveViewed' };\nresult.peer = this.predicate();\nresult.msg_id = this.int();\nreturn result;\n  }],\n  [1448076945, function() {\nconst result = { _: 'updateLoginToken' };\nreturn result;\n  }],\n  [1123585836, function() {\nconst result = { _: 'updateMessagePollVote' };\nresult.poll_id = this.long();\nresult.user_id = this.int();\nresult.options = this.vector(this.bytes, false);\nreturn result;\n  }],\n  [654302845, function() {\nconst result = { _: 'updateDialogFilter' };\nresult.flags = this.int();\nresult.id = this.int();\nif (result.flags & 1) result.filter = this.predicate();\nreturn result;\n  }],\n  [2782339333, function() {\nconst result = { _: 'updateDialogFilterOrder' };\nresult.order = this.vector(this.int, false);\nreturn result;\n  }],\n  [889491791, function() {\nconst result = { _: 'updateDialogFilters' };\nreturn result;\n  }],\n  [2775329342, function() {\nconst result = { _: 'updates.state' };\nresult.pts = this.int();\nresult.qts = this.int();\nresult.date = this.int();\nresult.seq = this.int();\nresult.unread_count = this.int();\nreturn result;\n  }],\n  [1567990072, function() {\nconst result = { _: 'updates.differenceEmpty' };\nresult.date = this.int();\nresult.seq = this.int();\nreturn result;\n  }],\n  [16030880, function() {\nconst result = { _: 'updates.difference' };\nresult.new_messages = this.vector(this.predicate, false);\nresult.new_encrypted_messages = this.vector(this.predicate, false);\nresult.other_updates = this.vector(this.predicate, false);\nresult.chats = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nresult.state = this.predicate();\nreturn result;\n  }],\n  [2835028353, function() {\nconst result = { _: 'updates.differenceSlice' };\nresult.new_messages = this.vector(this.predicate, false);\nresult.new_encrypted_messages = this.vector(this.predicate, false);\nresult.other_updates = this.vector(this.predicate, false);\nresult.chats = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nresult.intermediate_state = this.predicate();\nreturn result;\n  }],\n  [1258196845, function() {\nconst result = { _: 'updates.differenceTooLong' };\nresult.pts = this.int();\nreturn result;\n  }],\n  [3809980286, function() {\nconst result = { _: 'updatesTooLong' };\nreturn result;\n  }],\n  [2437922577, function() {\nconst result = { _: 'updateShortMessage' };\nresult.flags = this.int();\nresult.out = !!(result.flags & 2);\nresult.mentioned = !!(result.flags & 16);\nresult.media_unread = !!(result.flags & 32);\nresult.silent = !!(result.flags & 8192);\nresult.id = this.int();\nresult.user_id = this.int();\nresult.message = this.string();\nresult.pts = this.int();\nresult.pts_count = this.int();\nresult.date = this.int();\nif (result.flags & 4) result.fwd_from = this.predicate();\nif (result.flags & 2048) result.via_bot_id = this.int();\nif (result.flags & 8) result.reply_to_msg_id = this.int();\nif (result.flags & 128) result.entities = this.vector(this.predicate);\nreturn result;\n  }],\n  [377562760, function() {\nconst result = { _: 'updateShortChatMessage' };\nresult.flags = this.int();\nresult.out = !!(result.flags & 2);\nresult.mentioned = !!(result.flags & 16);\nresult.media_unread = !!(result.flags & 32);\nresult.silent = !!(result.flags & 8192);\nresult.id = this.int();\nresult.from_id = this.int();\nresult.chat_id = this.int();\nresult.message = this.string();\nresult.pts = this.int();\nresult.pts_count = this.int();\nresult.date = this.int();\nif (result.flags & 4) result.fwd_from = this.predicate();\nif (result.flags & 2048) result.via_bot_id = this.int();\nif (result.flags & 8) result.reply_to_msg_id = this.int();\nif (result.flags & 128) result.entities = this.vector(this.predicate);\nreturn result;\n  }],\n  [2027216577, function() {\nconst result = { _: 'updateShort' };\nresult.update = this.predicate();\nresult.date = this.int();\nreturn result;\n  }],\n  [1918567619, function() {\nconst result = { _: 'updatesCombined' };\nresult.updates = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nresult.chats = this.vector(this.predicate, false);\nresult.date = this.int();\nresult.seq_start = this.int();\nresult.seq = this.int();\nreturn result;\n  }],\n  [1957577280, function() {\nconst result = { _: 'updates' };\nresult.updates = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nresult.chats = this.vector(this.predicate, false);\nresult.date = this.int();\nresult.seq = this.int();\nreturn result;\n  }],\n  [301019932, function() {\nconst result = { _: 'updateShortSentMessage' };\nresult.flags = this.int();\nresult.out = !!(result.flags & 2);\nresult.id = this.int();\nresult.pts = this.int();\nresult.pts_count = this.int();\nresult.date = this.int();\nif (result.flags & 512) result.media = this.predicate();\nif (result.flags & 128) result.entities = this.vector(this.predicate);\nreturn result;\n  }],\n  [2378853029, function() {\nconst result = { _: 'photos.photos' };\nresult.photos = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [352657236, function() {\nconst result = { _: 'photos.photosSlice' };\nresult.count = this.int();\nresult.photos = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [539045032, function() {\nconst result = { _: 'photos.photo' };\nresult.photo = this.predicate();\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [157948117, function() {\nconst result = { _: 'upload.file' };\nresult.type = this.predicate();\nresult.mtime = this.int();\nresult.bytes = this.bytes();\nreturn result;\n  }],\n  [4052539972, function() {\nconst result = { _: 'upload.fileCdnRedirect' };\nresult.dc_id = this.int();\nresult.file_token = this.bytes();\nresult.encryption_key = this.bytes();\nresult.encryption_iv = this.bytes();\nresult.file_hashes = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [414687501, function() {\nconst result = { _: 'dcOption' };\nresult.flags = this.int();\nresult.ipv6 = !!(result.flags & 1);\nresult.media_only = !!(result.flags & 2);\nresult.tcpo_only = !!(result.flags & 4);\nresult.cdn = !!(result.flags & 8);\nresult.static = !!(result.flags & 16);\nresult.id = this.int();\nresult.ip_address = this.string();\nresult.port = this.int();\nif (result.flags & 1024) result.secret = this.bytes();\nreturn result;\n  }],\n  [856375399, function() {\nconst result = { _: 'config' };\nresult.flags = this.int();\nresult.phonecalls_enabled = !!(result.flags & 2);\nresult.default_p2p_contacts = !!(result.flags & 8);\nresult.preload_featured_stickers = !!(result.flags & 16);\nresult.ignore_phone_entities = !!(result.flags & 32);\nresult.revoke_pm_inbox = !!(result.flags & 64);\nresult.blocked_mode = !!(result.flags & 256);\nresult.pfs_enabled = !!(result.flags & 8192);\nresult.date = this.int();\nresult.expires = this.int();\nresult.test_mode = this.predicate();\nresult.this_dc = this.int();\nresult.dc_options = this.vector(this.predicate, false);\nresult.dc_txt_domain_name = this.string();\nresult.chat_size_max = this.int();\nresult.megagroup_size_max = this.int();\nresult.forwarded_count_max = this.int();\nresult.online_update_period_ms = this.int();\nresult.offline_blur_timeout_ms = this.int();\nresult.offline_idle_timeout_ms = this.int();\nresult.online_cloud_timeout_ms = this.int();\nresult.notify_cloud_delay_ms = this.int();\nresult.notify_default_delay_ms = this.int();\nresult.push_chat_period_ms = this.int();\nresult.push_chat_limit = this.int();\nresult.saved_gifs_limit = this.int();\nresult.edit_time_limit = this.int();\nresult.revoke_time_limit = this.int();\nresult.revoke_pm_time_limit = this.int();\nresult.rating_e_decay = this.int();\nresult.stickers_recent_limit = this.int();\nresult.stickers_faved_limit = this.int();\nresult.channels_read_media_period = this.int();\nif (result.flags & 1) result.tmp_sessions = this.int();\nresult.pinned_dialogs_count_max = this.int();\nresult.pinned_infolder_count_max = this.int();\nresult.call_receive_timeout_ms = this.int();\nresult.call_ring_timeout_ms = this.int();\nresult.call_connect_timeout_ms = this.int();\nresult.call_packet_timeout_ms = this.int();\nresult.me_url_prefix = this.string();\nif (result.flags & 128) result.autoupdate_url_prefix = this.string();\nif (result.flags & 512) result.gif_search_username = this.string();\nif (result.flags & 1024) result.venue_search_username = this.string();\nif (result.flags & 2048) result.img_search_username = this.string();\nif (result.flags & 4096) result.static_maps_provider = this.string();\nresult.caption_length_max = this.int();\nresult.message_length_max = this.int();\nresult.webfile_dc_id = this.int();\nif (result.flags & 4) result.suggested_lang_code = this.string();\nif (result.flags & 4) result.lang_pack_version = this.int();\nif (result.flags & 4) result.base_lang_pack_version = this.int();\nreturn result;\n  }],\n  [2384074613, function() {\nconst result = { _: 'nearestDc' };\nresult.country = this.string();\nresult.this_dc = this.int();\nresult.nearest_dc = this.int();\nreturn result;\n  }],\n  [497489295, function() {\nconst result = { _: 'help.appUpdate' };\nresult.flags = this.int();\nresult.can_not_skip = !!(result.flags & 1);\nresult.id = this.int();\nresult.version = this.string();\nresult.text = this.string();\nresult.entities = this.vector(this.predicate, false);\nif (result.flags & 2) result.document = this.predicate();\nif (result.flags & 4) result.url = this.string();\nreturn result;\n  }],\n  [3294258486, function() {\nconst result = { _: 'help.noAppUpdate' };\nreturn result;\n  }],\n  [415997816, function() {\nconst result = { _: 'help.inviteText' };\nresult.message = this.string();\nreturn result;\n  }],\n  [2877210784, function() {\nconst result = { _: 'encryptedChatEmpty' };\nresult.id = this.int();\nreturn result;\n  }],\n  [1006044124, function() {\nconst result = { _: 'encryptedChatWaiting' };\nresult.id = this.int();\nresult.access_hash = this.long();\nresult.date = this.int();\nresult.admin_id = this.int();\nresult.participant_id = this.int();\nreturn result;\n  }],\n  [3363328638, function() {\nconst result = { _: 'encryptedChatRequested' };\nresult.id = this.int();\nresult.access_hash = this.long();\nresult.date = this.int();\nresult.admin_id = this.int();\nresult.participant_id = this.int();\nresult.g_a = this.bytes();\nreturn result;\n  }],\n  [4199992886, function() {\nconst result = { _: 'encryptedChat' };\nresult.id = this.int();\nresult.access_hash = this.long();\nresult.date = this.int();\nresult.admin_id = this.int();\nresult.participant_id = this.int();\nresult.g_a_or_b = this.bytes();\nresult.key_fingerprint = this.long();\nreturn result;\n  }],\n  [332848423, function() {\nconst result = { _: 'encryptedChatDiscarded' };\nresult.id = this.int();\nreturn result;\n  }],\n  [4047615457, function() {\nconst result = { _: 'inputEncryptedChat' };\nresult.chat_id = this.int();\nresult.access_hash = this.long();\nreturn result;\n  }],\n  [3256830334, function() {\nconst result = { _: 'encryptedFileEmpty' };\nreturn result;\n  }],\n  [1248893260, function() {\nconst result = { _: 'encryptedFile' };\nresult.id = this.long();\nresult.access_hash = this.long();\nresult.size = this.int();\nresult.dc_id = this.int();\nresult.key_fingerprint = this.int();\nreturn result;\n  }],\n  [406307684, function() {\nconst result = { _: 'inputEncryptedFileEmpty' };\nreturn result;\n  }],\n  [1690108678, function() {\nconst result = { _: 'inputEncryptedFileUploaded' };\nresult.id = this.long();\nresult.parts = this.int();\nresult.md5_checksum = this.string();\nresult.key_fingerprint = this.int();\nreturn result;\n  }],\n  [1511503333, function() {\nconst result = { _: 'inputEncryptedFile' };\nresult.id = this.long();\nresult.access_hash = this.long();\nreturn result;\n  }],\n  [767652808, function() {\nconst result = { _: 'inputEncryptedFileBigUploaded' };\nresult.id = this.long();\nresult.parts = this.int();\nresult.key_fingerprint = this.int();\nreturn result;\n  }],\n  [3977822488, function() {\nconst result = { _: 'encryptedMessage' };\nresult.random_id = this.long();\nresult.chat_id = this.int();\nresult.date = this.int();\nresult.bytes = this.bytes();\nresult.file = this.predicate();\nreturn result;\n  }],\n  [594758406, function() {\nconst result = { _: 'encryptedMessageService' };\nresult.random_id = this.long();\nresult.chat_id = this.int();\nresult.date = this.int();\nresult.bytes = this.bytes();\nreturn result;\n  }],\n  [3236054581, function() {\nconst result = { _: 'messages.dhConfigNotModified' };\nresult.random = this.bytes();\nreturn result;\n  }],\n  [740433629, function() {\nconst result = { _: 'messages.dhConfig' };\nresult.g = this.int();\nresult.p = this.bytes();\nresult.version = this.int();\nresult.random = this.bytes();\nreturn result;\n  }],\n  [1443858741, function() {\nconst result = { _: 'messages.sentEncryptedMessage' };\nresult.date = this.int();\nreturn result;\n  }],\n  [2492727090, function() {\nconst result = { _: 'messages.sentEncryptedFile' };\nresult.date = this.int();\nresult.file = this.predicate();\nreturn result;\n  }],\n  [1928391342, function() {\nconst result = { _: 'inputDocumentEmpty' };\nreturn result;\n  }],\n  [448771445, function() {\nconst result = { _: 'inputDocument' };\nresult.id = this.long();\nresult.access_hash = this.long();\nresult.file_reference = this.bytes();\nreturn result;\n  }],\n  [922273905, function() {\nconst result = { _: 'documentEmpty' };\nresult.id = this.long();\nreturn result;\n  }],\n  [2611125441, function() {\nconst result = { _: 'document' };\nresult.flags = this.int();\nresult.id = this.long();\nresult.access_hash = this.long();\nresult.file_reference = this.bytes();\nresult.date = this.int();\nresult.mime_type = this.string();\nresult.size = this.int();\nif (result.flags & 1) result.thumbs = this.vector(this.predicate);\nresult.dc_id = this.int();\nresult.attributes = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [398898678, function() {\nconst result = { _: 'help.support' };\nresult.phone_number = this.string();\nresult.user = this.predicate();\nreturn result;\n  }],\n  [2681474008, function() {\nconst result = { _: 'notifyPeer' };\nresult.peer = this.predicate();\nreturn result;\n  }],\n  [3033021260, function() {\nconst result = { _: 'notifyUsers' };\nreturn result;\n  }],\n  [3221737155, function() {\nconst result = { _: 'notifyChats' };\nreturn result;\n  }],\n  [3591563503, function() {\nconst result = { _: 'notifyBroadcasts' };\nreturn result;\n  }],\n  [381645902, function() {\nconst result = { _: 'sendMessageTypingAction' };\nreturn result;\n  }],\n  [4250847477, function() {\nconst result = { _: 'sendMessageCancelAction' };\nreturn result;\n  }],\n  [2710034031, function() {\nconst result = { _: 'sendMessageRecordVideoAction' };\nreturn result;\n  }],\n  [3916839660, function() {\nconst result = { _: 'sendMessageUploadVideoAction' };\nresult.progress = this.int();\nreturn result;\n  }],\n  [3576656887, function() {\nconst result = { _: 'sendMessageRecordAudioAction' };\nreturn result;\n  }],\n  [4082227115, function() {\nconst result = { _: 'sendMessageUploadAudioAction' };\nresult.progress = this.int();\nreturn result;\n  }],\n  [3520285222, function() {\nconst result = { _: 'sendMessageUploadPhotoAction' };\nresult.progress = this.int();\nreturn result;\n  }],\n  [2852968932, function() {\nconst result = { _: 'sendMessageUploadDocumentAction' };\nresult.progress = this.int();\nreturn result;\n  }],\n  [393186209, function() {\nconst result = { _: 'sendMessageGeoLocationAction' };\nreturn result;\n  }],\n  [1653390447, function() {\nconst result = { _: 'sendMessageChooseContactAction' };\nreturn result;\n  }],\n  [3714748232, function() {\nconst result = { _: 'sendMessageGamePlayAction' };\nreturn result;\n  }],\n  [2297593788, function() {\nconst result = { _: 'sendMessageRecordRoundAction' };\nreturn result;\n  }],\n  [608050278, function() {\nconst result = { _: 'sendMessageUploadRoundAction' };\nresult.progress = this.int();\nreturn result;\n  }],\n  [3004386717, function() {\nconst result = { _: 'contacts.found' };\nresult.my_results = this.vector(this.predicate, false);\nresult.results = this.vector(this.predicate, false);\nresult.chats = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [1335282456, function() {\nconst result = { _: 'inputPrivacyKeyStatusTimestamp' };\nreturn result;\n  }],\n  [3187344422, function() {\nconst result = { _: 'inputPrivacyKeyChatInvite' };\nreturn result;\n  }],\n  [4206550111, function() {\nconst result = { _: 'inputPrivacyKeyPhoneCall' };\nreturn result;\n  }],\n  [3684593874, function() {\nconst result = { _: 'inputPrivacyKeyPhoneP2P' };\nreturn result;\n  }],\n  [2765966344, function() {\nconst result = { _: 'inputPrivacyKeyForwards' };\nreturn result;\n  }],\n  [1461304012, function() {\nconst result = { _: 'inputPrivacyKeyProfilePhoto' };\nreturn result;\n  }],\n  [55761658, function() {\nconst result = { _: 'inputPrivacyKeyPhoneNumber' };\nreturn result;\n  }],\n  [3508640733, function() {\nconst result = { _: 'inputPrivacyKeyAddedByPhone' };\nreturn result;\n  }],\n  [3157175088, function() {\nconst result = { _: 'privacyKeyStatusTimestamp' };\nreturn result;\n  }],\n  [1343122938, function() {\nconst result = { _: 'privacyKeyChatInvite' };\nreturn result;\n  }],\n  [1030105979, function() {\nconst result = { _: 'privacyKeyPhoneCall' };\nreturn result;\n  }],\n  [961092808, function() {\nconst result = { _: 'privacyKeyPhoneP2P' };\nreturn result;\n  }],\n  [1777096355, function() {\nconst result = { _: 'privacyKeyForwards' };\nreturn result;\n  }],\n  [2517966829, function() {\nconst result = { _: 'privacyKeyProfilePhoto' };\nreturn result;\n  }],\n  [3516589165, function() {\nconst result = { _: 'privacyKeyPhoneNumber' };\nreturn result;\n  }],\n  [1124062251, function() {\nconst result = { _: 'privacyKeyAddedByPhone' };\nreturn result;\n  }],\n  [218751099, function() {\nconst result = { _: 'inputPrivacyValueAllowContacts' };\nreturn result;\n  }],\n  [407582158, function() {\nconst result = { _: 'inputPrivacyValueAllowAll' };\nreturn result;\n  }],\n  [320652927, function() {\nconst result = { _: 'inputPrivacyValueAllowUsers' };\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [195371015, function() {\nconst result = { _: 'inputPrivacyValueDisallowContacts' };\nreturn result;\n  }],\n  [3597362889, function() {\nconst result = { _: 'inputPrivacyValueDisallowAll' };\nreturn result;\n  }],\n  [2417034343, function() {\nconst result = { _: 'inputPrivacyValueDisallowUsers' };\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [1283572154, function() {\nconst result = { _: 'inputPrivacyValueAllowChatParticipants' };\nresult.chats = this.vector(this.int, false);\nreturn result;\n  }],\n  [3626197935, function() {\nconst result = { _: 'inputPrivacyValueDisallowChatParticipants' };\nresult.chats = this.vector(this.int, false);\nreturn result;\n  }],\n  [4294843308, function() {\nconst result = { _: 'privacyValueAllowContacts' };\nreturn result;\n  }],\n  [1698855810, function() {\nconst result = { _: 'privacyValueAllowAll' };\nreturn result;\n  }],\n  [1297858060, function() {\nconst result = { _: 'privacyValueAllowUsers' };\nresult.users = this.vector(this.int, false);\nreturn result;\n  }],\n  [4169726490, function() {\nconst result = { _: 'privacyValueDisallowContacts' };\nreturn result;\n  }],\n  [2339628899, function() {\nconst result = { _: 'privacyValueDisallowAll' };\nreturn result;\n  }],\n  [209668535, function() {\nconst result = { _: 'privacyValueDisallowUsers' };\nresult.users = this.vector(this.int, false);\nreturn result;\n  }],\n  [415136107, function() {\nconst result = { _: 'privacyValueAllowChatParticipants' };\nresult.chats = this.vector(this.int, false);\nreturn result;\n  }],\n  [2897086096, function() {\nconst result = { _: 'privacyValueDisallowChatParticipants' };\nresult.chats = this.vector(this.int, false);\nreturn result;\n  }],\n  [1352683077, function() {\nconst result = { _: 'account.privacyRules' };\nresult.rules = this.vector(this.predicate, false);\nresult.chats = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [3100684255, function() {\nconst result = { _: 'accountDaysTTL' };\nresult.days = this.int();\nreturn result;\n  }],\n  [1815593308, function() {\nconst result = { _: 'documentAttributeImageSize' };\nresult.w = this.int();\nresult.h = this.int();\nreturn result;\n  }],\n  [297109817, function() {\nconst result = { _: 'documentAttributeAnimated' };\nreturn result;\n  }],\n  [1662637586, function() {\nconst result = { _: 'documentAttributeSticker' };\nresult.flags = this.int();\nresult.mask = !!(result.flags & 2);\nresult.alt = this.string();\nresult.stickerset = this.predicate();\nif (result.flags & 1) result.mask_coords = this.predicate();\nreturn result;\n  }],\n  [250621158, function() {\nconst result = { _: 'documentAttributeVideo' };\nresult.flags = this.int();\nresult.round_message = !!(result.flags & 1);\nresult.supports_streaming = !!(result.flags & 2);\nresult.duration = this.int();\nresult.w = this.int();\nresult.h = this.int();\nreturn result;\n  }],\n  [2555574726, function() {\nconst result = { _: 'documentAttributeAudio' };\nresult.flags = this.int();\nresult.voice = !!(result.flags & 1024);\nresult.duration = this.int();\nif (result.flags & 1) result.title = this.string();\nif (result.flags & 2) result.performer = this.string();\nif (result.flags & 4) result.waveform = this.bytes();\nreturn result;\n  }],\n  [358154344, function() {\nconst result = { _: 'documentAttributeFilename' };\nresult.file_name = this.string();\nreturn result;\n  }],\n  [2550256375, function() {\nconst result = { _: 'documentAttributeHasStickers' };\nreturn result;\n  }],\n  [4050950690, function() {\nconst result = { _: 'messages.stickersNotModified' };\nreturn result;\n  }],\n  [3831077821, function() {\nconst result = { _: 'messages.stickers' };\nresult.hash = this.int();\nresult.stickers = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [313694676, function() {\nconst result = { _: 'stickerPack' };\nresult.emoticon = this.string();\nresult.documents = this.vector(this.long, false);\nreturn result;\n  }],\n  [3898999491, function() {\nconst result = { _: 'messages.allStickersNotModified' };\nreturn result;\n  }],\n  [3992797279, function() {\nconst result = { _: 'messages.allStickers' };\nresult.hash = this.int();\nresult.sets = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [2228326789, function() {\nconst result = { _: 'messages.affectedMessages' };\nresult.pts = this.int();\nresult.pts_count = this.int();\nreturn result;\n  }],\n  [3943987176, function() {\nconst result = { _: 'webPageEmpty' };\nresult.id = this.long();\nreturn result;\n  }],\n  [3313949212, function() {\nconst result = { _: 'webPagePending' };\nresult.id = this.long();\nresult.date = this.int();\nreturn result;\n  }],\n  [3902555570, function() {\nconst result = { _: 'webPage' };\nresult.flags = this.int();\nresult.id = this.long();\nresult.url = this.string();\nresult.display_url = this.string();\nresult.hash = this.int();\nif (result.flags & 1) result.type = this.string();\nif (result.flags & 2) result.site_name = this.string();\nif (result.flags & 4) result.title = this.string();\nif (result.flags & 8) result.description = this.string();\nif (result.flags & 16) result.photo = this.predicate();\nif (result.flags & 32) result.embed_url = this.string();\nif (result.flags & 32) result.embed_type = this.string();\nif (result.flags & 64) result.embed_width = this.int();\nif (result.flags & 64) result.embed_height = this.int();\nif (result.flags & 128) result.duration = this.int();\nif (result.flags & 256) result.author = this.string();\nif (result.flags & 512) result.document = this.predicate();\nif (result.flags & 1024) result.cached_page = this.predicate();\nif (result.flags & 4096) result.attributes = this.vector(this.predicate);\nreturn result;\n  }],\n  [1930545681, function() {\nconst result = { _: 'webPageNotModified' };\nresult.flags = this.int();\nif (result.flags & 1) result.cached_page_views = this.int();\nreturn result;\n  }],\n  [2902578717, function() {\nconst result = { _: 'authorization' };\nresult.flags = this.int();\nresult.current = !!(result.flags & 1);\nresult.official_app = !!(result.flags & 2);\nresult.password_pending = !!(result.flags & 4);\nresult.hash = this.long();\nresult.device_model = this.string();\nresult.platform = this.string();\nresult.system_version = this.string();\nresult.api_id = this.int();\nresult.app_name = this.string();\nresult.app_version = this.string();\nresult.date_created = this.int();\nresult.date_active = this.int();\nresult.ip = this.string();\nresult.country = this.string();\nresult.region = this.string();\nreturn result;\n  }],\n  [307276766, function() {\nconst result = { _: 'account.authorizations' };\nresult.authorizations = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [2904965624, function() {\nconst result = { _: 'account.password' };\nresult.flags = this.int();\nresult.has_recovery = !!(result.flags & 1);\nresult.has_secure_values = !!(result.flags & 2);\nresult.has_password = !!(result.flags & 4);\nif (result.flags & 4) result.current_algo = this.predicate();\nif (result.flags & 4) result.srp_B = this.bytes();\nif (result.flags & 4) result.srp_id = this.long();\nif (result.flags & 8) result.hint = this.string();\nif (result.flags & 16) result.email_unconfirmed_pattern = this.string();\nresult.new_algo = this.predicate();\nresult.new_secure_algo = this.predicate();\nresult.secure_random = this.bytes();\nreturn result;\n  }],\n  [2589733861, function() {\nconst result = { _: 'account.passwordSettings' };\nresult.flags = this.int();\nif (result.flags & 1) result.email = this.string();\nif (result.flags & 2) result.secure_settings = this.predicate();\nreturn result;\n  }],\n  [3258394569, function() {\nconst result = { _: 'account.passwordInputSettings' };\nresult.flags = this.int();\nif (result.flags & 1) result.new_algo = this.predicate();\nif (result.flags & 1) result.new_password_hash = this.bytes();\nif (result.flags & 1) result.hint = this.string();\nif (result.flags & 2) result.email = this.string();\nif (result.flags & 4) result.new_secure_settings = this.predicate();\nreturn result;\n  }],\n  [326715557, function() {\nconst result = { _: 'auth.passwordRecovery' };\nresult.email_pattern = this.string();\nreturn result;\n  }],\n  [2743383929, function() {\nconst result = { _: 'receivedNotifyMessage' };\nresult.id = this.int();\nresult.flags = this.int();\nreturn result;\n  }],\n  [1776236393, function() {\nconst result = { _: 'chatInviteEmpty' };\nreturn result;\n  }],\n  [4230874556, function() {\nconst result = { _: 'chatInviteExported' };\nresult.link = this.string();\nreturn result;\n  }],\n  [1516793212, function() {\nconst result = { _: 'chatInviteAlready' };\nresult.chat = this.predicate();\nreturn result;\n  }],\n  [3754096014, function() {\nconst result = { _: 'chatInvite' };\nresult.flags = this.int();\nresult.channel = !!(result.flags & 1);\nresult.broadcast = !!(result.flags & 2);\nresult.public = !!(result.flags & 4);\nresult.megagroup = !!(result.flags & 8);\nresult.title = this.string();\nresult.photo = this.predicate();\nresult.participants_count = this.int();\nif (result.flags & 16) result.participants = this.vector(this.predicate);\nreturn result;\n  }],\n  [4290128789, function() {\nconst result = { _: 'inputStickerSetEmpty' };\nreturn result;\n  }],\n  [2649203305, function() {\nconst result = { _: 'inputStickerSetID' };\nresult.id = this.long();\nresult.access_hash = this.long();\nreturn result;\n  }],\n  [2250033312, function() {\nconst result = { _: 'inputStickerSetShortName' };\nresult.short_name = this.string();\nreturn result;\n  }],\n  [42402760, function() {\nconst result = { _: 'inputStickerSetAnimatedEmoji' };\nreturn result;\n  }],\n  [3867103758, function() {\nconst result = { _: 'inputStickerSetDice' };\nresult.emoticon = this.string();\nreturn result;\n  }],\n  [4004802343, function() {\nconst result = { _: 'stickerSet' };\nresult.flags = this.int();\nresult.archived = !!(result.flags & 2);\nresult.official = !!(result.flags & 4);\nresult.masks = !!(result.flags & 8);\nresult.animated = !!(result.flags & 32);\nif (result.flags & 1) result.installed_date = this.int();\nresult.id = this.long();\nresult.access_hash = this.long();\nresult.title = this.string();\nresult.short_name = this.string();\nif (result.flags & 16) result.thumb = this.predicate();\nif (result.flags & 16) result.thumb_dc_id = this.int();\nresult.count = this.int();\nresult.hash = this.int();\nreturn result;\n  }],\n  [3054118054, function() {\nconst result = { _: 'messages.stickerSet' };\nresult.set = this.predicate();\nresult.packs = this.vector(this.predicate, false);\nresult.documents = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [3262826695, function() {\nconst result = { _: 'botCommand' };\nresult.command = this.string();\nresult.description = this.string();\nreturn result;\n  }],\n  [2565348666, function() {\nconst result = { _: 'botInfo' };\nresult.user_id = this.int();\nresult.description = this.string();\nresult.commands = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [2734311552, function() {\nconst result = { _: 'keyboardButton' };\nresult.text = this.string();\nreturn result;\n  }],\n  [629866245, function() {\nconst result = { _: 'keyboardButtonUrl' };\nresult.text = this.string();\nresult.url = this.string();\nreturn result;\n  }],\n  [1748655686, function() {\nconst result = { _: 'keyboardButtonCallback' };\nresult.text = this.string();\nresult.data = this.bytes();\nreturn result;\n  }],\n  [2976541737, function() {\nconst result = { _: 'keyboardButtonRequestPhone' };\nresult.text = this.string();\nreturn result;\n  }],\n  [4235815743, function() {\nconst result = { _: 'keyboardButtonRequestGeoLocation' };\nresult.text = this.string();\nreturn result;\n  }],\n  [90744648, function() {\nconst result = { _: 'keyboardButtonSwitchInline' };\nresult.flags = this.int();\nresult.same_peer = !!(result.flags & 1);\nresult.text = this.string();\nresult.query = this.string();\nreturn result;\n  }],\n  [1358175439, function() {\nconst result = { _: 'keyboardButtonGame' };\nresult.text = this.string();\nreturn result;\n  }],\n  [2950250427, function() {\nconst result = { _: 'keyboardButtonBuy' };\nresult.text = this.string();\nreturn result;\n  }],\n  [280464681, function() {\nconst result = { _: 'keyboardButtonUrlAuth' };\nresult.flags = this.int();\nresult.text = this.string();\nif (result.flags & 1) result.fwd_text = this.string();\nresult.url = this.string();\nresult.button_id = this.int();\nreturn result;\n  }],\n  [3492708308, function() {\nconst result = { _: 'inputKeyboardButtonUrlAuth' };\nresult.flags = this.int();\nresult.request_write_access = !!(result.flags & 1);\nresult.text = this.string();\nif (result.flags & 2) result.fwd_text = this.string();\nresult.url = this.string();\nresult.bot = this.predicate();\nreturn result;\n  }],\n  [3150401885, function() {\nconst result = { _: 'keyboardButtonRequestPoll' };\nresult.flags = this.int();\nif (result.flags & 1) result.quiz = this.predicate();\nresult.text = this.string();\nreturn result;\n  }],\n  [2002815875, function() {\nconst result = { _: 'keyboardButtonRow' };\nresult.buttons = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [2688441221, function() {\nconst result = { _: 'replyKeyboardHide' };\nresult.flags = this.int();\nresult.selective = !!(result.flags & 4);\nreturn result;\n  }],\n  [4094724768, function() {\nconst result = { _: 'replyKeyboardForceReply' };\nresult.flags = this.int();\nresult.single_use = !!(result.flags & 2);\nresult.selective = !!(result.flags & 4);\nreturn result;\n  }],\n  [889353612, function() {\nconst result = { _: 'replyKeyboardMarkup' };\nresult.flags = this.int();\nresult.resize = !!(result.flags & 1);\nresult.single_use = !!(result.flags & 2);\nresult.selective = !!(result.flags & 4);\nresult.rows = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [1218642516, function() {\nconst result = { _: 'replyInlineMarkup' };\nresult.rows = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [3146955413, function() {\nconst result = { _: 'messageEntityUnknown' };\nresult.offset = this.int();\nresult.length = this.int();\nreturn result;\n  }],\n  [4194588573, function() {\nconst result = { _: 'messageEntityMention' };\nresult.offset = this.int();\nresult.length = this.int();\nreturn result;\n  }],\n  [1868782349, function() {\nconst result = { _: 'messageEntityHashtag' };\nresult.offset = this.int();\nresult.length = this.int();\nreturn result;\n  }],\n  [1827637959, function() {\nconst result = { _: 'messageEntityBotCommand' };\nresult.offset = this.int();\nresult.length = this.int();\nreturn result;\n  }],\n  [1859134776, function() {\nconst result = { _: 'messageEntityUrl' };\nresult.offset = this.int();\nresult.length = this.int();\nreturn result;\n  }],\n  [1692693954, function() {\nconst result = { _: 'messageEntityEmail' };\nresult.offset = this.int();\nresult.length = this.int();\nreturn result;\n  }],\n  [3177253833, function() {\nconst result = { _: 'messageEntityBold' };\nresult.offset = this.int();\nresult.length = this.int();\nreturn result;\n  }],\n  [2188348256, function() {\nconst result = { _: 'messageEntityItalic' };\nresult.offset = this.int();\nresult.length = this.int();\nreturn result;\n  }],\n  [681706865, function() {\nconst result = { _: 'messageEntityCode' };\nresult.offset = this.int();\nresult.length = this.int();\nreturn result;\n  }],\n  [1938967520, function() {\nconst result = { _: 'messageEntityPre' };\nresult.offset = this.int();\nresult.length = this.int();\nresult.language = this.string();\nreturn result;\n  }],\n  [1990644519, function() {\nconst result = { _: 'messageEntityTextUrl' };\nresult.offset = this.int();\nresult.length = this.int();\nresult.url = this.string();\nreturn result;\n  }],\n  [892193368, function() {\nconst result = { _: 'messageEntityMentionName' };\nresult.offset = this.int();\nresult.length = this.int();\nresult.user_id = this.int();\nreturn result;\n  }],\n  [546203849, function() {\nconst result = { _: 'inputMessageEntityMentionName' };\nresult.offset = this.int();\nresult.length = this.int();\nresult.user_id = this.predicate();\nreturn result;\n  }],\n  [2607407947, function() {\nconst result = { _: 'messageEntityPhone' };\nresult.offset = this.int();\nresult.length = this.int();\nreturn result;\n  }],\n  [1280209983, function() {\nconst result = { _: 'messageEntityCashtag' };\nresult.offset = this.int();\nresult.length = this.int();\nreturn result;\n  }],\n  [2622389899, function() {\nconst result = { _: 'messageEntityUnderline' };\nresult.offset = this.int();\nresult.length = this.int();\nreturn result;\n  }],\n  [3204879316, function() {\nconst result = { _: 'messageEntityStrike' };\nresult.offset = this.int();\nresult.length = this.int();\nreturn result;\n  }],\n  [34469328, function() {\nconst result = { _: 'messageEntityBlockquote' };\nresult.offset = this.int();\nresult.length = this.int();\nreturn result;\n  }],\n  [1981704948, function() {\nconst result = { _: 'messageEntityBankCard' };\nresult.offset = this.int();\nresult.length = this.int();\nreturn result;\n  }],\n  [4002160262, function() {\nconst result = { _: 'inputChannelEmpty' };\nreturn result;\n  }],\n  [2951442734, function() {\nconst result = { _: 'inputChannel' };\nresult.channel_id = this.int();\nresult.access_hash = this.long();\nreturn result;\n  }],\n  [707290417, function() {\nconst result = { _: 'inputChannelFromMessage' };\nresult.peer = this.predicate();\nresult.msg_id = this.int();\nresult.channel_id = this.int();\nreturn result;\n  }],\n  [2131196633, function() {\nconst result = { _: 'contacts.resolvedPeer' };\nresult.peer = this.predicate();\nresult.chats = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [182649427, function() {\nconst result = { _: 'messageRange' };\nresult.min_id = this.int();\nresult.max_id = this.int();\nreturn result;\n  }],\n  [1041346555, function() {\nconst result = { _: 'updates.channelDifferenceEmpty' };\nresult.flags = this.int();\nresult.final = !!(result.flags & 1);\nresult.pts = this.int();\nif (result.flags & 2) result.timeout = this.int();\nreturn result;\n  }],\n  [2763835134, function() {\nconst result = { _: 'updates.channelDifferenceTooLong' };\nresult.flags = this.int();\nresult.final = !!(result.flags & 1);\nif (result.flags & 2) result.timeout = this.int();\nresult.dialog = this.predicate();\nresult.messages = this.vector(this.predicate, false);\nresult.chats = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [543450958, function() {\nconst result = { _: 'updates.channelDifference' };\nresult.flags = this.int();\nresult.final = !!(result.flags & 1);\nresult.pts = this.int();\nif (result.flags & 2) result.timeout = this.int();\nresult.new_messages = this.vector(this.predicate, false);\nresult.other_updates = this.vector(this.predicate, false);\nresult.chats = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [2496933607, function() {\nconst result = { _: 'channelMessagesFilterEmpty' };\nreturn result;\n  }],\n  [3447183703, function() {\nconst result = { _: 'channelMessagesFilter' };\nresult.flags = this.int();\nresult.exclude_new_messages = !!(result.flags & 2);\nresult.ranges = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [367766557, function() {\nconst result = { _: 'channelParticipant' };\nresult.user_id = this.int();\nresult.date = this.int();\nreturn result;\n  }],\n  [2737347181, function() {\nconst result = { _: 'channelParticipantSelf' };\nresult.user_id = this.int();\nresult.inviter_id = this.int();\nresult.date = this.int();\nreturn result;\n  }],\n  [2156729764, function() {\nconst result = { _: 'channelParticipantCreator' };\nresult.flags = this.int();\nresult.user_id = this.int();\nif (result.flags & 1) result.rank = this.string();\nreturn result;\n  }],\n  [3435051951, function() {\nconst result = { _: 'channelParticipantAdmin' };\nresult.flags = this.int();\nresult.can_edit = !!(result.flags & 1);\nresult.self = !!(result.flags & 2);\nresult.user_id = this.int();\nif (result.flags & 2) result.inviter_id = this.int();\nresult.promoted_by = this.int();\nresult.date = this.int();\nresult.admin_rights = this.predicate();\nif (result.flags & 4) result.rank = this.string();\nreturn result;\n  }],\n  [470789295, function() {\nconst result = { _: 'channelParticipantBanned' };\nresult.flags = this.int();\nresult.left = !!(result.flags & 1);\nresult.user_id = this.int();\nresult.kicked_by = this.int();\nresult.date = this.int();\nresult.banned_rights = this.predicate();\nreturn result;\n  }],\n  [3728686201, function() {\nconst result = { _: 'channelParticipantsRecent' };\nreturn result;\n  }],\n  [3026225513, function() {\nconst result = { _: 'channelParticipantsAdmins' };\nreturn result;\n  }],\n  [2746567045, function() {\nconst result = { _: 'channelParticipantsKicked' };\nresult.q = this.string();\nreturn result;\n  }],\n  [2966521435, function() {\nconst result = { _: 'channelParticipantsBots' };\nreturn result;\n  }],\n  [338142689, function() {\nconst result = { _: 'channelParticipantsBanned' };\nresult.q = this.string();\nreturn result;\n  }],\n  [106343499, function() {\nconst result = { _: 'channelParticipantsSearch' };\nresult.q = this.string();\nreturn result;\n  }],\n  [3144345741, function() {\nconst result = { _: 'channelParticipantsContacts' };\nresult.q = this.string();\nreturn result;\n  }],\n  [4117684904, function() {\nconst result = { _: 'channels.channelParticipants' };\nresult.count = this.int();\nresult.participants = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [4028055529, function() {\nconst result = { _: 'channels.channelParticipantsNotModified' };\nreturn result;\n  }],\n  [3503927651, function() {\nconst result = { _: 'channels.channelParticipant' };\nresult.participant = this.predicate();\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [2013922064, function() {\nconst result = { _: 'help.termsOfService' };\nresult.flags = this.int();\nresult.popup = !!(result.flags & 1);\nresult.id = this.predicate();\nresult.text = this.string();\nresult.entities = this.vector(this.predicate, false);\nif (result.flags & 2) result.min_age_confirm = this.int();\nreturn result;\n  }],\n  [372165663, function() {\nconst result = { _: 'foundGif' };\nresult.url = this.string();\nresult.thumb_url = this.string();\nresult.content_url = this.string();\nresult.content_type = this.string();\nresult.w = this.int();\nresult.h = this.int();\nreturn result;\n  }],\n  [2624914441, function() {\nconst result = { _: 'foundGifCached' };\nresult.url = this.string();\nresult.photo = this.predicate();\nresult.document = this.predicate();\nreturn result;\n  }],\n  [1158290442, function() {\nconst result = { _: 'messages.foundGifs' };\nresult.next_offset = this.int();\nresult.results = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [3892468898, function() {\nconst result = { _: 'messages.savedGifsNotModified' };\nreturn result;\n  }],\n  [772213157, function() {\nconst result = { _: 'messages.savedGifs' };\nresult.hash = this.int();\nresult.gifs = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [864077702, function() {\nconst result = { _: 'inputBotInlineMessageMediaAuto' };\nresult.flags = this.int();\nresult.message = this.string();\nif (result.flags & 2) result.entities = this.vector(this.predicate);\nif (result.flags & 4) result.reply_markup = this.predicate();\nreturn result;\n  }],\n  [1036876423, function() {\nconst result = { _: 'inputBotInlineMessageText' };\nresult.flags = this.int();\nresult.no_webpage = !!(result.flags & 1);\nresult.message = this.string();\nif (result.flags & 2) result.entities = this.vector(this.predicate);\nif (result.flags & 4) result.reply_markup = this.predicate();\nreturn result;\n  }],\n  [3249626469, function() {\nconst result = { _: 'inputBotInlineMessageMediaGeo' };\nresult.flags = this.int();\nresult.geo_point = this.predicate();\nresult.period = this.int();\nif (result.flags & 4) result.reply_markup = this.predicate();\nreturn result;\n  }],\n  [1098628881, function() {\nconst result = { _: 'inputBotInlineMessageMediaVenue' };\nresult.flags = this.int();\nresult.geo_point = this.predicate();\nresult.title = this.string();\nresult.address = this.string();\nresult.provider = this.string();\nresult.venue_id = this.string();\nresult.venue_type = this.string();\nif (result.flags & 4) result.reply_markup = this.predicate();\nreturn result;\n  }],\n  [2800599037, function() {\nconst result = { _: 'inputBotInlineMessageMediaContact' };\nresult.flags = this.int();\nresult.phone_number = this.string();\nresult.first_name = this.string();\nresult.last_name = this.string();\nresult.vcard = this.string();\nif (result.flags & 4) result.reply_markup = this.predicate();\nreturn result;\n  }],\n  [1262639204, function() {\nconst result = { _: 'inputBotInlineMessageGame' };\nresult.flags = this.int();\nif (result.flags & 4) result.reply_markup = this.predicate();\nreturn result;\n  }],\n  [2294256409, function() {\nconst result = { _: 'inputBotInlineResult' };\nresult.flags = this.int();\nresult.id = this.string();\nresult.type = this.string();\nif (result.flags & 2) result.title = this.string();\nif (result.flags & 4) result.description = this.string();\nif (result.flags & 8) result.url = this.string();\nif (result.flags & 16) result.thumb = this.predicate();\nif (result.flags & 32) result.content = this.predicate();\nresult.send_message = this.predicate();\nreturn result;\n  }],\n  [2832753831, function() {\nconst result = { _: 'inputBotInlineResultPhoto' };\nresult.id = this.string();\nresult.type = this.string();\nresult.photo = this.predicate();\nresult.send_message = this.predicate();\nreturn result;\n  }],\n  [4294507972, function() {\nconst result = { _: 'inputBotInlineResultDocument' };\nresult.flags = this.int();\nresult.id = this.string();\nresult.type = this.string();\nif (result.flags & 2) result.title = this.string();\nif (result.flags & 4) result.description = this.string();\nresult.document = this.predicate();\nresult.send_message = this.predicate();\nreturn result;\n  }],\n  [1336154098, function() {\nconst result = { _: 'inputBotInlineResultGame' };\nresult.id = this.string();\nresult.short_name = this.string();\nresult.send_message = this.predicate();\nreturn result;\n  }],\n  [1984755728, function() {\nconst result = { _: 'botInlineMessageMediaAuto' };\nresult.flags = this.int();\nresult.message = this.string();\nif (result.flags & 2) result.entities = this.vector(this.predicate);\nif (result.flags & 4) result.reply_markup = this.predicate();\nreturn result;\n  }],\n  [2357159394, function() {\nconst result = { _: 'botInlineMessageText' };\nresult.flags = this.int();\nresult.no_webpage = !!(result.flags & 1);\nresult.message = this.string();\nif (result.flags & 2) result.entities = this.vector(this.predicate);\nif (result.flags & 4) result.reply_markup = this.predicate();\nreturn result;\n  }],\n  [3072515685, function() {\nconst result = { _: 'botInlineMessageMediaGeo' };\nresult.flags = this.int();\nresult.geo = this.predicate();\nresult.period = this.int();\nif (result.flags & 4) result.reply_markup = this.predicate();\nreturn result;\n  }],\n  [2324063644, function() {\nconst result = { _: 'botInlineMessageMediaVenue' };\nresult.flags = this.int();\nresult.geo = this.predicate();\nresult.title = this.string();\nresult.address = this.string();\nresult.provider = this.string();\nresult.venue_id = this.string();\nresult.venue_type = this.string();\nif (result.flags & 4) result.reply_markup = this.predicate();\nreturn result;\n  }],\n  [416402882, function() {\nconst result = { _: 'botInlineMessageMediaContact' };\nresult.flags = this.int();\nresult.phone_number = this.string();\nresult.first_name = this.string();\nresult.last_name = this.string();\nresult.vcard = this.string();\nif (result.flags & 4) result.reply_markup = this.predicate();\nreturn result;\n  }],\n  [295067450, function() {\nconst result = { _: 'botInlineResult' };\nresult.flags = this.int();\nresult.id = this.string();\nresult.type = this.string();\nif (result.flags & 2) result.title = this.string();\nif (result.flags & 4) result.description = this.string();\nif (result.flags & 8) result.url = this.string();\nif (result.flags & 16) result.thumb = this.predicate();\nif (result.flags & 32) result.content = this.predicate();\nresult.send_message = this.predicate();\nreturn result;\n  }],\n  [400266251, function() {\nconst result = { _: 'botInlineMediaResult' };\nresult.flags = this.int();\nresult.id = this.string();\nresult.type = this.string();\nif (result.flags & 1) result.photo = this.predicate();\nif (result.flags & 2) result.document = this.predicate();\nif (result.flags & 4) result.title = this.string();\nif (result.flags & 8) result.description = this.string();\nresult.send_message = this.predicate();\nreturn result;\n  }],\n  [2491197512, function() {\nconst result = { _: 'messages.botResults' };\nresult.flags = this.int();\nresult.gallery = !!(result.flags & 1);\nresult.query_id = this.long();\nif (result.flags & 2) result.next_offset = this.string();\nif (result.flags & 4) result.switch_pm = this.predicate();\nresult.results = this.vector(this.predicate, false);\nresult.cache_time = this.int();\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [1571494644, function() {\nconst result = { _: 'exportedMessageLink' };\nresult.link = this.string();\nresult.html = this.string();\nreturn result;\n  }],\n  [893020267, function() {\nconst result = { _: 'messageFwdHeader' };\nresult.flags = this.int();\nif (result.flags & 1) result.from_id = this.int();\nif (result.flags & 32) result.from_name = this.string();\nresult.date = this.int();\nif (result.flags & 2) result.channel_id = this.int();\nif (result.flags & 4) result.channel_post = this.int();\nif (result.flags & 8) result.post_author = this.string();\nif (result.flags & 16) result.saved_from_peer = this.predicate();\nif (result.flags & 16) result.saved_from_msg_id = this.int();\nif (result.flags & 64) result.psa_type = this.string();\nreturn result;\n  }],\n  [1923290508, function() {\nconst result = { _: 'auth.codeTypeSms' };\nreturn result;\n  }],\n  [1948046307, function() {\nconst result = { _: 'auth.codeTypeCall' };\nreturn result;\n  }],\n  [577556219, function() {\nconst result = { _: 'auth.codeTypeFlashCall' };\nreturn result;\n  }],\n  [1035688326, function() {\nconst result = { _: 'auth.sentCodeTypeApp' };\nresult.length = this.int();\nreturn result;\n  }],\n  [3221273506, function() {\nconst result = { _: 'auth.sentCodeTypeSms' };\nresult.length = this.int();\nreturn result;\n  }],\n  [1398007207, function() {\nconst result = { _: 'auth.sentCodeTypeCall' };\nresult.length = this.int();\nreturn result;\n  }],\n  [2869151449, function() {\nconst result = { _: 'auth.sentCodeTypeFlashCall' };\nresult.pattern = this.string();\nreturn result;\n  }],\n  [911761060, function() {\nconst result = { _: 'messages.botCallbackAnswer' };\nresult.flags = this.int();\nresult.alert = !!(result.flags & 2);\nresult.has_url = !!(result.flags & 8);\nresult.native_ui = !!(result.flags & 16);\nif (result.flags & 1) result.message = this.string();\nif (result.flags & 4) result.url = this.string();\nresult.cache_time = this.int();\nreturn result;\n  }],\n  [649453030, function() {\nconst result = { _: 'messages.messageEditData' };\nresult.flags = this.int();\nresult.caption = !!(result.flags & 1);\nreturn result;\n  }],\n  [2299280777, function() {\nconst result = { _: 'inputBotInlineMessageID' };\nresult.dc_id = this.int();\nresult.id = this.long();\nresult.access_hash = this.long();\nreturn result;\n  }],\n  [1008755359, function() {\nconst result = { _: 'inlineBotSwitchPM' };\nresult.text = this.string();\nresult.start_param = this.string();\nreturn result;\n  }],\n  [863093588, function() {\nconst result = { _: 'messages.peerDialogs' };\nresult.dialogs = this.vector(this.predicate, false);\nresult.messages = this.vector(this.predicate, false);\nresult.chats = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nresult.state = this.predicate();\nreturn result;\n  }],\n  [3989684315, function() {\nconst result = { _: 'topPeer' };\nresult.peer = this.predicate();\nresult.rating = this.double();\nreturn result;\n  }],\n  [2875595611, function() {\nconst result = { _: 'topPeerCategoryBotsPM' };\nreturn result;\n  }],\n  [344356834, function() {\nconst result = { _: 'topPeerCategoryBotsInline' };\nreturn result;\n  }],\n  [104314861, function() {\nconst result = { _: 'topPeerCategoryCorrespondents' };\nreturn result;\n  }],\n  [3172442442, function() {\nconst result = { _: 'topPeerCategoryGroups' };\nreturn result;\n  }],\n  [371037736, function() {\nconst result = { _: 'topPeerCategoryChannels' };\nreturn result;\n  }],\n  [511092620, function() {\nconst result = { _: 'topPeerCategoryPhoneCalls' };\nreturn result;\n  }],\n  [2822794409, function() {\nconst result = { _: 'topPeerCategoryForwardUsers' };\nreturn result;\n  }],\n  [4226728176, function() {\nconst result = { _: 'topPeerCategoryForwardChats' };\nreturn result;\n  }],\n  [4219683473, function() {\nconst result = { _: 'topPeerCategoryPeers' };\nresult.category = this.predicate();\nresult.count = this.int();\nresult.peers = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [3727060725, function() {\nconst result = { _: 'contacts.topPeersNotModified' };\nreturn result;\n  }],\n  [1891070632, function() {\nconst result = { _: 'contacts.topPeers' };\nresult.categories = this.vector(this.predicate, false);\nresult.chats = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [3039597469, function() {\nconst result = { _: 'contacts.topPeersDisabled' };\nreturn result;\n  }],\n  [453805082, function() {\nconst result = { _: 'draftMessageEmpty' };\nresult.flags = this.int();\nif (result.flags & 1) result.date = this.int();\nreturn result;\n  }],\n  [4253970719, function() {\nconst result = { _: 'draftMessage' };\nresult.flags = this.int();\nresult.no_webpage = !!(result.flags & 2);\nif (result.flags & 1) result.reply_to_msg_id = this.int();\nresult.message = this.string();\nif (result.flags & 8) result.entities = this.vector(this.predicate);\nresult.date = this.int();\nreturn result;\n  }],\n  [3336309862, function() {\nconst result = { _: 'messages.featuredStickersNotModified' };\nresult.count = this.int();\nreturn result;\n  }],\n  [3064709953, function() {\nconst result = { _: 'messages.featuredStickers' };\nresult.hash = this.int();\nresult.count = this.int();\nresult.sets = this.vector(this.predicate, false);\nresult.unread = this.vector(this.long, false);\nreturn result;\n  }],\n  [186120336, function() {\nconst result = { _: 'messages.recentStickersNotModified' };\nreturn result;\n  }],\n  [586395571, function() {\nconst result = { _: 'messages.recentStickers' };\nresult.hash = this.int();\nresult.packs = this.vector(this.predicate, false);\nresult.stickers = this.vector(this.predicate, false);\nresult.dates = this.vector(this.int, false);\nreturn result;\n  }],\n  [1338747336, function() {\nconst result = { _: 'messages.archivedStickers' };\nresult.count = this.int();\nresult.sets = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [946083368, function() {\nconst result = { _: 'messages.stickerSetInstallResultSuccess' };\nreturn result;\n  }],\n  [904138920, function() {\nconst result = { _: 'messages.stickerSetInstallResultArchive' };\nresult.sets = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [1678812626, function() {\nconst result = { _: 'stickerSetCovered' };\nresult.set = this.predicate();\nresult.cover = this.predicate();\nreturn result;\n  }],\n  [872932635, function() {\nconst result = { _: 'stickerSetMultiCovered' };\nresult.set = this.predicate();\nresult.covers = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [2933316530, function() {\nconst result = { _: 'maskCoords' };\nresult.n = this.int();\nresult.x = this.double();\nresult.y = this.double();\nresult.zoom = this.double();\nreturn result;\n  }],\n  [1251549527, function() {\nconst result = { _: 'inputStickeredMediaPhoto' };\nresult.id = this.predicate();\nreturn result;\n  }],\n  [70813275, function() {\nconst result = { _: 'inputStickeredMediaDocument' };\nresult.id = this.predicate();\nreturn result;\n  }],\n  [3187238203, function() {\nconst result = { _: 'game' };\nresult.flags = this.int();\nresult.id = this.long();\nresult.access_hash = this.long();\nresult.short_name = this.string();\nresult.title = this.string();\nresult.description = this.string();\nresult.photo = this.predicate();\nif (result.flags & 1) result.document = this.predicate();\nreturn result;\n  }],\n  [53231223, function() {\nconst result = { _: 'inputGameID' };\nresult.id = this.long();\nresult.access_hash = this.long();\nreturn result;\n  }],\n  [3274827786, function() {\nconst result = { _: 'inputGameShortName' };\nresult.bot_id = this.predicate();\nresult.short_name = this.string();\nreturn result;\n  }],\n  [1493171408, function() {\nconst result = { _: 'highScore' };\nresult.pos = this.int();\nresult.user_id = this.int();\nresult.score = this.int();\nreturn result;\n  }],\n  [2587622809, function() {\nconst result = { _: 'messages.highScores' };\nresult.scores = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [3695018575, function() {\nconst result = { _: 'textEmpty' };\nreturn result;\n  }],\n  [1950782688, function() {\nconst result = { _: 'textPlain' };\nresult.text = this.string();\nreturn result;\n  }],\n  [1730456516, function() {\nconst result = { _: 'textBold' };\nresult.text = this.predicate();\nreturn result;\n  }],\n  [3641877916, function() {\nconst result = { _: 'textItalic' };\nresult.text = this.predicate();\nreturn result;\n  }],\n  [3240501956, function() {\nconst result = { _: 'textUnderline' };\nresult.text = this.predicate();\nreturn result;\n  }],\n  [2616769429, function() {\nconst result = { _: 'textStrike' };\nresult.text = this.predicate();\nreturn result;\n  }],\n  [1816074681, function() {\nconst result = { _: 'textFixed' };\nresult.text = this.predicate();\nreturn result;\n  }],\n  [1009288385, function() {\nconst result = { _: 'textUrl' };\nresult.text = this.predicate();\nresult.url = this.string();\nresult.webpage_id = this.long();\nreturn result;\n  }],\n  [3730443734, function() {\nconst result = { _: 'textEmail' };\nresult.text = this.predicate();\nresult.email = this.string();\nreturn result;\n  }],\n  [2120376535, function() {\nconst result = { _: 'textConcat' };\nresult.texts = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [3983181060, function() {\nconst result = { _: 'textSubscript' };\nresult.text = this.predicate();\nreturn result;\n  }],\n  [3355139585, function() {\nconst result = { _: 'textSuperscript' };\nresult.text = this.predicate();\nreturn result;\n  }],\n  [55281185, function() {\nconst result = { _: 'textMarked' };\nresult.text = this.predicate();\nreturn result;\n  }],\n  [483104362, function() {\nconst result = { _: 'textPhone' };\nresult.text = this.predicate();\nresult.phone = this.string();\nreturn result;\n  }],\n  [136105807, function() {\nconst result = { _: 'textImage' };\nresult.document_id = this.long();\nresult.w = this.int();\nresult.h = this.int();\nreturn result;\n  }],\n  [894777186, function() {\nconst result = { _: 'textAnchor' };\nresult.text = this.predicate();\nresult.name = this.string();\nreturn result;\n  }],\n  [324435594, function() {\nconst result = { _: 'pageBlockUnsupported' };\nreturn result;\n  }],\n  [1890305021, function() {\nconst result = { _: 'pageBlockTitle' };\nresult.text = this.predicate();\nreturn result;\n  }],\n  [2415565343, function() {\nconst result = { _: 'pageBlockSubtitle' };\nresult.text = this.predicate();\nreturn result;\n  }],\n  [3132089824, function() {\nconst result = { _: 'pageBlockAuthorDate' };\nresult.author = this.predicate();\nresult.published_date = this.int();\nreturn result;\n  }],\n  [3218105580, function() {\nconst result = { _: 'pageBlockHeader' };\nresult.text = this.predicate();\nreturn result;\n  }],\n  [4046173921, function() {\nconst result = { _: 'pageBlockSubheader' };\nresult.text = this.predicate();\nreturn result;\n  }],\n  [1182402406, function() {\nconst result = { _: 'pageBlockParagraph' };\nresult.text = this.predicate();\nreturn result;\n  }],\n  [3228621118, function() {\nconst result = { _: 'pageBlockPreformatted' };\nresult.text = this.predicate();\nresult.language = this.string();\nreturn result;\n  }],\n  [1216809369, function() {\nconst result = { _: 'pageBlockFooter' };\nresult.text = this.predicate();\nreturn result;\n  }],\n  [3676352904, function() {\nconst result = { _: 'pageBlockDivider' };\nreturn result;\n  }],\n  [3456972720, function() {\nconst result = { _: 'pageBlockAnchor' };\nresult.name = this.string();\nreturn result;\n  }],\n  [3840442385, function() {\nconst result = { _: 'pageBlockList' };\nresult.items = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [641563686, function() {\nconst result = { _: 'pageBlockBlockquote' };\nresult.text = this.predicate();\nresult.caption = this.predicate();\nreturn result;\n  }],\n  [1329878739, function() {\nconst result = { _: 'pageBlockPullquote' };\nresult.text = this.predicate();\nresult.caption = this.predicate();\nreturn result;\n  }],\n  [391759200, function() {\nconst result = { _: 'pageBlockPhoto' };\nresult.flags = this.int();\nresult.photo_id = this.long();\nresult.caption = this.predicate();\nif (result.flags & 1) result.url = this.string();\nif (result.flags & 1) result.webpage_id = this.long();\nreturn result;\n  }],\n  [2089805750, function() {\nconst result = { _: 'pageBlockVideo' };\nresult.flags = this.int();\nresult.autoplay = !!(result.flags & 1);\nresult.loop = !!(result.flags & 2);\nresult.video_id = this.long();\nresult.caption = this.predicate();\nreturn result;\n  }],\n  [972174080, function() {\nconst result = { _: 'pageBlockCover' };\nresult.cover = this.predicate();\nreturn result;\n  }],\n  [2826014149, function() {\nconst result = { _: 'pageBlockEmbed' };\nresult.flags = this.int();\nresult.full_width = !!(result.flags & 1);\nresult.allow_scrolling = !!(result.flags & 8);\nif (result.flags & 2) result.url = this.string();\nif (result.flags & 4) result.html = this.string();\nif (result.flags & 16) result.poster_photo_id = this.long();\nif (result.flags & 32) result.w = this.int();\nif (result.flags & 32) result.h = this.int();\nresult.caption = this.predicate();\nreturn result;\n  }],\n  [4065961995, function() {\nconst result = { _: 'pageBlockEmbedPost' };\nresult.url = this.string();\nresult.webpage_id = this.long();\nresult.author_photo_id = this.long();\nresult.author = this.string();\nresult.date = this.int();\nresult.blocks = this.vector(this.predicate, false);\nresult.caption = this.predicate();\nreturn result;\n  }],\n  [1705048653, function() {\nconst result = { _: 'pageBlockCollage' };\nresult.items = this.vector(this.predicate, false);\nresult.caption = this.predicate();\nreturn result;\n  }],\n  [52401552, function() {\nconst result = { _: 'pageBlockSlideshow' };\nresult.items = this.vector(this.predicate, false);\nresult.caption = this.predicate();\nreturn result;\n  }],\n  [4011282869, function() {\nconst result = { _: 'pageBlockChannel' };\nresult.channel = this.predicate();\nreturn result;\n  }],\n  [2151899626, function() {\nconst result = { _: 'pageBlockAudio' };\nresult.audio_id = this.long();\nresult.caption = this.predicate();\nreturn result;\n  }],\n  [504660880, function() {\nconst result = { _: 'pageBlockKicker' };\nresult.text = this.predicate();\nreturn result;\n  }],\n  [3209554562, function() {\nconst result = { _: 'pageBlockTable' };\nresult.flags = this.int();\nresult.bordered = !!(result.flags & 1);\nresult.striped = !!(result.flags & 2);\nresult.title = this.predicate();\nresult.rows = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [2592793057, function() {\nconst result = { _: 'pageBlockOrderedList' };\nresult.items = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [1987480557, function() {\nconst result = { _: 'pageBlockDetails' };\nresult.flags = this.int();\nresult.open = !!(result.flags & 1);\nresult.blocks = this.vector(this.predicate, false);\nresult.title = this.predicate();\nreturn result;\n  }],\n  [370236054, function() {\nconst result = { _: 'pageBlockRelatedArticles' };\nresult.title = this.predicate();\nresult.articles = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [2756656886, function() {\nconst result = { _: 'pageBlockMap' };\nresult.geo = this.predicate();\nresult.zoom = this.int();\nresult.w = this.int();\nresult.h = this.int();\nresult.caption = this.predicate();\nreturn result;\n  }],\n  [2246320897, function() {\nconst result = { _: 'phoneCallDiscardReasonMissed' };\nreturn result;\n  }],\n  [3767910816, function() {\nconst result = { _: 'phoneCallDiscardReasonDisconnect' };\nreturn result;\n  }],\n  [1471006352, function() {\nconst result = { _: 'phoneCallDiscardReasonHangup' };\nreturn result;\n  }],\n  [4210550985, function() {\nconst result = { _: 'phoneCallDiscardReasonBusy' };\nreturn result;\n  }],\n  [2104790276, function() {\nconst result = { _: 'dataJSON' };\nresult.data = this.string();\nreturn result;\n  }],\n  [3408489464, function() {\nconst result = { _: 'labeledPrice' };\nresult.label = this.string();\nresult.amount = this.long();\nreturn result;\n  }],\n  [3272254296, function() {\nconst result = { _: 'invoice' };\nresult.flags = this.int();\nresult.test = !!(result.flags & 1);\nresult.name_requested = !!(result.flags & 2);\nresult.phone_requested = !!(result.flags & 4);\nresult.email_requested = !!(result.flags & 8);\nresult.shipping_address_requested = !!(result.flags & 16);\nresult.flexible = !!(result.flags & 32);\nresult.phone_to_provider = !!(result.flags & 64);\nresult.email_to_provider = !!(result.flags & 128);\nresult.currency = this.string();\nresult.prices = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [3926049406, function() {\nconst result = { _: 'paymentCharge' };\nresult.id = this.string();\nresult.provider_charge_id = this.string();\nreturn result;\n  }],\n  [512535275, function() {\nconst result = { _: 'postAddress' };\nresult.street_line1 = this.string();\nresult.street_line2 = this.string();\nresult.city = this.string();\nresult.state = this.string();\nresult.country_iso2 = this.string();\nresult.post_code = this.string();\nreturn result;\n  }],\n  [2426158996, function() {\nconst result = { _: 'paymentRequestedInfo' };\nresult.flags = this.int();\nif (result.flags & 1) result.name = this.string();\nif (result.flags & 2) result.phone = this.string();\nif (result.flags & 4) result.email = this.string();\nif (result.flags & 8) result.shipping_address = this.predicate();\nreturn result;\n  }],\n  [3452074527, function() {\nconst result = { _: 'paymentSavedCredentialsCard' };\nresult.id = this.string();\nresult.title = this.string();\nreturn result;\n  }],\n  [475467473, function() {\nconst result = { _: 'webDocument' };\nresult.url = this.string();\nresult.access_hash = this.long();\nresult.size = this.int();\nresult.mime_type = this.string();\nresult.attributes = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [4190682310, function() {\nconst result = { _: 'webDocumentNoProxy' };\nresult.url = this.string();\nresult.size = this.int();\nresult.mime_type = this.string();\nresult.attributes = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [2616017741, function() {\nconst result = { _: 'inputWebDocument' };\nresult.url = this.string();\nresult.size = this.int();\nresult.mime_type = this.string();\nresult.attributes = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [3258570374, function() {\nconst result = { _: 'inputWebFileLocation' };\nresult.url = this.string();\nresult.access_hash = this.long();\nreturn result;\n  }],\n  [2669814217, function() {\nconst result = { _: 'inputWebFileGeoPointLocation' };\nresult.geo_point = this.predicate();\nresult.access_hash = this.long();\nresult.w = this.int();\nresult.h = this.int();\nresult.zoom = this.int();\nresult.scale = this.int();\nreturn result;\n  }],\n  [568808380, function() {\nconst result = { _: 'upload.webFile' };\nresult.size = this.int();\nresult.mime_type = this.string();\nresult.file_type = this.predicate();\nresult.mtime = this.int();\nresult.bytes = this.bytes();\nreturn result;\n  }],\n  [1062645411, function() {\nconst result = { _: 'payments.paymentForm' };\nresult.flags = this.int();\nresult.can_save_credentials = !!(result.flags & 4);\nresult.password_missing = !!(result.flags & 8);\nresult.bot_id = this.int();\nresult.invoice = this.predicate();\nresult.provider_id = this.int();\nresult.url = this.string();\nif (result.flags & 16) result.native_provider = this.string();\nif (result.flags & 16) result.native_params = this.predicate();\nif (result.flags & 1) result.saved_info = this.predicate();\nif (result.flags & 2) result.saved_credentials = this.predicate();\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [3510966403, function() {\nconst result = { _: 'payments.validatedRequestedInfo' };\nresult.flags = this.int();\nif (result.flags & 1) result.id = this.string();\nif (result.flags & 2) result.shipping_options = this.vector(this.predicate);\nreturn result;\n  }],\n  [1314881805, function() {\nconst result = { _: 'payments.paymentResult' };\nresult.updates = this.predicate();\nreturn result;\n  }],\n  [3628142905, function() {\nconst result = { _: 'payments.paymentVerificationNeeded' };\nresult.url = this.string();\nreturn result;\n  }],\n  [1342771681, function() {\nconst result = { _: 'payments.paymentReceipt' };\nresult.flags = this.int();\nresult.date = this.int();\nresult.bot_id = this.int();\nresult.invoice = this.predicate();\nresult.provider_id = this.int();\nif (result.flags & 1) result.info = this.predicate();\nif (result.flags & 2) result.shipping = this.predicate();\nresult.currency = this.string();\nresult.total_amount = this.long();\nresult.credentials_title = this.string();\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [4220511292, function() {\nconst result = { _: 'payments.savedInfo' };\nresult.flags = this.int();\nresult.has_saved_credentials = !!(result.flags & 2);\nif (result.flags & 1) result.saved_info = this.predicate();\nreturn result;\n  }],\n  [3238965967, function() {\nconst result = { _: 'inputPaymentCredentialsSaved' };\nresult.id = this.string();\nresult.tmp_password = this.bytes();\nreturn result;\n  }],\n  [873977640, function() {\nconst result = { _: 'inputPaymentCredentials' };\nresult.flags = this.int();\nresult.save = !!(result.flags & 1);\nresult.data = this.predicate();\nreturn result;\n  }],\n  [178373535, function() {\nconst result = { _: 'inputPaymentCredentialsApplePay' };\nresult.payment_data = this.predicate();\nreturn result;\n  }],\n  [3389379854, function() {\nconst result = { _: 'inputPaymentCredentialsAndroidPay' };\nresult.payment_token = this.predicate();\nresult.google_transaction_id = this.string();\nreturn result;\n  }],\n  [3680828724, function() {\nconst result = { _: 'account.tmpPassword' };\nresult.tmp_password = this.bytes();\nresult.valid_until = this.int();\nreturn result;\n  }],\n  [3055631583, function() {\nconst result = { _: 'shippingOption' };\nresult.id = this.string();\nresult.title = this.string();\nresult.prices = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [4288717974, function() {\nconst result = { _: 'inputStickerSetItem' };\nresult.flags = this.int();\nresult.document = this.predicate();\nresult.emoji = this.string();\nif (result.flags & 1) result.mask_coords = this.predicate();\nreturn result;\n  }],\n  [506920429, function() {\nconst result = { _: 'inputPhoneCall' };\nresult.id = this.long();\nresult.access_hash = this.long();\nreturn result;\n  }],\n  [1399245077, function() {\nconst result = { _: 'phoneCallEmpty' };\nresult.id = this.long();\nreturn result;\n  }],\n  [462375633, function() {\nconst result = { _: 'phoneCallWaiting' };\nresult.flags = this.int();\nresult.video = !!(result.flags & 32);\nresult.id = this.long();\nresult.access_hash = this.long();\nresult.date = this.int();\nresult.admin_id = this.int();\nresult.participant_id = this.int();\nresult.protocol = this.predicate();\nif (result.flags & 1) result.receive_date = this.int();\nreturn result;\n  }],\n  [2280307539, function() {\nconst result = { _: 'phoneCallRequested' };\nresult.flags = this.int();\nresult.video = !!(result.flags & 32);\nresult.id = this.long();\nresult.access_hash = this.long();\nresult.date = this.int();\nresult.admin_id = this.int();\nresult.participant_id = this.int();\nresult.g_a_hash = this.bytes();\nresult.protocol = this.predicate();\nreturn result;\n  }],\n  [2575058250, function() {\nconst result = { _: 'phoneCallAccepted' };\nresult.flags = this.int();\nresult.video = !!(result.flags & 32);\nresult.id = this.long();\nresult.access_hash = this.long();\nresult.date = this.int();\nresult.admin_id = this.int();\nresult.participant_id = this.int();\nresult.g_b = this.bytes();\nresult.protocol = this.predicate();\nreturn result;\n  }],\n  [2269294207, function() {\nconst result = { _: 'phoneCall' };\nresult.flags = this.int();\nresult.p2p_allowed = !!(result.flags & 32);\nresult.id = this.long();\nresult.access_hash = this.long();\nresult.date = this.int();\nresult.admin_id = this.int();\nresult.participant_id = this.int();\nresult.g_a_or_b = this.bytes();\nresult.key_fingerprint = this.long();\nresult.protocol = this.predicate();\nresult.connections = this.vector(this.predicate, false);\nresult.start_date = this.int();\nreturn result;\n  }],\n  [1355435489, function() {\nconst result = { _: 'phoneCallDiscarded' };\nresult.flags = this.int();\nresult.need_rating = !!(result.flags & 4);\nresult.need_debug = !!(result.flags & 8);\nresult.video = !!(result.flags & 32);\nresult.id = this.long();\nif (result.flags & 1) result.reason = this.predicate();\nif (result.flags & 2) result.duration = this.int();\nreturn result;\n  }],\n  [2639009728, function() {\nconst result = { _: 'phoneConnection' };\nresult.id = this.long();\nresult.ip = this.string();\nresult.ipv6 = this.string();\nresult.port = this.int();\nresult.peer_tag = this.bytes();\nreturn result;\n  }],\n  [4236742600, function() {\nconst result = { _: 'phoneCallProtocol' };\nresult.flags = this.int();\nresult.udp_p2p = !!(result.flags & 1);\nresult.udp_reflector = !!(result.flags & 2);\nresult.min_layer = this.int();\nresult.max_layer = this.int();\nresult.library_versions = this.vector(this.string, false);\nreturn result;\n  }],\n  [3968000320, function() {\nconst result = { _: 'phone.phoneCall' };\nresult.phone_call = this.predicate();\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [4004045934, function() {\nconst result = { _: 'upload.cdnFileReuploadNeeded' };\nresult.request_token = this.bytes();\nreturn result;\n  }],\n  [2845821519, function() {\nconst result = { _: 'upload.cdnFile' };\nresult.bytes = this.bytes();\nreturn result;\n  }],\n  [3380800186, function() {\nconst result = { _: 'cdnPublicKey' };\nresult.dc_id = this.int();\nresult.public_key = this.string();\nreturn result;\n  }],\n  [1462101002, function() {\nconst result = { _: 'cdnConfig' };\nresult.public_keys = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [3402727926, function() {\nconst result = { _: 'langPackString' };\nresult.key = this.string();\nresult.value = this.string();\nreturn result;\n  }],\n  [1816636575, function() {\nconst result = { _: 'langPackStringPluralized' };\nresult.flags = this.int();\nresult.key = this.string();\nif (result.flags & 1) result.zero_value = this.string();\nif (result.flags & 2) result.one_value = this.string();\nif (result.flags & 4) result.two_value = this.string();\nif (result.flags & 8) result.few_value = this.string();\nif (result.flags & 16) result.many_value = this.string();\nresult.other_value = this.string();\nreturn result;\n  }],\n  [695856818, function() {\nconst result = { _: 'langPackStringDeleted' };\nresult.key = this.string();\nreturn result;\n  }],\n  [4085629430, function() {\nconst result = { _: 'langPackDifference' };\nresult.lang_code = this.string();\nresult.from_version = this.int();\nresult.version = this.int();\nresult.strings = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [4006239459, function() {\nconst result = { _: 'langPackLanguage' };\nresult.flags = this.int();\nresult.official = !!(result.flags & 1);\nresult.rtl = !!(result.flags & 4);\nresult.beta = !!(result.flags & 8);\nresult.name = this.string();\nresult.native_name = this.string();\nresult.lang_code = this.string();\nif (result.flags & 2) result.base_lang_code = this.string();\nresult.plural_code = this.string();\nresult.strings_count = this.int();\nresult.translated_count = this.int();\nresult.translations_url = this.string();\nreturn result;\n  }],\n  [3873421349, function() {\nconst result = { _: 'channelAdminLogEventActionChangeTitle' };\nresult.prev_value = this.string();\nresult.new_value = this.string();\nreturn result;\n  }],\n  [1427671598, function() {\nconst result = { _: 'channelAdminLogEventActionChangeAbout' };\nresult.prev_value = this.string();\nresult.new_value = this.string();\nreturn result;\n  }],\n  [1783299128, function() {\nconst result = { _: 'channelAdminLogEventActionChangeUsername' };\nresult.prev_value = this.string();\nresult.new_value = this.string();\nreturn result;\n  }],\n  [1129042607, function() {\nconst result = { _: 'channelAdminLogEventActionChangePhoto' };\nresult.prev_photo = this.predicate();\nresult.new_photo = this.predicate();\nreturn result;\n  }],\n  [460916654, function() {\nconst result = { _: 'channelAdminLogEventActionToggleInvites' };\nresult.new_value = this.predicate();\nreturn result;\n  }],\n  [648939889, function() {\nconst result = { _: 'channelAdminLogEventActionToggleSignatures' };\nresult.new_value = this.predicate();\nreturn result;\n  }],\n  [3924306968, function() {\nconst result = { _: 'channelAdminLogEventActionUpdatePinned' };\nresult.message = this.predicate();\nreturn result;\n  }],\n  [1889215493, function() {\nconst result = { _: 'channelAdminLogEventActionEditMessage' };\nresult.prev_message = this.predicate();\nresult.new_message = this.predicate();\nreturn result;\n  }],\n  [1121994683, function() {\nconst result = { _: 'channelAdminLogEventActionDeleteMessage' };\nresult.message = this.predicate();\nreturn result;\n  }],\n  [405815507, function() {\nconst result = { _: 'channelAdminLogEventActionParticipantJoin' };\nreturn result;\n  }],\n  [4170676210, function() {\nconst result = { _: 'channelAdminLogEventActionParticipantLeave' };\nreturn result;\n  }],\n  [3810276568, function() {\nconst result = { _: 'channelAdminLogEventActionParticipantInvite' };\nresult.participant = this.predicate();\nreturn result;\n  }],\n  [3872931198, function() {\nconst result = { _: 'channelAdminLogEventActionParticipantToggleBan' };\nresult.prev_participant = this.predicate();\nresult.new_participant = this.predicate();\nreturn result;\n  }],\n  [3580323600, function() {\nconst result = { _: 'channelAdminLogEventActionParticipantToggleAdmin' };\nresult.prev_participant = this.predicate();\nresult.new_participant = this.predicate();\nreturn result;\n  }],\n  [2982398631, function() {\nconst result = { _: 'channelAdminLogEventActionChangeStickerSet' };\nresult.prev_stickerset = this.predicate();\nresult.new_stickerset = this.predicate();\nreturn result;\n  }],\n  [1599903217, function() {\nconst result = { _: 'channelAdminLogEventActionTogglePreHistoryHidden' };\nresult.new_value = this.predicate();\nreturn result;\n  }],\n  [771095562, function() {\nconst result = { _: 'channelAdminLogEventActionDefaultBannedRights' };\nresult.prev_banned_rights = this.predicate();\nresult.new_banned_rights = this.predicate();\nreturn result;\n  }],\n  [2399639107, function() {\nconst result = { _: 'channelAdminLogEventActionStopPoll' };\nresult.message = this.predicate();\nreturn result;\n  }],\n  [2725218331, function() {\nconst result = { _: 'channelAdminLogEventActionChangeLinkedChat' };\nresult.prev_value = this.int();\nresult.new_value = this.int();\nreturn result;\n  }],\n  [241923758, function() {\nconst result = { _: 'channelAdminLogEventActionChangeLocation' };\nresult.prev_value = this.predicate();\nresult.new_value = this.predicate();\nreturn result;\n  }],\n  [1401984889, function() {\nconst result = { _: 'channelAdminLogEventActionToggleSlowMode' };\nresult.prev_value = this.int();\nresult.new_value = this.int();\nreturn result;\n  }],\n  [995769920, function() {\nconst result = { _: 'channelAdminLogEvent' };\nresult.id = this.long();\nresult.date = this.int();\nresult.user_id = this.int();\nresult.action = this.predicate();\nreturn result;\n  }],\n  [3985307469, function() {\nconst result = { _: 'channels.adminLogResults' };\nresult.events = this.vector(this.predicate, false);\nresult.chats = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [3926948580, function() {\nconst result = { _: 'channelAdminLogEventsFilter' };\nresult.flags = this.int();\nresult.join = !!(result.flags & 1);\nresult.leave = !!(result.flags & 2);\nresult.invite = !!(result.flags & 4);\nresult.ban = !!(result.flags & 8);\nresult.unban = !!(result.flags & 16);\nresult.kick = !!(result.flags & 32);\nresult.unkick = !!(result.flags & 64);\nresult.promote = !!(result.flags & 128);\nresult.demote = !!(result.flags & 256);\nresult.info = !!(result.flags & 512);\nresult.settings = !!(result.flags & 1024);\nresult.pinned = !!(result.flags & 2048);\nresult.edit = !!(result.flags & 4096);\nresult.delete = !!(result.flags & 8192);\nreturn result;\n  }],\n  [1558266229, function() {\nconst result = { _: 'popularContact' };\nresult.client_id = this.long();\nresult.importers = this.int();\nreturn result;\n  }],\n  [2660214483, function() {\nconst result = { _: 'messages.favedStickersNotModified' };\nreturn result;\n  }],\n  [4085198614, function() {\nconst result = { _: 'messages.favedStickers' };\nresult.hash = this.int();\nresult.packs = this.vector(this.predicate, false);\nresult.stickers = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [1189204285, function() {\nconst result = { _: 'recentMeUrlUnknown' };\nresult.url = this.string();\nreturn result;\n  }],\n  [2377921334, function() {\nconst result = { _: 'recentMeUrlUser' };\nresult.url = this.string();\nresult.user_id = this.int();\nreturn result;\n  }],\n  [2686132985, function() {\nconst result = { _: 'recentMeUrlChat' };\nresult.url = this.string();\nresult.chat_id = this.int();\nreturn result;\n  }],\n  [3947431965, function() {\nconst result = { _: 'recentMeUrlChatInvite' };\nresult.url = this.string();\nresult.chat_invite = this.predicate();\nreturn result;\n  }],\n  [3154794460, function() {\nconst result = { _: 'recentMeUrlStickerSet' };\nresult.url = this.string();\nresult.set = this.predicate();\nreturn result;\n  }],\n  [235081943, function() {\nconst result = { _: 'help.recentMeUrls' };\nresult.urls = this.vector(this.predicate, false);\nresult.chats = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [482797855, function() {\nconst result = { _: 'inputSingleMedia' };\nresult.flags = this.int();\nresult.media = this.predicate();\nresult.random_id = this.long();\nresult.message = this.string();\nif (result.flags & 1) result.entities = this.vector(this.predicate);\nreturn result;\n  }],\n  [3402187762, function() {\nconst result = { _: 'webAuthorization' };\nresult.hash = this.long();\nresult.bot_id = this.int();\nresult.domain = this.string();\nresult.browser = this.string();\nresult.platform = this.string();\nresult.date_created = this.int();\nresult.date_active = this.int();\nresult.ip = this.string();\nresult.region = this.string();\nreturn result;\n  }],\n  [3981887996, function() {\nconst result = { _: 'account.webAuthorizations' };\nresult.authorizations = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [2792792866, function() {\nconst result = { _: 'inputMessageID' };\nresult.id = this.int();\nreturn result;\n  }],\n  [3134751637, function() {\nconst result = { _: 'inputMessageReplyTo' };\nresult.id = this.int();\nreturn result;\n  }],\n  [2257003832, function() {\nconst result = { _: 'inputMessagePinned' };\nreturn result;\n  }],\n  [4239064759, function() {\nconst result = { _: 'inputDialogPeer' };\nresult.peer = this.predicate();\nreturn result;\n  }],\n  [1684014375, function() {\nconst result = { _: 'inputDialogPeerFolder' };\nresult.folder_id = this.int();\nreturn result;\n  }],\n  [3849174789, function() {\nconst result = { _: 'dialogPeer' };\nresult.peer = this.predicate();\nreturn result;\n  }],\n  [1363483106, function() {\nconst result = { _: 'dialogPeerFolder' };\nresult.folder_id = this.int();\nreturn result;\n  }],\n  [223655517, function() {\nconst result = { _: 'messages.foundStickerSetsNotModified' };\nreturn result;\n  }],\n  [1359533640, function() {\nconst result = { _: 'messages.foundStickerSets' };\nresult.hash = this.int();\nresult.sets = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [1648543603, function() {\nconst result = { _: 'fileHash' };\nresult.offset = this.int();\nresult.limit = this.int();\nresult.hash = this.bytes();\nreturn result;\n  }],\n  [1968737087, function() {\nconst result = { _: 'inputClientProxy' };\nresult.address = this.string();\nresult.port = this.int();\nreturn result;\n  }],\n  [3811614591, function() {\nconst result = { _: 'help.termsOfServiceUpdateEmpty' };\nresult.expires = this.int();\nreturn result;\n  }],\n  [686618977, function() {\nconst result = { _: 'help.termsOfServiceUpdate' };\nresult.expires = this.int();\nresult.terms_of_service = this.predicate();\nreturn result;\n  }],\n  [859091184, function() {\nconst result = { _: 'inputSecureFileUploaded' };\nresult.id = this.long();\nresult.parts = this.int();\nresult.md5_checksum = this.string();\nresult.file_hash = this.bytes();\nresult.secret = this.bytes();\nreturn result;\n  }],\n  [1399317950, function() {\nconst result = { _: 'inputSecureFile' };\nresult.id = this.long();\nresult.access_hash = this.long();\nreturn result;\n  }],\n  [1679398724, function() {\nconst result = { _: 'secureFileEmpty' };\nreturn result;\n  }],\n  [3760683618, function() {\nconst result = { _: 'secureFile' };\nresult.id = this.long();\nresult.access_hash = this.long();\nresult.size = this.int();\nresult.dc_id = this.int();\nresult.date = this.int();\nresult.file_hash = this.bytes();\nresult.secret = this.bytes();\nreturn result;\n  }],\n  [2330640067, function() {\nconst result = { _: 'secureData' };\nresult.data = this.bytes();\nresult.data_hash = this.bytes();\nresult.secret = this.bytes();\nreturn result;\n  }],\n  [2103482845, function() {\nconst result = { _: 'securePlainPhone' };\nresult.phone = this.string();\nreturn result;\n  }],\n  [569137759, function() {\nconst result = { _: 'securePlainEmail' };\nresult.email = this.string();\nreturn result;\n  }],\n  [2636808675, function() {\nconst result = { _: 'secureValueTypePersonalDetails' };\nreturn result;\n  }],\n  [1034709504, function() {\nconst result = { _: 'secureValueTypePassport' };\nreturn result;\n  }],\n  [115615172, function() {\nconst result = { _: 'secureValueTypeDriverLicense' };\nreturn result;\n  }],\n  [2698015819, function() {\nconst result = { _: 'secureValueTypeIdentityCard' };\nreturn result;\n  }],\n  [2577698595, function() {\nconst result = { _: 'secureValueTypeInternalPassport' };\nreturn result;\n  }],\n  [3420659238, function() {\nconst result = { _: 'secureValueTypeAddress' };\nreturn result;\n  }],\n  [4231435598, function() {\nconst result = { _: 'secureValueTypeUtilityBill' };\nreturn result;\n  }],\n  [2299755533, function() {\nconst result = { _: 'secureValueTypeBankStatement' };\nreturn result;\n  }],\n  [2340959368, function() {\nconst result = { _: 'secureValueTypeRentalAgreement' };\nreturn result;\n  }],\n  [2581823594, function() {\nconst result = { _: 'secureValueTypePassportRegistration' };\nreturn result;\n  }],\n  [3926060083, function() {\nconst result = { _: 'secureValueTypeTemporaryRegistration' };\nreturn result;\n  }],\n  [3005262555, function() {\nconst result = { _: 'secureValueTypePhone' };\nreturn result;\n  }],\n  [2386339822, function() {\nconst result = { _: 'secureValueTypeEmail' };\nreturn result;\n  }],\n  [411017418, function() {\nconst result = { _: 'secureValue' };\nresult.flags = this.int();\nresult.type = this.predicate();\nif (result.flags & 1) result.data = this.predicate();\nif (result.flags & 2) result.front_side = this.predicate();\nif (result.flags & 4) result.reverse_side = this.predicate();\nif (result.flags & 8) result.selfie = this.predicate();\nif (result.flags & 64) result.translation = this.vector(this.predicate);\nif (result.flags & 16) result.files = this.vector(this.predicate);\nif (result.flags & 32) result.plain_data = this.predicate();\nresult.hash = this.bytes();\nreturn result;\n  }],\n  [3676426407, function() {\nconst result = { _: 'inputSecureValue' };\nresult.flags = this.int();\nresult.type = this.predicate();\nif (result.flags & 1) result.data = this.predicate();\nif (result.flags & 2) result.front_side = this.predicate();\nif (result.flags & 4) result.reverse_side = this.predicate();\nif (result.flags & 8) result.selfie = this.predicate();\nif (result.flags & 64) result.translation = this.vector(this.predicate);\nif (result.flags & 16) result.files = this.vector(this.predicate);\nif (result.flags & 32) result.plain_data = this.predicate();\nreturn result;\n  }],\n  [3978218928, function() {\nconst result = { _: 'secureValueHash' };\nresult.type = this.predicate();\nresult.hash = this.bytes();\nreturn result;\n  }],\n  [3903065049, function() {\nconst result = { _: 'secureValueErrorData' };\nresult.type = this.predicate();\nresult.data_hash = this.bytes();\nresult.field = this.string();\nresult.text = this.string();\nreturn result;\n  }],\n  [12467706, function() {\nconst result = { _: 'secureValueErrorFrontSide' };\nresult.type = this.predicate();\nresult.file_hash = this.bytes();\nresult.text = this.string();\nreturn result;\n  }],\n  [2257201829, function() {\nconst result = { _: 'secureValueErrorReverseSide' };\nresult.type = this.predicate();\nresult.file_hash = this.bytes();\nresult.text = this.string();\nreturn result;\n  }],\n  [3845639894, function() {\nconst result = { _: 'secureValueErrorSelfie' };\nresult.type = this.predicate();\nresult.file_hash = this.bytes();\nresult.text = this.string();\nreturn result;\n  }],\n  [2054162547, function() {\nconst result = { _: 'secureValueErrorFile' };\nresult.type = this.predicate();\nresult.file_hash = this.bytes();\nresult.text = this.string();\nreturn result;\n  }],\n  [1717706985, function() {\nconst result = { _: 'secureValueErrorFiles' };\nresult.type = this.predicate();\nresult.file_hash = this.vector(this.bytes, false);\nresult.text = this.string();\nreturn result;\n  }],\n  [2258466191, function() {\nconst result = { _: 'secureValueError' };\nresult.type = this.predicate();\nresult.hash = this.bytes();\nresult.text = this.string();\nreturn result;\n  }],\n  [2702460784, function() {\nconst result = { _: 'secureValueErrorTranslationFile' };\nresult.type = this.predicate();\nresult.file_hash = this.bytes();\nresult.text = this.string();\nreturn result;\n  }],\n  [878931416, function() {\nconst result = { _: 'secureValueErrorTranslationFiles' };\nresult.type = this.predicate();\nresult.file_hash = this.vector(this.bytes, false);\nresult.text = this.string();\nreturn result;\n  }],\n  [871426631, function() {\nconst result = { _: 'secureCredentialsEncrypted' };\nresult.data = this.bytes();\nresult.hash = this.bytes();\nresult.secret = this.bytes();\nreturn result;\n  }],\n  [2905480408, function() {\nconst result = { _: 'account.authorizationForm' };\nresult.flags = this.int();\nresult.required_types = this.vector(this.predicate, false);\nresult.values = this.vector(this.predicate, false);\nresult.errors = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nif (result.flags & 1) result.privacy_policy_url = this.string();\nreturn result;\n  }],\n  [2166326607, function() {\nconst result = { _: 'account.sentEmailCode' };\nresult.email_pattern = this.string();\nresult.length = this.int();\nreturn result;\n  }],\n  [1722786150, function() {\nconst result = { _: 'help.deepLinkInfoEmpty' };\nreturn result;\n  }],\n  [1783556146, function() {\nconst result = { _: 'help.deepLinkInfo' };\nresult.flags = this.int();\nresult.update_app = !!(result.flags & 1);\nresult.message = this.string();\nif (result.flags & 2) result.entities = this.vector(this.predicate);\nreturn result;\n  }],\n  [289586518, function() {\nconst result = { _: 'savedPhoneContact' };\nresult.phone = this.string();\nresult.first_name = this.string();\nresult.last_name = this.string();\nresult.date = this.int();\nreturn result;\n  }],\n  [1304052993, function() {\nconst result = { _: 'account.takeout' };\nresult.id = this.long();\nreturn result;\n  }],\n  [3562713238, function() {\nconst result = { _: 'passwordKdfAlgoUnknown' };\nreturn result;\n  }],\n  [982592842, function() {\nconst result = { _: 'passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow' };\nresult.salt1 = this.bytes();\nresult.salt2 = this.bytes();\nresult.g = this.int();\nresult.p = this.bytes();\nreturn result;\n  }],\n  [4883767, function() {\nconst result = { _: 'securePasswordKdfAlgoUnknown' };\nreturn result;\n  }],\n  [3153255840, function() {\nconst result = { _: 'securePasswordKdfAlgoPBKDF2HMACSHA512iter100000' };\nresult.salt = this.bytes();\nreturn result;\n  }],\n  [2252807570, function() {\nconst result = { _: 'securePasswordKdfAlgoSHA512' };\nresult.salt = this.bytes();\nreturn result;\n  }],\n  [354925740, function() {\nconst result = { _: 'secureSecretSettings' };\nresult.secure_algo = this.predicate();\nresult.secure_secret = this.bytes();\nresult.secure_secret_id = this.long();\nreturn result;\n  }],\n  [2558588504, function() {\nconst result = { _: 'inputCheckPasswordEmpty' };\nreturn result;\n  }],\n  [3531600002, function() {\nconst result = { _: 'inputCheckPasswordSRP' };\nresult.srp_id = this.long();\nresult.A = this.bytes();\nresult.M1 = this.bytes();\nreturn result;\n  }],\n  [2191366618, function() {\nconst result = { _: 'secureRequiredType' };\nresult.flags = this.int();\nresult.native_names = !!(result.flags & 1);\nresult.selfie_required = !!(result.flags & 2);\nresult.translation_required = !!(result.flags & 4);\nresult.type = this.predicate();\nreturn result;\n  }],\n  [41187252, function() {\nconst result = { _: 'secureRequiredTypeOneOf' };\nresult.types = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [3216634967, function() {\nconst result = { _: 'help.passportConfigNotModified' };\nreturn result;\n  }],\n  [2694370991, function() {\nconst result = { _: 'help.passportConfig' };\nresult.hash = this.int();\nresult.countries_langs = this.predicate();\nreturn result;\n  }],\n  [488313413, function() {\nconst result = { _: 'inputAppEvent' };\nresult.time = this.double();\nresult.type = this.string();\nresult.peer = this.long();\nresult.data = this.predicate();\nreturn result;\n  }],\n  [3235781593, function() {\nconst result = { _: 'jsonObjectValue' };\nresult.key = this.string();\nresult.value = this.predicate();\nreturn result;\n  }],\n  [1064139624, function() {\nconst result = { _: 'jsonNull' };\nreturn result;\n  }],\n  [3342098026, function() {\nconst result = { _: 'jsonBool' };\nresult.value = this.predicate();\nreturn result;\n  }],\n  [736157604, function() {\nconst result = { _: 'jsonNumber' };\nresult.value = this.double();\nreturn result;\n  }],\n  [3072226938, function() {\nconst result = { _: 'jsonString' };\nresult.value = this.string();\nreturn result;\n  }],\n  [4148447075, function() {\nconst result = { _: 'jsonArray' };\nresult.value = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [2579616925, function() {\nconst result = { _: 'jsonObject' };\nresult.value = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [878078826, function() {\nconst result = { _: 'pageTableCell' };\nresult.flags = this.int();\nresult.header = !!(result.flags & 1);\nresult.align_center = !!(result.flags & 8);\nresult.align_right = !!(result.flags & 16);\nresult.valign_middle = !!(result.flags & 32);\nresult.valign_bottom = !!(result.flags & 64);\nif (result.flags & 128) result.text = this.predicate();\nif (result.flags & 2) result.colspan = this.int();\nif (result.flags & 4) result.rowspan = this.int();\nreturn result;\n  }],\n  [3770729957, function() {\nconst result = { _: 'pageTableRow' };\nresult.cells = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [1869903447, function() {\nconst result = { _: 'pageCaption' };\nresult.text = this.predicate();\nresult.credit = this.predicate();\nreturn result;\n  }],\n  [3106911949, function() {\nconst result = { _: 'pageListItemText' };\nresult.text = this.predicate();\nreturn result;\n  }],\n  [635466748, function() {\nconst result = { _: 'pageListItemBlocks' };\nresult.blocks = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [1577484359, function() {\nconst result = { _: 'pageListOrderedItemText' };\nresult.num = this.string();\nresult.text = this.predicate();\nreturn result;\n  }],\n  [2564655414, function() {\nconst result = { _: 'pageListOrderedItemBlocks' };\nresult.num = this.string();\nresult.blocks = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [3012615176, function() {\nconst result = { _: 'pageRelatedArticle' };\nresult.flags = this.int();\nresult.url = this.string();\nresult.webpage_id = this.long();\nif (result.flags & 1) result.title = this.string();\nif (result.flags & 2) result.description = this.string();\nif (result.flags & 4) result.photo_id = this.long();\nif (result.flags & 8) result.author = this.string();\nif (result.flags & 16) result.published_date = this.int();\nreturn result;\n  }],\n  [2556788493, function() {\nconst result = { _: 'page' };\nresult.flags = this.int();\nresult.part = !!(result.flags & 1);\nresult.rtl = !!(result.flags & 2);\nresult.v2 = !!(result.flags & 4);\nresult.url = this.string();\nresult.blocks = this.vector(this.predicate, false);\nresult.photos = this.vector(this.predicate, false);\nresult.documents = this.vector(this.predicate, false);\nif (result.flags & 8) result.views = this.int();\nreturn result;\n  }],\n  [2349199817, function() {\nconst result = { _: 'help.supportName' };\nresult.name = this.string();\nreturn result;\n  }],\n  [4088278765, function() {\nconst result = { _: 'help.userInfoEmpty' };\nreturn result;\n  }],\n  [32192344, function() {\nconst result = { _: 'help.userInfo' };\nresult.message = this.string();\nresult.entities = this.vector(this.predicate, false);\nresult.author = this.string();\nresult.date = this.int();\nreturn result;\n  }],\n  [1823064809, function() {\nconst result = { _: 'pollAnswer' };\nresult.text = this.string();\nresult.option = this.bytes();\nreturn result;\n  }],\n  [2262925665, function() {\nconst result = { _: 'poll' };\nresult.id = this.long();\nresult.flags = this.int();\nresult.closed = !!(result.flags & 1);\nresult.public_voters = !!(result.flags & 2);\nresult.multiple_choice = !!(result.flags & 4);\nresult.quiz = !!(result.flags & 8);\nresult.question = this.string();\nresult.answers = this.vector(this.predicate, false);\nif (result.flags & 16) result.close_period = this.int();\nif (result.flags & 32) result.close_date = this.int();\nreturn result;\n  }],\n  [997055186, function() {\nconst result = { _: 'pollAnswerVoters' };\nresult.flags = this.int();\nresult.chosen = !!(result.flags & 1);\nresult.correct = !!(result.flags & 2);\nresult.option = this.bytes();\nresult.voters = this.int();\nreturn result;\n  }],\n  [3135029667, function() {\nconst result = { _: 'pollResults' };\nresult.flags = this.int();\nresult.min = !!(result.flags & 1);\nif (result.flags & 2) result.results = this.vector(this.predicate);\nif (result.flags & 4) result.total_voters = this.int();\nif (result.flags & 8) result.recent_voters = this.vector(this.int);\nif (result.flags & 16) result.solution = this.string();\nif (result.flags & 16) result.solution_entities = this.vector(this.predicate);\nreturn result;\n  }],\n  [4030849616, function() {\nconst result = { _: 'chatOnlines' };\nresult.onlines = this.int();\nreturn result;\n  }],\n  [1202287072, function() {\nconst result = { _: 'statsURL' };\nresult.url = this.string();\nreturn result;\n  }],\n  [1605510357, function() {\nconst result = { _: 'chatAdminRights' };\nresult.flags = this.int();\nresult.change_info = !!(result.flags & 1);\nresult.post_messages = !!(result.flags & 2);\nresult.edit_messages = !!(result.flags & 4);\nresult.delete_messages = !!(result.flags & 8);\nresult.ban_users = !!(result.flags & 16);\nresult.invite_users = !!(result.flags & 32);\nresult.pin_messages = !!(result.flags & 128);\nresult.add_admins = !!(result.flags & 512);\nreturn result;\n  }],\n  [2668758040, function() {\nconst result = { _: 'chatBannedRights' };\nresult.flags = this.int();\nresult.view_messages = !!(result.flags & 1);\nresult.send_messages = !!(result.flags & 2);\nresult.send_media = !!(result.flags & 4);\nresult.send_stickers = !!(result.flags & 8);\nresult.send_gifs = !!(result.flags & 16);\nresult.send_games = !!(result.flags & 32);\nresult.send_inline = !!(result.flags & 64);\nresult.embed_links = !!(result.flags & 128);\nresult.send_polls = !!(result.flags & 256);\nresult.change_info = !!(result.flags & 1024);\nresult.invite_users = !!(result.flags & 32768);\nresult.pin_messages = !!(result.flags & 131072);\nresult.until_date = this.int();\nreturn result;\n  }],\n  [3861952889, function() {\nconst result = { _: 'inputWallPaper' };\nresult.id = this.long();\nresult.access_hash = this.long();\nreturn result;\n  }],\n  [1913199744, function() {\nconst result = { _: 'inputWallPaperSlug' };\nresult.slug = this.string();\nreturn result;\n  }],\n  [2217196460, function() {\nconst result = { _: 'inputWallPaperNoFile' };\nreturn result;\n  }],\n  [471437699, function() {\nconst result = { _: 'account.wallPapersNotModified' };\nreturn result;\n  }],\n  [1881892265, function() {\nconst result = { _: 'account.wallPapers' };\nresult.hash = this.int();\nresult.wallpapers = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [3737042563, function() {\nconst result = { _: 'codeSettings' };\nresult.flags = this.int();\nresult.allow_flashcall = !!(result.flags & 1);\nresult.current_number = !!(result.flags & 2);\nresult.allow_app_hash = !!(result.flags & 16);\nreturn result;\n  }],\n  [84438264, function() {\nconst result = { _: 'wallPaperSettings' };\nresult.flags = this.int();\nresult.blur = !!(result.flags & 2);\nresult.motion = !!(result.flags & 4);\nif (result.flags & 1) result.background_color = this.int();\nif (result.flags & 16) result.second_background_color = this.int();\nif (result.flags & 8) result.intensity = this.int();\nif (result.flags & 16) result.rotation = this.int();\nreturn result;\n  }],\n  [3762434803, function() {\nconst result = { _: 'autoDownloadSettings' };\nresult.flags = this.int();\nresult.disabled = !!(result.flags & 1);\nresult.video_preload_large = !!(result.flags & 2);\nresult.audio_preload_next = !!(result.flags & 4);\nresult.phonecalls_less_data = !!(result.flags & 8);\nresult.photo_size_max = this.int();\nresult.video_size_max = this.int();\nresult.file_size_max = this.int();\nresult.video_upload_maxbitrate = this.int();\nreturn result;\n  }],\n  [1674235686, function() {\nconst result = { _: 'account.autoDownloadSettings' };\nresult.low = this.predicate();\nresult.medium = this.predicate();\nresult.high = this.predicate();\nreturn result;\n  }],\n  [3585325561, function() {\nconst result = { _: 'emojiKeyword' };\nresult.keyword = this.string();\nresult.emoticons = this.vector(this.string, false);\nreturn result;\n  }],\n  [594408994, function() {\nconst result = { _: 'emojiKeywordDeleted' };\nresult.keyword = this.string();\nresult.emoticons = this.vector(this.string, false);\nreturn result;\n  }],\n  [1556570557, function() {\nconst result = { _: 'emojiKeywordsDifference' };\nresult.lang_code = this.string();\nresult.from_version = this.int();\nresult.version = this.int();\nresult.keywords = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [2775937949, function() {\nconst result = { _: 'emojiURL' };\nresult.url = this.string();\nreturn result;\n  }],\n  [3019592545, function() {\nconst result = { _: 'emojiLanguage' };\nresult.lang_code = this.string();\nreturn result;\n  }],\n  [3162490573, function() {\nconst result = { _: 'fileLocationToBeDeprecated' };\nresult.volume_id = this.long();\nresult.local_id = this.int();\nreturn result;\n  }],\n  [4283715173, function() {\nconst result = { _: 'folder' };\nresult.flags = this.int();\nresult.autofill_new_broadcasts = !!(result.flags & 1);\nresult.autofill_public_groups = !!(result.flags & 2);\nresult.autofill_new_correspondents = !!(result.flags & 4);\nresult.id = this.int();\nresult.title = this.string();\nif (result.flags & 8) result.photo = this.predicate();\nreturn result;\n  }],\n  [4224893590, function() {\nconst result = { _: 'inputFolderPeer' };\nresult.peer = this.predicate();\nresult.folder_id = this.int();\nreturn result;\n  }],\n  [3921323624, function() {\nconst result = { _: 'folderPeer' };\nresult.peer = this.predicate();\nresult.folder_id = this.int();\nreturn result;\n  }],\n  [3896830975, function() {\nconst result = { _: 'messages.searchCounter' };\nresult.flags = this.int();\nresult.inexact = !!(result.flags & 2);\nresult.filter = this.predicate();\nresult.count = this.int();\nreturn result;\n  }],\n  [2463316494, function() {\nconst result = { _: 'urlAuthResultRequest' };\nresult.flags = this.int();\nresult.request_write_access = !!(result.flags & 1);\nresult.bot = this.predicate();\nresult.domain = this.string();\nreturn result;\n  }],\n  [2408320590, function() {\nconst result = { _: 'urlAuthResultAccepted' };\nresult.url = this.string();\nreturn result;\n  }],\n  [2849430303, function() {\nconst result = { _: 'urlAuthResultDefault' };\nreturn result;\n  }],\n  [3216354699, function() {\nconst result = { _: 'channelLocationEmpty' };\nreturn result;\n  }],\n  [547062491, function() {\nconst result = { _: 'channelLocation' };\nresult.geo_point = this.predicate();\nresult.address = this.string();\nreturn result;\n  }],\n  [3393592157, function() {\nconst result = { _: 'peerLocated' };\nresult.peer = this.predicate();\nresult.expires = this.int();\nresult.distance = this.int();\nreturn result;\n  }],\n  [4176226379, function() {\nconst result = { _: 'peerSelfLocated' };\nresult.expires = this.int();\nreturn result;\n  }],\n  [3497176244, function() {\nconst result = { _: 'restrictionReason' };\nresult.platform = this.string();\nresult.reason = this.string();\nresult.text = this.string();\nreturn result;\n  }],\n  [1012306921, function() {\nconst result = { _: 'inputTheme' };\nresult.id = this.long();\nresult.access_hash = this.long();\nreturn result;\n  }],\n  [4119399921, function() {\nconst result = { _: 'inputThemeSlug' };\nresult.slug = this.string();\nreturn result;\n  }],\n  [42930452, function() {\nconst result = { _: 'theme' };\nresult.flags = this.int();\nresult.creator = !!(result.flags & 1);\nresult.default = !!(result.flags & 2);\nresult.id = this.long();\nresult.access_hash = this.long();\nresult.slug = this.string();\nresult.title = this.string();\nif (result.flags & 4) result.document = this.predicate();\nif (result.flags & 8) result.settings = this.predicate();\nresult.installs_count = this.int();\nreturn result;\n  }],\n  [4095653410, function() {\nconst result = { _: 'account.themesNotModified' };\nreturn result;\n  }],\n  [2137482273, function() {\nconst result = { _: 'account.themes' };\nresult.hash = this.int();\nresult.themes = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [1654593920, function() {\nconst result = { _: 'auth.loginToken' };\nresult.expires = this.int();\nresult.token = this.bytes();\nreturn result;\n  }],\n  [110008598, function() {\nconst result = { _: 'auth.loginTokenMigrateTo' };\nresult.dc_id = this.int();\nresult.token = this.bytes();\nreturn result;\n  }],\n  [957176926, function() {\nconst result = { _: 'auth.loginTokenSuccess' };\nresult.authorization = this.predicate();\nreturn result;\n  }],\n  [1474462241, function() {\nconst result = { _: 'account.contentSettings' };\nresult.flags = this.int();\nresult.sensitive_enabled = !!(result.flags & 1);\nresult.sensitive_can_change = !!(result.flags & 2);\nreturn result;\n  }],\n  [2837970629, function() {\nconst result = { _: 'messages.inactiveChats' };\nresult.dates = this.vector(this.int, false);\nresult.chats = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [3282117730, function() {\nconst result = { _: 'baseThemeClassic' };\nreturn result;\n  }],\n  [4225242760, function() {\nconst result = { _: 'baseThemeDay' };\nreturn result;\n  }],\n  [3081969320, function() {\nconst result = { _: 'baseThemeNight' };\nreturn result;\n  }],\n  [1834973166, function() {\nconst result = { _: 'baseThemeTinted' };\nreturn result;\n  }],\n  [1527845466, function() {\nconst result = { _: 'baseThemeArctic' };\nreturn result;\n  }],\n  [3176168657, function() {\nconst result = { _: 'inputThemeSettings' };\nresult.flags = this.int();\nresult.base_theme = this.predicate();\nresult.accent_color = this.int();\nif (result.flags & 1) result.message_top_color = this.int();\nif (result.flags & 1) result.message_bottom_color = this.int();\nif (result.flags & 2) result.wallpaper = this.predicate();\nif (result.flags & 2) result.wallpaper_settings = this.predicate();\nreturn result;\n  }],\n  [2618595402, function() {\nconst result = { _: 'themeSettings' };\nresult.flags = this.int();\nresult.base_theme = this.predicate();\nresult.accent_color = this.int();\nif (result.flags & 1) result.message_top_color = this.int();\nif (result.flags & 1) result.message_bottom_color = this.int();\nif (result.flags & 2) result.wallpaper = this.predicate();\nreturn result;\n  }],\n  [1421174295, function() {\nconst result = { _: 'webPageAttributeTheme' };\nresult.flags = this.int();\nif (result.flags & 1) result.documents = this.vector(this.predicate);\nif (result.flags & 2) result.settings = this.predicate();\nreturn result;\n  }],\n  [2727236953, function() {\nconst result = { _: 'messageUserVote' };\nresult.user_id = this.int();\nresult.option = this.bytes();\nresult.date = this.int();\nreturn result;\n  }],\n  [909603888, function() {\nconst result = { _: 'messageUserVoteInputOption' };\nresult.user_id = this.int();\nresult.date = this.int();\nreturn result;\n  }],\n  [244310238, function() {\nconst result = { _: 'messageUserVoteMultiple' };\nresult.user_id = this.int();\nresult.options = this.vector(this.bytes, false);\nresult.date = this.int();\nreturn result;\n  }],\n  [136574537, function() {\nconst result = { _: 'messages.votesList' };\nresult.flags = this.int();\nresult.count = this.int();\nresult.votes = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nif (result.flags & 1) result.next_offset = this.string();\nreturn result;\n  }],\n  [4117234314, function() {\nconst result = { _: 'bankCardOpenUrl' };\nresult.url = this.string();\nresult.name = this.string();\nreturn result;\n  }],\n  [1042605427, function() {\nconst result = { _: 'payments.bankCardData' };\nresult.title = this.string();\nresult.open_urls = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [1949890536, function() {\nconst result = { _: 'dialogFilter' };\nresult.flags = this.int();\nresult.contacts = !!(result.flags & 1);\nresult.non_contacts = !!(result.flags & 2);\nresult.groups = !!(result.flags & 4);\nresult.broadcasts = !!(result.flags & 8);\nresult.bots = !!(result.flags & 16);\nresult.exclude_muted = !!(result.flags & 2048);\nresult.exclude_read = !!(result.flags & 4096);\nresult.exclude_archived = !!(result.flags & 8192);\nresult.id = this.int();\nresult.title = this.string();\nif (result.flags & 33554432) result.emoticon = this.string();\nresult.pinned_peers = this.vector(this.predicate, false);\nresult.include_peers = this.vector(this.predicate, false);\nresult.exclude_peers = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [2004110666, function() {\nconst result = { _: 'dialogFilterSuggested' };\nresult.filter = this.predicate();\nresult.description = this.string();\nreturn result;\n  }],\n  [3057118639, function() {\nconst result = { _: 'statsDateRangeDays' };\nresult.min_date = this.int();\nresult.max_date = this.int();\nreturn result;\n  }],\n  [3410210014, function() {\nconst result = { _: 'statsAbsValueAndPrev' };\nresult.current = this.double();\nresult.previous = this.double();\nreturn result;\n  }],\n  [3419287520, function() {\nconst result = { _: 'statsPercentValue' };\nresult.part = this.double();\nresult.total = this.double();\nreturn result;\n  }],\n  [1244130093, function() {\nconst result = { _: 'statsGraphAsync' };\nresult.token = this.string();\nreturn result;\n  }],\n  [3202127906, function() {\nconst result = { _: 'statsGraphError' };\nresult.error = this.string();\nreturn result;\n  }],\n  [2393138358, function() {\nconst result = { _: 'statsGraph' };\nresult.flags = this.int();\nresult.json = this.predicate();\nif (result.flags & 1) result.zoom_token = this.string();\nreturn result;\n  }],\n  [2907687357, function() {\nconst result = { _: 'messageInteractionCounters' };\nresult.msg_id = this.int();\nresult.views = this.int();\nresult.forwards = this.int();\nreturn result;\n  }],\n  [3187114900, function() {\nconst result = { _: 'stats.broadcastStats' };\nresult.period = this.predicate();\nresult.followers = this.predicate();\nresult.views_per_post = this.predicate();\nresult.shares_per_post = this.predicate();\nresult.enabled_notifications = this.predicate();\nresult.growth_graph = this.predicate();\nresult.followers_graph = this.predicate();\nresult.mute_graph = this.predicate();\nresult.top_hours_graph = this.predicate();\nresult.interactions_graph = this.predicate();\nresult.iv_interactions_graph = this.predicate();\nresult.views_by_source_graph = this.predicate();\nresult.new_followers_by_source_graph = this.predicate();\nresult.languages_graph = this.predicate();\nresult.recent_message_interactions = this.vector(this.predicate, false);\nreturn result;\n  }],\n  [2566302837, function() {\nconst result = { _: 'help.promoDataEmpty' };\nresult.expires = this.int();\nreturn result;\n  }],\n  [2352576831, function() {\nconst result = { _: 'help.promoData' };\nresult.flags = this.int();\nresult.proxy = !!(result.flags & 1);\nresult.expires = this.int();\nresult.peer = this.predicate();\nresult.chats = this.vector(this.predicate, false);\nresult.users = this.vector(this.predicate, false);\nif (result.flags & 2) result.psa_type = this.string();\nif (result.flags & 4) result.psa_message = this.string();\nreturn result;\n  }],\n]);\n/* harmony default export */ __webpack_exports__[\"default\"] = (parserMap);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvdGwvcGFyc2VyL2luZGV4LmpzPzM1YTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ2Usd0VBQVMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvdGwvcGFyc2VyL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcGFyc2VyTWFwID0gbmV3IE1hcChbXG4gIFs0ODE2NzQyNjEsIGZ1bmN0aW9uKCkge1xucmV0dXJuIHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCB0cnVlKTtcbiAgfV0sXG4gIFs4NTMzNzE4NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtdF9yZXNQUScgfTtcbnJlc3VsdC5ub25jZSA9IHRoaXMuaW50MTI4KCk7XG5yZXN1bHQuc2VydmVyX25vbmNlID0gdGhpcy5pbnQxMjgoKTtcbnJlc3VsdC5wcSA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC5zZXJ2ZXJfcHVibGljX2tleV9maW5nZXJwcmludHMgPSB0aGlzLnZlY3Rvcih0aGlzLmxvbmcsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjIxMTAxMTMwOCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtdF9wX3FfaW5uZXJfZGF0YScgfTtcbnJlc3VsdC5wcSA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC5wID0gdGhpcy5ieXRlcygpO1xucmVzdWx0LnEgPSB0aGlzLmJ5dGVzKCk7XG5yZXN1bHQubm9uY2UgPSB0aGlzLmludDEyOCgpO1xucmVzdWx0LnNlcnZlcl9ub25jZSA9IHRoaXMuaW50MTI4KCk7XG5yZXN1bHQubmV3X25vbmNlID0gdGhpcy5pbnQyNTYoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjg1MTQzMDI5MywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtdF9wX3FfaW5uZXJfZGF0YV9kYycgfTtcbnJlc3VsdC5wcSA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC5wID0gdGhpcy5ieXRlcygpO1xucmVzdWx0LnEgPSB0aGlzLmJ5dGVzKCk7XG5yZXN1bHQubm9uY2UgPSB0aGlzLmludDEyOCgpO1xucmVzdWx0LnNlcnZlcl9ub25jZSA9IHRoaXMuaW50MTI4KCk7XG5yZXN1bHQubmV3X25vbmNlID0gdGhpcy5pbnQyNTYoKTtcbnJlc3VsdC5kYyA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzEwMTM2MTM3ODAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbXRfcF9xX2lubmVyX2RhdGFfdGVtcCcgfTtcbnJlc3VsdC5wcSA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC5wID0gdGhpcy5ieXRlcygpO1xucmVzdWx0LnEgPSB0aGlzLmJ5dGVzKCk7XG5yZXN1bHQubm9uY2UgPSB0aGlzLmludDEyOCgpO1xucmVzdWx0LnNlcnZlcl9ub25jZSA9IHRoaXMuaW50MTI4KCk7XG5yZXN1bHQubmV3X25vbmNlID0gdGhpcy5pbnQyNTYoKTtcbnJlc3VsdC5leHBpcmVzX2luID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTQ1OTQ3ODQwOCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtdF9wX3FfaW5uZXJfZGF0YV90ZW1wX2RjJyB9O1xucmVzdWx0LnBxID0gdGhpcy5ieXRlcygpO1xucmVzdWx0LnAgPSB0aGlzLmJ5dGVzKCk7XG5yZXN1bHQucSA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC5ub25jZSA9IHRoaXMuaW50MTI4KCk7XG5yZXN1bHQuc2VydmVyX25vbmNlID0gdGhpcy5pbnQxMjgoKTtcbnJlc3VsdC5uZXdfbm9uY2UgPSB0aGlzLmludDI1NigpO1xucmVzdWx0LmRjID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5leHBpcmVzX2luID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjA0MzM0ODA2MSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtdF9zZXJ2ZXJfREhfcGFyYW1zX2ZhaWwnIH07XG5yZXN1bHQubm9uY2UgPSB0aGlzLmludDEyOCgpO1xucmVzdWx0LnNlcnZlcl9ub25jZSA9IHRoaXMuaW50MTI4KCk7XG5yZXN1bHQubmV3X25vbmNlX2hhc2ggPSB0aGlzLmludDEyOCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNTA0ODY3MTY0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ210X3NlcnZlcl9ESF9wYXJhbXNfb2snIH07XG5yZXN1bHQubm9uY2UgPSB0aGlzLmludDEyOCgpO1xucmVzdWx0LnNlcnZlcl9ub25jZSA9IHRoaXMuaW50MTI4KCk7XG5yZXN1bHQuZW5jcnlwdGVkX2Fuc3dlciA9IHRoaXMuYnl0ZXMoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzA0NTY1ODA0MiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtdF9zZXJ2ZXJfREhfaW5uZXJfZGF0YScgfTtcbnJlc3VsdC5ub25jZSA9IHRoaXMuaW50MTI4KCk7XG5yZXN1bHQuc2VydmVyX25vbmNlID0gdGhpcy5pbnQxMjgoKTtcbnJlc3VsdC5nID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5kaF9wcmltZSA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC5nX2EgPSB0aGlzLmJ5dGVzKCk7XG5yZXN1bHQuc2VydmVyX3RpbWUgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxNzE1NzEzNjIwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ210X2NsaWVudF9ESF9pbm5lcl9kYXRhJyB9O1xucmVzdWx0Lm5vbmNlID0gdGhpcy5pbnQxMjgoKTtcbnJlc3VsdC5zZXJ2ZXJfbm9uY2UgPSB0aGlzLmludDEyOCgpO1xucmVzdWx0LnJldHJ5X2lkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuZ19iID0gdGhpcy5ieXRlcygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMDAzMjIyODM2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ210X2RoX2dlbl9vaycgfTtcbnJlc3VsdC5ub25jZSA9IHRoaXMuaW50MTI4KCk7XG5yZXN1bHQuc2VydmVyX25vbmNlID0gdGhpcy5pbnQxMjgoKTtcbnJlc3VsdC5uZXdfbm9uY2VfaGFzaDEgPSB0aGlzLmludDEyOCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMTg4ODMxMTYxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ210X2RoX2dlbl9yZXRyeScgfTtcbnJlc3VsdC5ub25jZSA9IHRoaXMuaW50MTI4KCk7XG5yZXN1bHQuc2VydmVyX25vbmNlID0gdGhpcy5pbnQxMjgoKTtcbnJlc3VsdC5uZXdfbm9uY2VfaGFzaDIgPSB0aGlzLmludDEyOCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNzk1MzUxNTU0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ210X2RoX2dlbl9mYWlsJyB9O1xucmVzdWx0Lm5vbmNlID0gdGhpcy5pbnQxMjgoKTtcbnJlc3VsdC5zZXJ2ZXJfbm9uY2UgPSB0aGlzLmludDEyOCgpO1xucmVzdWx0Lm5ld19ub25jZV9oYXNoMyA9IHRoaXMuaW50MTI4KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQwODI5MjA3MDUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbXRfcnBjX3Jlc3VsdCcgfTtcbnJlc3VsdC5yZXFfbXNnX2lkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQucmVzdWx0ID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNTU4MTU2MzEzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ210X3JwY19lcnJvcicgfTtcbnJlc3VsdC5lcnJvcl9jb2RlID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5lcnJvcl9tZXNzYWdlID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTU3OTg2NDk0MiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtdF9ycGNfYW5zd2VyX3Vua25vd24nIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM0NDcyNTIzNTgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbXRfcnBjX2Fuc3dlcl9kcm9wcGVkX3J1bm5pbmcnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI3NTUzMTk5OTEsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbXRfcnBjX2Fuc3dlcl9kcm9wcGVkJyB9O1xucmVzdWx0Lm1zZ19pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LnNlcV9ubyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuYnl0ZXMgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxNTU4MzQ4NDQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbXRfZnV0dXJlX3NhbHQnIH07XG5yZXN1bHQudmFsaWRfc2luY2UgPSB0aGlzLmludCgpO1xucmVzdWx0LnZhbGlkX3VudGlsID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5zYWx0ID0gdGhpcy5sb25nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI5MjQ0ODA2NjEsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbXRfZnV0dXJlX3NhbHRzJyB9O1xucmVzdWx0LnJlcV9tc2dfaWQgPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC5ub3cgPSB0aGlzLmludCgpO1xucmVzdWx0LnNhbHRzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbODgwMjQzNjUzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ210X3BvbmcnIH07XG5yZXN1bHQubXNnX2lkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQucGluZ19pZCA9IHRoaXMubG9uZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNjYzNTE2NDI0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ210X25ld19zZXNzaW9uX2NyZWF0ZWQnIH07XG5yZXN1bHQuZmlyc3RfbXNnX2lkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQudW5pcXVlX2lkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuc2VydmVyX3NhbHQgPSB0aGlzLmxvbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTk0NTIzNzcyNCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtdF9tc2dfY29udGFpbmVyJyB9O1xucmVzdWx0Lm1lc3NhZ2VzID0gdGhpcy52ZWN0b3IodGhpcy5tdF9tZXNzYWdlLCB0cnVlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTUzODg0MzkyMSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtdF9tZXNzYWdlJyB9O1xucmVzdWx0Lm1zZ19pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LnNlcW5vID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5ieXRlcyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuYm9keSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM3NjQ0MDU5MzgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbXRfbXNnX2NvcHknIH07XG5yZXN1bHQub3JpZ19tZXNzYWdlID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbODEyODMwNjI1LCBmdW5jdGlvbigpIHtcbnJldHVybiB0aGlzLmd6aXAoKTtcbiAgfV0sXG4gIFsxNjU4MjM4MDQxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ210X21zZ3NfYWNrJyB9O1xucmVzdWx0Lm1zZ19pZHMgPSB0aGlzLnZlY3Rvcih0aGlzLmxvbmcsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjgxNzUyMTY4MSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtdF9iYWRfbXNnX25vdGlmaWNhdGlvbicgfTtcbnJlc3VsdC5iYWRfbXNnX2lkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuYmFkX21zZ19zZXFubyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZXJyb3JfY29kZSA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM5ODc0MjQzNzksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbXRfYmFkX3NlcnZlcl9zYWx0JyB9O1xucmVzdWx0LmJhZF9tc2dfaWQgPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC5iYWRfbXNnX3NlcW5vID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5lcnJvcl9jb2RlID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5uZXdfc2VydmVyX3NhbHQgPSB0aGlzLmxvbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjEwNTk0MDQ4OCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtdF9tc2dfcmVzZW5kX3JlcScgfTtcbnJlc3VsdC5tc2dfaWRzID0gdGhpcy52ZWN0b3IodGhpcy5sb25nLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIyNDkyNDMzNzEsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbXRfbXNnX3Jlc2VuZF9hbnNfcmVxJyB9O1xucmVzdWx0Lm1zZ19pZHMgPSB0aGlzLnZlY3Rvcih0aGlzLmxvbmcsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzY2NDM3ODcwNiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtdF9tc2dzX3N0YXRlX3JlcScgfTtcbnJlc3VsdC5tc2dfaWRzID0gdGhpcy52ZWN0b3IodGhpcy5sb25nLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzgxNzA0MzE3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ210X21zZ3Nfc3RhdGVfaW5mbycgfTtcbnJlc3VsdC5yZXFfbXNnX2lkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuaW5mbyA9IHRoaXMuYnl0ZXMoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjM2MTQ0NjcwNSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtdF9tc2dzX2FsbF9pbmZvJyB9O1xucmVzdWx0Lm1zZ19pZHMgPSB0aGlzLnZlY3Rvcih0aGlzLmxvbmcsIGZhbHNlKTtcbnJlc3VsdC5pbmZvID0gdGhpcy5ieXRlcygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs2NjE0NzA5MTgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbXRfbXNnX2RldGFpbGVkX2luZm8nIH07XG5yZXN1bHQubXNnX2lkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuYW5zd2VyX21zZ19pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmJ5dGVzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5zdGF0dXMgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMTU3ODE5NjE1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ210X21zZ19uZXdfZGV0YWlsZWRfaW5mbycgfTtcbnJlc3VsdC5hbnN3ZXJfbXNnX2lkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuYnl0ZXMgPSB0aGlzLmludCgpO1xucmVzdWx0LnN0YXR1cyA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE5NzM2Nzk5NzMsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbXRfYmluZF9hdXRoX2tleV9pbm5lcicgfTtcbnJlc3VsdC5ub25jZSA9IHRoaXMubG9uZygpO1xucmVzdWx0LnRlbXBfYXV0aF9rZXlfaWQgPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC5wZXJtX2F1dGhfa2V5X2lkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQudGVtcF9zZXNzaW9uX2lkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuZXhwaXJlc19hdCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQxMzM1NDQ0MDQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbXRfZGVzdHJveV9hdXRoX2tleV9vaycgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTc4MjAxMTc3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ210X2Rlc3Ryb3lfYXV0aF9rZXlfbm9uZScgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzkyNjk1NjgxOSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtdF9kZXN0cm95X2F1dGhfa2V5X2ZhaWwnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM3OTM3NjU4ODQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbXRfZGVzdHJveV9zZXNzaW9uX29rJyB9O1xucmVzdWx0LnNlc3Npb25faWQgPSB0aGlzLmxvbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTY1ODAxNTk0NSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtdF9kZXN0cm95X3Nlc3Npb25fbm9uZScgfTtcbnJlc3VsdC5zZXNzaW9uX2lkID0gdGhpcy5sb25nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMxNjIwODUxNzUsIGZ1bmN0aW9uKCkge1xucmV0dXJuIGZhbHNlO1xuICB9XSxcbiAgWzI1NzQ0MTUyODUsIGZ1bmN0aW9uKCkge1xucmV0dXJuIHRydWU7XG4gIH1dLFxuICBbMTA3MjU1MDcxMywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gdHJ1ZTtcbiAgfV0sXG4gIFs0ODE2NzQyNjEsIGZ1bmN0aW9uKCkge1xucmV0dXJuIHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCB0cnVlKTtcbiAgfV0sXG4gIFszMzAwNTIyNDI3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2Vycm9yJyB9O1xucmVzdWx0LmNvZGUgPSB0aGlzLmludCgpO1xucmVzdWx0LnRleHQgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxNDUwMzgwMjM2LCBmdW5jdGlvbigpIHtcbnJldHVybiBudWxsO1xuICB9XSxcbiAgWzIxMzQ1Nzk0MzQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRQZWVyRW1wdHknIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIxMDc2NzAyMTcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRQZWVyU2VsZicgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzk2MDkzNTM5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0UGVlckNoYXQnIH07XG5yZXN1bHQuY2hhdF9pZCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIwNzI5MzU5MTAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRQZWVyVXNlcicgfTtcbnJlc3VsdC51c2VyX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5hY2Nlc3NfaGFzaCA9IHRoaXMubG9uZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs1NDgyNTM0MzIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRQZWVyQ2hhbm5lbCcgfTtcbnJlc3VsdC5jaGFubmVsX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5hY2Nlc3NfaGFzaCA9IHRoaXMubG9uZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszOTgxMjM3NTAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRQZWVyVXNlckZyb21NZXNzYWdlJyB9O1xucmVzdWx0LnBlZXIgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0Lm1zZ19pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQudXNlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI2MjcwNzM5NzksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRQZWVyQ2hhbm5lbEZyb21NZXNzYWdlJyB9O1xucmVzdWx0LnBlZXIgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0Lm1zZ19pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuY2hhbm5lbF9pZCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMxMTI3MzIzNjcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRVc2VyRW1wdHknIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQxNTY2NjYxNzUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRVc2VyU2VsZicgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzYyNjU3NTg5NCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dFVzZXInIH07XG5yZXN1bHQudXNlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuYWNjZXNzX2hhc2ggPSB0aGlzLmxvbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNzU2MTE4OTM1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0VXNlckZyb21NZXNzYWdlJyB9O1xucmVzdWx0LnBlZXIgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0Lm1zZ19pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQudXNlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQwODY0Nzg4MzYsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRQaG9uZUNvbnRhY3QnIH07XG5yZXN1bHQuY2xpZW50X2lkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQucGhvbmUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmZpcnN0X25hbWUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0Lmxhc3RfbmFtZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQxMTM1NjAxOTEsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRGaWxlJyB9O1xucmVzdWx0LmlkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQucGFydHMgPSB0aGlzLmludCgpO1xucmVzdWx0Lm5hbWUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0Lm1kNV9jaGVja3N1bSA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQxOTk0ODQzNDEsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRGaWxlQmlnJyB9O1xucmVzdWx0LmlkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQucGFydHMgPSB0aGlzLmludCgpO1xucmVzdWx0Lm5hbWUgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNTIzMTk4ODQ3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0TWVkaWFFbXB0eScgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNTA1OTY5OTI0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0TWVkaWFVcGxvYWRlZFBob3RvJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5maWxlID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQuc3RpY2tlcnMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSk7XG5pZiAocmVzdWx0LmZsYWdzICYgMikgcmVzdWx0LnR0bF9zZWNvbmRzID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzAxNTMxMjk0OSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dE1lZGlhUGhvdG8nIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LmlkID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQudHRsX3NlY29uZHMgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0MTkwMzg4NTQ4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0TWVkaWFHZW9Qb2ludCcgfTtcbnJlc3VsdC5nZW9fcG9pbnQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0MTcxOTg4NDc1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0TWVkaWFDb250YWN0JyB9O1xucmVzdWx0LnBob25lX251bWJlciA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuZmlyc3RfbmFtZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQubGFzdF9uYW1lID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC52Y2FyZCA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE1MzA0NDc1NTMsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRNZWRpYVVwbG9hZGVkRG9jdW1lbnQnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0Lm5vc291bmRfdmlkZW8gPSAhIShyZXN1bHQuZmxhZ3MgJiA4KTtcbnJlc3VsdC5maWxlID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA0KSByZXN1bHQudGh1bWIgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0Lm1pbWVfdHlwZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuYXR0cmlidXRlcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LnN0aWNrZXJzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIpIHJlc3VsdC50dGxfc2Vjb25kcyA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzU5ODQxODM4NiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dE1lZGlhRG9jdW1lbnQnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LmlkID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQudHRsX3NlY29uZHMgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMjQyMDA3NTY5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0TWVkaWFWZW51ZScgfTtcbnJlc3VsdC5nZW9fcG9pbnQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnRpdGxlID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5hZGRyZXNzID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5wcm92aWRlciA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQudmVudWVfaWQgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnZlbnVlX3R5cGUgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMjEyMzk1NzczLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0TWVkaWFHaWZFeHRlcm5hbCcgfTtcbnJlc3VsdC51cmwgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnEgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszODU0MzAyNzQ2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0TWVkaWFQaG90b0V4dGVybmFsJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC51cmwgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC50dGxfc2Vjb25kcyA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQyMTY1MTE2NDEsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRNZWRpYURvY3VtZW50RXh0ZXJuYWwnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LnVybCA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LnR0bF9zZWNvbmRzID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzU0NDEzODczOSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dE1lZGlhR2FtZScgfTtcbnJlc3VsdC5pZCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQxMDgzNTkzNjMsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRNZWRpYUludm9pY2UnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LnRpdGxlID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5kZXNjcmlwdGlvbiA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LnBob3RvID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5pbnZvaWNlID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5wYXlsb2FkID0gdGhpcy5ieXRlcygpO1xucmVzdWx0LnByb3ZpZGVyID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5wcm92aWRlcl9kYXRhID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5zdGFydF9wYXJhbSA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM0NjEyNTE4MzcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRNZWRpYUdlb0xpdmUnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LnN0b3BwZWQgPSAhIShyZXN1bHQuZmxhZ3MgJiAxKTtcbnJlc3VsdC5nZW9fcG9pbnQgPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIpIHJlc3VsdC5wZXJpb2QgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNjE0MTY0MzMsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRNZWRpYVBvbGwnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LnBvbGwgPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC5jb3JyZWN0X2Fuc3dlcnMgPSB0aGlzLnZlY3Rvcih0aGlzLmJ5dGVzKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAyKSByZXN1bHQuc29sdXRpb24gPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIpIHJlc3VsdC5zb2x1dGlvbl9lbnRpdGllcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzg2NjA4MzE5NSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dE1lZGlhRGljZScgfTtcbnJlc3VsdC5lbW90aWNvbiA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQ4MDU0NjY0NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dENoYXRQaG90b0VtcHR5JyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNDU3NjIxOTQwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0Q2hhdFVwbG9hZGVkUGhvdG8nIH07XG5yZXN1bHQuZmlsZSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIzMDM5NjI0MjMsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRDaGF0UGhvdG8nIH07XG5yZXN1bHQuaWQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszODM3ODYyODcwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0R2VvUG9pbnRFbXB0eScgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDA4ODkwMDgwOSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dEdlb1BvaW50JyB9O1xucmVzdWx0LmxhdCA9IHRoaXMuZG91YmxlKCk7XG5yZXN1bHQubG9uZyA9IHRoaXMuZG91YmxlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQ4MzkwMTE5NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dFBob3RvRW1wdHknIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzEwMDE2MzQxMjIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRQaG90bycgfTtcbnJlc3VsdC5pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmFjY2Vzc19oYXNoID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuZmlsZV9yZWZlcmVuY2UgPSB0aGlzLmJ5dGVzKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM3NTU2NTAwMTcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRGaWxlTG9jYXRpb24nIH07XG5yZXN1bHQudm9sdW1lX2lkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQubG9jYWxfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LnNlY3JldCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmZpbGVfcmVmZXJlbmNlID0gdGhpcy5ieXRlcygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0MTEyNzM1NTczLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0RW5jcnlwdGVkRmlsZUxvY2F0aW9uJyB9O1xucmVzdWx0LmlkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuYWNjZXNzX2hhc2ggPSB0aGlzLmxvbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzEzNDIyMzc0OCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dERvY3VtZW50RmlsZUxvY2F0aW9uJyB9O1xucmVzdWx0LmlkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuYWNjZXNzX2hhc2ggPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC5maWxlX3JlZmVyZW5jZSA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC50aHVtYl9zaXplID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzQxODg3NzQ4MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dFNlY3VyZUZpbGVMb2NhdGlvbicgfTtcbnJlc3VsdC5pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmFjY2Vzc19oYXNoID0gdGhpcy5sb25nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzcwMDM0MDM3NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dFRha2VvdXRGaWxlTG9jYXRpb24nIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzEwNzUzMjI4NzgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRQaG90b0ZpbGVMb2NhdGlvbicgfTtcbnJlc3VsdC5pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmFjY2Vzc19oYXNoID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuZmlsZV9yZWZlcmVuY2UgPSB0aGlzLmJ5dGVzKCk7XG5yZXN1bHQudGh1bWJfc2l6ZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM2MjczMTI4ODMsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRQaG90b0xlZ2FjeUZpbGVMb2NhdGlvbicgfTtcbnJlc3VsdC5pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmFjY2Vzc19oYXNoID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuZmlsZV9yZWZlcmVuY2UgPSB0aGlzLmJ5dGVzKCk7XG5yZXN1bHQudm9sdW1lX2lkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQubG9jYWxfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LnNlY3JldCA9IHRoaXMubG9uZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs2NjgzNzU0NDcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRQZWVyUGhvdG9GaWxlTG9jYXRpb24nIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LmJpZyA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmVzdWx0LnBlZXIgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnZvbHVtZV9pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmxvY2FsX2lkID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjMwMzUzNjQxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0U3RpY2tlclNldFRodW1iJyB9O1xucmVzdWx0LnN0aWNrZXJzZXQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnZvbHVtZV9pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmxvY2FsX2lkID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjY0NTY3MTAyMSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwZWVyVXNlcicgfTtcbnJlc3VsdC51c2VyX2lkID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzEzNDI1MjQ3NSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwZWVyQ2hhdCcgfTtcbnJlc3VsdC5jaGF0X2lkID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzE4NTQzNTk1NCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwZWVyQ2hhbm5lbCcgfTtcbnJlc3VsdC5jaGFubmVsX2lkID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjg2MTk3MjIyOSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzdG9yYWdlLmZpbGVVbmtub3duJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMDg2MDkxMDkwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3N0b3JhZ2UuZmlsZVBhcnRpYWwnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzgzMjI1NzQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnc3RvcmFnZS5maWxlSnBlZycgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzQwMzc4Njk3NSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzdG9yYWdlLmZpbGVHaWYnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE3Mjk3NTA0MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzdG9yYWdlLmZpbGVQbmcnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI5MjEyMjIyODUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnc3RvcmFnZS5maWxlUGRmJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMzg0Nzc3MzM1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3N0b3JhZ2UuZmlsZU1wMycgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTI1ODk0MTM3MiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzdG9yYWdlLmZpbGVNb3YnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMwMTY2NjMyNjgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnc3RvcmFnZS5maWxlTXA0JyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNzY5MDc1OTYsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnc3RvcmFnZS5maWxlV2VicCcgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNTM3MDIyNjUwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VzZXJFbXB0eScgfTtcbnJlc3VsdC5pZCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI0NzQ5MjQyMjUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXNlcicgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuc2VsZiA9ICEhKHJlc3VsdC5mbGFncyAmIDEwMjQpO1xucmVzdWx0LmNvbnRhY3QgPSAhIShyZXN1bHQuZmxhZ3MgJiAyMDQ4KTtcbnJlc3VsdC5tdXR1YWxfY29udGFjdCA9ICEhKHJlc3VsdC5mbGFncyAmIDQwOTYpO1xucmVzdWx0LmRlbGV0ZWQgPSAhIShyZXN1bHQuZmxhZ3MgJiA4MTkyKTtcbnJlc3VsdC5ib3QgPSAhIShyZXN1bHQuZmxhZ3MgJiAxNjM4NCk7XG5yZXN1bHQuYm90X2NoYXRfaGlzdG9yeSA9ICEhKHJlc3VsdC5mbGFncyAmIDMyNzY4KTtcbnJlc3VsdC5ib3Rfbm9jaGF0cyA9ICEhKHJlc3VsdC5mbGFncyAmIDY1NTM2KTtcbnJlc3VsdC52ZXJpZmllZCA9ICEhKHJlc3VsdC5mbGFncyAmIDEzMTA3Mik7XG5yZXN1bHQucmVzdHJpY3RlZCA9ICEhKHJlc3VsdC5mbGFncyAmIDI2MjE0NCk7XG5yZXN1bHQubWluID0gISEocmVzdWx0LmZsYWdzICYgMTA0ODU3Nik7XG5yZXN1bHQuYm90X2lubGluZV9nZW8gPSAhIShyZXN1bHQuZmxhZ3MgJiAyMDk3MTUyKTtcbnJlc3VsdC5zdXBwb3J0ID0gISEocmVzdWx0LmZsYWdzICYgODM4ODYwOCk7XG5yZXN1bHQuc2NhbSA9ICEhKHJlc3VsdC5mbGFncyAmIDE2Nzc3MjE2KTtcbnJlc3VsdC5pZCA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LmFjY2Vzc19oYXNoID0gdGhpcy5sb25nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMikgcmVzdWx0LmZpcnN0X25hbWUgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDQpIHJlc3VsdC5sYXN0X25hbWUgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDgpIHJlc3VsdC51c2VybmFtZSA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMTYpIHJlc3VsdC5waG9uZSA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMzIpIHJlc3VsdC5waG90byA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNjQpIHJlc3VsdC5zdGF0dXMgPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDE2Mzg0KSByZXN1bHQuYm90X2luZm9fdmVyc2lvbiA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMjYyMTQ0KSByZXN1bHQucmVzdHJpY3Rpb25fcmVhc29uID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDUyNDI4OCkgcmVzdWx0LmJvdF9pbmxpbmVfcGxhY2Vob2xkZXIgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDQxOTQzMDQpIHJlc3VsdC5sYW5nX2NvZGUgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMzI2NTYyMDE3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VzZXJQcm9maWxlUGhvdG9FbXB0eScgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzk3MzUzNzE2NCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1c2VyUHJvZmlsZVBob3RvJyB9O1xucmVzdWx0LnBob3RvX2lkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQucGhvdG9fc21hbGwgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnBob3RvX2JpZyA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuZGNfaWQgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxNjQ2NDY5ODUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXNlclN0YXR1c0VtcHR5JyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszOTg4MzM5MDE3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VzZXJTdGF0dXNPbmxpbmUnIH07XG5yZXN1bHQuZXhwaXJlcyA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzkyMDM3NzUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXNlclN0YXR1c09mZmxpbmUnIH07XG5yZXN1bHQud2FzX29ubGluZSA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM3OTg5NDI0NDksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXNlclN0YXR1c1JlY2VudGx5JyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMjk5NjA0NDQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXNlclN0YXR1c0xhc3RXZWVrJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMDExOTQwNjc0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VzZXJTdGF0dXNMYXN0TW9udGgnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI2MTExNDA2MDgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhdEVtcHR5JyB9O1xucmVzdWx0LmlkID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTAwNDE0OTcyNiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjaGF0JyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5jcmVhdG9yID0gISEocmVzdWx0LmZsYWdzICYgMSk7XG5yZXN1bHQua2lja2VkID0gISEocmVzdWx0LmZsYWdzICYgMik7XG5yZXN1bHQubGVmdCA9ICEhKHJlc3VsdC5mbGFncyAmIDQpO1xucmVzdWx0LmRlYWN0aXZhdGVkID0gISEocmVzdWx0LmZsYWdzICYgMzIpO1xucmVzdWx0LmlkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC50aXRsZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQucGhvdG8gPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnBhcnRpY2lwYW50c19jb3VudCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXN1bHQudmVyc2lvbiA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNjQpIHJlc3VsdC5taWdyYXRlZF90byA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMTYzODQpIHJlc3VsdC5hZG1pbl9yaWdodHMgPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDI2MjE0NCkgcmVzdWx0LmRlZmF1bHRfYmFubmVkX3JpZ2h0cyA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzEyMDc1MzExNSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjaGF0Rm9yYmlkZGVuJyB9O1xucmVzdWx0LmlkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC50aXRsZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM1NDE3MzQ5NDIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhbm5lbCcgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuY3JlYXRvciA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmVzdWx0LmxlZnQgPSAhIShyZXN1bHQuZmxhZ3MgJiA0KTtcbnJlc3VsdC5icm9hZGNhc3QgPSAhIShyZXN1bHQuZmxhZ3MgJiAzMik7XG5yZXN1bHQudmVyaWZpZWQgPSAhIShyZXN1bHQuZmxhZ3MgJiAxMjgpO1xucmVzdWx0Lm1lZ2Fncm91cCA9ICEhKHJlc3VsdC5mbGFncyAmIDI1Nik7XG5yZXN1bHQucmVzdHJpY3RlZCA9ICEhKHJlc3VsdC5mbGFncyAmIDUxMik7XG5yZXN1bHQuc2lnbmF0dXJlcyA9ICEhKHJlc3VsdC5mbGFncyAmIDIwNDgpO1xucmVzdWx0Lm1pbiA9ICEhKHJlc3VsdC5mbGFncyAmIDQwOTYpO1xucmVzdWx0LnNjYW0gPSAhIShyZXN1bHQuZmxhZ3MgJiA1MjQyODgpO1xucmVzdWx0Lmhhc19saW5rID0gISEocmVzdWx0LmZsYWdzICYgMTA0ODU3Nik7XG5yZXN1bHQuaGFzX2dlbyA9ICEhKHJlc3VsdC5mbGFncyAmIDIwOTcxNTIpO1xucmVzdWx0LnNsb3dtb2RlX2VuYWJsZWQgPSAhIShyZXN1bHQuZmxhZ3MgJiA0MTk0MzA0KTtcbnJlc3VsdC5pZCA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgODE5MikgcmVzdWx0LmFjY2Vzc19oYXNoID0gdGhpcy5sb25nKCk7XG5yZXN1bHQudGl0bGUgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDY0KSByZXN1bHQudXNlcm5hbWUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnBob3RvID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5kYXRlID0gdGhpcy5pbnQoKTtcbnJlc3VsdC52ZXJzaW9uID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA1MTIpIHJlc3VsdC5yZXN0cmljdGlvbl9yZWFzb24gPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSk7XG5pZiAocmVzdWx0LmZsYWdzICYgMTYzODQpIHJlc3VsdC5hZG1pbl9yaWdodHMgPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDMyNzY4KSByZXN1bHQuYmFubmVkX3JpZ2h0cyA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMjYyMTQ0KSByZXN1bHQuZGVmYXVsdF9iYW5uZWRfcmlnaHRzID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxMzEwNzIpIHJlc3VsdC5wYXJ0aWNpcGFudHNfY291bnQgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs2ODE0MjA1OTQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhbm5lbEZvcmJpZGRlbicgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuYnJvYWRjYXN0ID0gISEocmVzdWx0LmZsYWdzICYgMzIpO1xucmVzdWx0Lm1lZ2Fncm91cCA9ICEhKHJlc3VsdC5mbGFncyAmIDI1Nik7XG5yZXN1bHQuaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LmFjY2Vzc19oYXNoID0gdGhpcy5sb25nKCk7XG5yZXN1bHQudGl0bGUgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDY1NTM2KSByZXN1bHQudW50aWxfZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQ2MTE1MTY2NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjaGF0RnVsbCcgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuY2FuX3NldF91c2VybmFtZSA9ICEhKHJlc3VsdC5mbGFncyAmIDEyOCk7XG5yZXN1bHQuaGFzX3NjaGVkdWxlZCA9ICEhKHJlc3VsdC5mbGFncyAmIDI1Nik7XG5yZXN1bHQuaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LmFib3V0ID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5wYXJ0aWNpcGFudHMgPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDQpIHJlc3VsdC5jaGF0X3Bob3RvID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5ub3RpZnlfc2V0dGluZ3MgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LmV4cG9ydGVkX2ludml0ZSA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgOCkgcmVzdWx0LmJvdF9pbmZvID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDY0KSByZXN1bHQucGlubmVkX21zZ19pZCA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMjA0OCkgcmVzdWx0LmZvbGRlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQwNDE2MzE1MzAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhbm5lbEZ1bGwnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LmNhbl92aWV3X3BhcnRpY2lwYW50cyA9ICEhKHJlc3VsdC5mbGFncyAmIDgpO1xucmVzdWx0LmNhbl9zZXRfdXNlcm5hbWUgPSAhIShyZXN1bHQuZmxhZ3MgJiA2NCk7XG5yZXN1bHQuY2FuX3NldF9zdGlja2VycyA9ICEhKHJlc3VsdC5mbGFncyAmIDEyOCk7XG5yZXN1bHQuaGlkZGVuX3ByZWhpc3RvcnkgPSAhIShyZXN1bHQuZmxhZ3MgJiAxMDI0KTtcbnJlc3VsdC5jYW5fdmlld19zdGF0cyA9ICEhKHJlc3VsdC5mbGFncyAmIDQwOTYpO1xucmVzdWx0LmNhbl9zZXRfbG9jYXRpb24gPSAhIShyZXN1bHQuZmxhZ3MgJiA2NTUzNik7XG5yZXN1bHQuaGFzX3NjaGVkdWxlZCA9ICEhKHJlc3VsdC5mbGFncyAmIDUyNDI4OCk7XG5yZXN1bHQuaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LmFib3V0ID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQucGFydGljaXBhbnRzX2NvdW50ID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAyKSByZXN1bHQuYWRtaW5zX2NvdW50ID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA0KSByZXN1bHQua2lja2VkX2NvdW50ID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA0KSByZXN1bHQuYmFubmVkX2NvdW50ID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA4MTkyKSByZXN1bHQub25saW5lX2NvdW50ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5yZWFkX2luYm94X21heF9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQucmVhZF9vdXRib3hfbWF4X2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC51bnJlYWRfY291bnQgPSB0aGlzLmludCgpO1xucmVzdWx0LmNoYXRfcGhvdG8gPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0Lm5vdGlmeV9zZXR0aW5ncyA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuZXhwb3J0ZWRfaW52aXRlID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5ib3RfaW5mbyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5pZiAocmVzdWx0LmZsYWdzICYgMTYpIHJlc3VsdC5taWdyYXRlZF9mcm9tX2NoYXRfaWQgPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDE2KSByZXN1bHQubWlncmF0ZWRfZnJvbV9tYXhfaWQgPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDMyKSByZXN1bHQucGlubmVkX21zZ19pZCA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMjU2KSByZXN1bHQuc3RpY2tlcnNldCA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNTEyKSByZXN1bHQuYXZhaWxhYmxlX21pbl9pZCA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMjA0OCkgcmVzdWx0LmZvbGRlcl9pZCA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMTYzODQpIHJlc3VsdC5saW5rZWRfY2hhdF9pZCA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMzI3NjgpIHJlc3VsdC5sb2NhdGlvbiA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMTMxMDcyKSByZXN1bHQuc2xvd21vZGVfc2Vjb25kcyA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMjYyMTQ0KSByZXN1bHQuc2xvd21vZGVfbmV4dF9zZW5kX2RhdGUgPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDQwOTYpIHJlc3VsdC5zdGF0c19kYyA9IHRoaXMuaW50KCk7XG5yZXN1bHQucHRzID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzM2OTU1MjE5MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjaGF0UGFydGljaXBhbnQnIH07XG5yZXN1bHQudXNlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuaW52aXRlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM2NTg2OTk2NTgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhdFBhcnRpY2lwYW50Q3JlYXRvcicgfTtcbnJlc3VsdC51c2VyX2lkID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzgwNTczMzk0MiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjaGF0UGFydGljaXBhbnRBZG1pbicgfTtcbnJlc3VsdC51c2VyX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5pbnZpdGVyX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5kYXRlID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDIzNzI5ODczMSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjaGF0UGFydGljaXBhbnRzRm9yYmlkZGVuJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5jaGF0X2lkID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQuc2VsZl9wYXJ0aWNpcGFudCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzEwNjE1NTYyMDUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhdFBhcnRpY2lwYW50cycgfTtcbnJlc3VsdC5jaGF0X2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wYXJ0aWNpcGFudHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0LnZlcnNpb24gPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs5MzUzOTU2MTIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhdFBob3RvRW1wdHknIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzExOTcyNjc5MjUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhdFBob3RvJyB9O1xucmVzdWx0LnBob3RvX3NtYWxsID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5waG90b19iaWcgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LmRjX2lkID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjIxMjg3OTk1NiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlRW1wdHknIH07XG5yZXN1bHQuaWQgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMTYwNTE1MTczLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2UnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0Lm91dCA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0Lm1lbnRpb25lZCA9ICEhKHJlc3VsdC5mbGFncyAmIDE2KTtcbnJlc3VsdC5tZWRpYV91bnJlYWQgPSAhIShyZXN1bHQuZmxhZ3MgJiAzMik7XG5yZXN1bHQuc2lsZW50ID0gISEocmVzdWx0LmZsYWdzICYgODE5Mik7XG5yZXN1bHQucG9zdCA9ICEhKHJlc3VsdC5mbGFncyAmIDE2Mzg0KTtcbnJlc3VsdC5mcm9tX3NjaGVkdWxlZCA9ICEhKHJlc3VsdC5mbGFncyAmIDI2MjE0NCk7XG5yZXN1bHQubGVnYWN5ID0gISEocmVzdWx0LmZsYWdzICYgNTI0Mjg4KTtcbnJlc3VsdC5lZGl0X2hpZGUgPSAhIShyZXN1bHQuZmxhZ3MgJiAyMDk3MTUyKTtcbnJlc3VsdC5pZCA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMjU2KSByZXN1bHQuZnJvbV9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQudG9faWQgPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDQpIHJlc3VsdC5md2RfZnJvbSA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMjA0OCkgcmVzdWx0LnZpYV9ib3RfaWQgPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDgpIHJlc3VsdC5yZXBseV90b19tc2dfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LmRhdGUgPSB0aGlzLmludCgpO1xucmVzdWx0Lm1lc3NhZ2UgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDUxMikgcmVzdWx0Lm1lZGlhID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA2NCkgcmVzdWx0LnJlcGx5X21hcmt1cCA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMTI4KSByZXN1bHQuZW50aXRpZXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSk7XG5pZiAocmVzdWx0LmZsYWdzICYgMTAyNCkgcmVzdWx0LnZpZXdzID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAzMjc2OCkgcmVzdWx0LmVkaXRfZGF0ZSA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNjU1MzYpIHJlc3VsdC5wb3N0X2F1dGhvciA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMTMxMDcyKSByZXN1bHQuZ3JvdXBlZF9pZCA9IHRoaXMubG9uZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDQxOTQzMDQpIHJlc3VsdC5yZXN0cmljdGlvbl9yZWFzb24gPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI2NTI0Nzk5OTAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZVNlcnZpY2UnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0Lm91dCA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0Lm1lbnRpb25lZCA9ICEhKHJlc3VsdC5mbGFncyAmIDE2KTtcbnJlc3VsdC5tZWRpYV91bnJlYWQgPSAhIShyZXN1bHQuZmxhZ3MgJiAzMik7XG5yZXN1bHQuc2lsZW50ID0gISEocmVzdWx0LmZsYWdzICYgODE5Mik7XG5yZXN1bHQucG9zdCA9ICEhKHJlc3VsdC5mbGFncyAmIDE2Mzg0KTtcbnJlc3VsdC5sZWdhY3kgPSAhIShyZXN1bHQuZmxhZ3MgJiA1MjQyODgpO1xucmVzdWx0LmlkID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAyNTYpIHJlc3VsdC5mcm9tX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC50b19pZCA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgOCkgcmVzdWx0LnJlcGx5X3RvX21zZ19pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXN1bHQuYWN0aW9uID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTAzODk2NzU4NCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlTWVkaWFFbXB0eScgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTc2NjkzNjc5MSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlTWVkaWFQaG90bycgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LnBob3RvID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA0KSByZXN1bHQudHRsX3NlY29uZHMgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxNDU3NTc1MDI4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VNZWRpYUdlbycgfTtcbnJlc3VsdC5nZW8gPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNDIxNjUzMzEyLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VNZWRpYUNvbnRhY3QnIH07XG5yZXN1bHQucGhvbmVfbnVtYmVyID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5maXJzdF9uYW1lID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5sYXN0X25hbWUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnZjYXJkID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC51c2VyX2lkID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjY3NjI5MDcxOCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlTWVkaWFVbnN1cHBvcnRlZCcgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjYyODgwODkxOSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlTWVkaWFEb2N1bWVudCcgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LmRvY3VtZW50ID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA0KSByZXN1bHQudHRsX3NlY29uZHMgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNzM3NjkwMTEyLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VNZWRpYVdlYlBhZ2UnIH07XG5yZXN1bHQud2VicGFnZSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzc4NDM1NjE1OSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlTWVkaWFWZW51ZScgfTtcbnJlc3VsdC5nZW8gPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnRpdGxlID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5hZGRyZXNzID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5wcm92aWRlciA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQudmVudWVfaWQgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnZlbnVlX3R5cGUgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0MjU2MjcyMzkyLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VNZWRpYUdhbWUnIH07XG5yZXN1bHQuZ2FtZSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIyMjAxNjgwMDcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZU1lZGlhSW52b2ljZScgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuc2hpcHBpbmdfYWRkcmVzc19yZXF1ZXN0ZWQgPSAhIShyZXN1bHQuZmxhZ3MgJiAyKTtcbnJlc3VsdC50ZXN0ID0gISEocmVzdWx0LmZsYWdzICYgOCk7XG5yZXN1bHQudGl0bGUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmRlc2NyaXB0aW9uID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQucGhvdG8gPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDQpIHJlc3VsdC5yZWNlaXB0X21zZ19pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuY3VycmVuY3kgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnRvdGFsX2Ftb3VudCA9IHRoaXMubG9uZygpO1xucmVzdWx0LnN0YXJ0X3BhcmFtID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjA4NDMxNjY4MSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlTWVkaWFHZW9MaXZlJyB9O1xucmVzdWx0LmdlbyA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQucGVyaW9kID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTI3MjM3NTE5MiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlTWVkaWFQb2xsJyB9O1xucmVzdWx0LnBvbGwgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnJlc3VsdHMgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMDY1MjgwOTA3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VNZWRpYURpY2UnIH07XG5yZXN1bHQudmFsdWUgPSB0aGlzLmludCgpO1xucmVzdWx0LmVtb3RpY29uID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzA2NDkxOTk4NCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlQWN0aW9uRW1wdHknIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI3OTE1NDE2NTgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZUFjdGlvbkNoYXRDcmVhdGUnIH07XG5yZXN1bHQudGl0bGUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnVzZXJzID0gdGhpcy52ZWN0b3IodGhpcy5pbnQsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzA0NzI4MDIxOCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlQWN0aW9uQ2hhdEVkaXRUaXRsZScgfTtcbnJlc3VsdC50aXRsZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIxNDQwMTUyNzIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZUFjdGlvbkNoYXRFZGl0UGhvdG8nIH07XG5yZXN1bHQucGhvdG8gPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNTE0NzQ2MzUxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VBY3Rpb25DaGF0RGVsZXRlUGhvdG8nIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzEyMTcwMzMwMTUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZUFjdGlvbkNoYXRBZGRVc2VyJyB9O1xucmVzdWx0LnVzZXJzID0gdGhpcy52ZWN0b3IodGhpcy5pbnQsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjk5Nzc4NzQwNCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlQWN0aW9uQ2hhdERlbGV0ZVVzZXInIH07XG5yZXN1bHQudXNlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQxNzEwMzYxMzYsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZUFjdGlvbkNoYXRKb2luZWRCeUxpbmsnIH07XG5yZXN1bHQuaW52aXRlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI1MTM2MTE5MjIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZUFjdGlvbkNoYW5uZWxDcmVhdGUnIH07XG5yZXN1bHQudGl0bGUgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMzcxMzg1ODg5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VBY3Rpb25DaGF0TWlncmF0ZVRvJyB9O1xucmVzdWx0LmNoYW5uZWxfaWQgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyOTU4NDIwNzE4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VBY3Rpb25DaGFubmVsTWlncmF0ZUZyb20nIH07XG5yZXN1bHQudGl0bGUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmNoYXRfaWQgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNDk1NDI4ODQ1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VBY3Rpb25QaW5NZXNzYWdlJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNjc5ODEzNjM2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VBY3Rpb25IaXN0b3J5Q2xlYXInIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI0NjA0Mjg0MDYsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZUFjdGlvbkdhbWVTY29yZScgfTtcbnJlc3VsdC5nYW1lX2lkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuc2NvcmUgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNDAyMzk5MDE1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VBY3Rpb25QYXltZW50U2VudE1lJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5jdXJyZW5jeSA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQudG90YWxfYW1vdW50ID0gdGhpcy5sb25nKCk7XG5yZXN1bHQucGF5bG9hZCA9IHRoaXMuYnl0ZXMoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQuaW5mbyA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMikgcmVzdWx0LnNoaXBwaW5nX29wdGlvbl9pZCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuY2hhcmdlID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTA4MDY2MzI0OCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlQWN0aW9uUGF5bWVudFNlbnQnIH07XG5yZXN1bHQuY3VycmVuY3kgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnRvdGFsX2Ftb3VudCA9IHRoaXMubG9uZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMTYyMjM2MDMxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VBY3Rpb25QaG9uZUNhbGwnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LnZpZGVvID0gISEocmVzdWx0LmZsYWdzICYgNCk7XG5yZXN1bHQuY2FsbF9pZCA9IHRoaXMubG9uZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC5yZWFzb24gPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIpIHJlc3VsdC5kdXJhdGlvbiA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzEyMDA3ODgxMjMsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZUFjdGlvblNjcmVlbnNob3RUYWtlbicgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDIwOTQxODA3MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlQWN0aW9uQ3VzdG9tQWN0aW9uJyB9O1xucmVzdWx0Lm1lc3NhZ2UgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyODg0MjE4ODc4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VBY3Rpb25Cb3RBbGxvd2VkJyB9O1xucmVzdWx0LmRvbWFpbiA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQ1NTYzNTc5NSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlQWN0aW9uU2VjdXJlVmFsdWVzU2VudE1lJyB9O1xucmVzdWx0LnZhbHVlcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQuY3JlZGVudGlhbHMgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNjQ2NzEwMTAwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VBY3Rpb25TZWN1cmVWYWx1ZXNTZW50JyB9O1xucmVzdWx0LnR5cGVzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDA5Mjc0NzYzOCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlQWN0aW9uQ29udGFjdFNpZ25VcCcgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNzM5NzEyODgyLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2RpYWxvZycgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQucGlubmVkID0gISEocmVzdWx0LmZsYWdzICYgNCk7XG5yZXN1bHQudW5yZWFkX21hcmsgPSAhIShyZXN1bHQuZmxhZ3MgJiA4KTtcbnJlc3VsdC5wZWVyID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC50b3BfbWVzc2FnZSA9IHRoaXMuaW50KCk7XG5yZXN1bHQucmVhZF9pbmJveF9tYXhfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LnJlYWRfb3V0Ym94X21heF9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQudW5yZWFkX2NvdW50ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC51bnJlYWRfbWVudGlvbnNfY291bnQgPSB0aGlzLmludCgpO1xucmVzdWx0Lm5vdGlmeV9zZXR0aW5ncyA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LnB0cyA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMikgcmVzdWx0LmRyYWZ0ID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxNikgcmVzdWx0LmZvbGRlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE5MDgyMTY2NTIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnZGlhbG9nRm9sZGVyJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5waW5uZWQgPSAhIShyZXN1bHQuZmxhZ3MgJiA0KTtcbnJlc3VsdC5mb2xkZXIgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnBlZXIgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnRvcF9tZXNzYWdlID0gdGhpcy5pbnQoKTtcbnJlc3VsdC51bnJlYWRfbXV0ZWRfcGVlcnNfY291bnQgPSB0aGlzLmludCgpO1xucmVzdWx0LnVucmVhZF91bm11dGVkX3BlZXJzX2NvdW50ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC51bnJlYWRfbXV0ZWRfbWVzc2FnZXNfY291bnQgPSB0aGlzLmludCgpO1xucmVzdWx0LnVucmVhZF91bm11dGVkX21lc3NhZ2VzX2NvdW50ID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNTkwNDU5NDM3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3Bob3RvRW1wdHknIH07XG5yZXN1bHQuaWQgPSB0aGlzLmxvbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzQ5NzMyOTgyOSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwaG90bycgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuaGFzX3N0aWNrZXJzID0gISEocmVzdWx0LmZsYWdzICYgMSk7XG5yZXN1bHQuaWQgPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC5hY2Nlc3NfaGFzaCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmZpbGVfcmVmZXJlbmNlID0gdGhpcy5ieXRlcygpO1xucmVzdWx0LmRhdGUgPSB0aGlzLmludCgpO1xucmVzdWx0LnNpemVzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC5kY19pZCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIzNjQ0NjI2OCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwaG90b1NpemVFbXB0eScgfTtcbnJlc3VsdC50eXBlID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjAwOTA1MjY5OSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwaG90b1NpemUnIH07XG5yZXN1bHQudHlwZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQubG9jYXRpb24gPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LncgPSB0aGlzLmludCgpO1xucmVzdWx0LmggPSB0aGlzLmludCgpO1xucmVzdWx0LnNpemUgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszOTIwMDQ5NDAyLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3Bob3RvQ2FjaGVkU2l6ZScgfTtcbnJlc3VsdC50eXBlID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5sb2NhdGlvbiA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQudyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuaCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuYnl0ZXMgPSB0aGlzLmJ5dGVzKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM3Njk2Nzg4OTQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGhvdG9TdHJpcHBlZFNpemUnIH07XG5yZXN1bHQudHlwZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuYnl0ZXMgPSB0aGlzLmJ5dGVzKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI4Njc3NjY3MSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdnZW9Qb2ludEVtcHR5JyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0MzQ0NjUzMiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdnZW9Qb2ludCcgfTtcbnJlc3VsdC5sb25nID0gdGhpcy5kb3VibGUoKTtcbnJlc3VsdC5sYXQgPSB0aGlzLmRvdWJsZSgpO1xucmVzdWx0LmFjY2Vzc19oYXNoID0gdGhpcy5sb25nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE1NzcwNjc3NzgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnYXV0aC5zZW50Q29kZScgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQudHlwZSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQucGhvbmVfY29kZV9oYXNoID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAyKSByZXN1bHQubmV4dF90eXBlID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA0KSByZXN1bHQudGltZW91dCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM0Mzk2NTkyODYsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnYXV0aC5hdXRob3JpemF0aW9uJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQudG1wX3Nlc3Npb25zID0gdGhpcy5pbnQoKTtcbnJlc3VsdC51c2VyID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTE0ODQ4NTI3NCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdhdXRoLmF1dGhvcml6YXRpb25TaWduVXBSZXF1aXJlZCcgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LnRlcm1zX29mX3NlcnZpY2UgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNzUxMTg5NTQ5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2F1dGguZXhwb3J0ZWRBdXRob3JpemF0aW9uJyB9O1xucmVzdWx0LmlkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5ieXRlcyA9IHRoaXMuYnl0ZXMoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzA5OTM1MTgyMCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dE5vdGlmeVBlZXInIH07XG5yZXN1bHQucGVlciA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQyMzMxNDQ1NSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dE5vdGlmeVVzZXJzJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMjUxMzM4MzE4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0Tm90aWZ5Q2hhdHMnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI5ODM5NTE0ODYsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXROb3RpZnlCcm9hZGNhc3RzJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNjIxMjQ5OTM0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0UGVlck5vdGlmeVNldHRpbmdzJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQuc2hvd19wcmV2aWV3cyA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMikgcmVzdWx0LnNpbGVudCA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNCkgcmVzdWx0Lm11dGVfdW50aWwgPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDgpIHJlc3VsdC5zb3VuZCA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI5NDEyOTU5MDQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGVlck5vdGlmeVNldHRpbmdzJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQuc2hvd19wcmV2aWV3cyA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMikgcmVzdWx0LnNpbGVudCA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNCkgcmVzdWx0Lm11dGVfdW50aWwgPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDgpIHJlc3VsdC5zb3VuZCA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIxNzI5MjE1NDksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGVlclNldHRpbmdzJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5yZXBvcnRfc3BhbSA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmVzdWx0LmFkZF9jb250YWN0ID0gISEocmVzdWx0LmZsYWdzICYgMik7XG5yZXN1bHQuYmxvY2tfY29udGFjdCA9ICEhKHJlc3VsdC5mbGFncyAmIDQpO1xucmVzdWx0LnNoYXJlX2NvbnRhY3QgPSAhIShyZXN1bHQuZmxhZ3MgJiA4KTtcbnJlc3VsdC5uZWVkX2NvbnRhY3RzX2V4Y2VwdGlvbiA9ICEhKHJlc3VsdC5mbGFncyAmIDE2KTtcbnJlc3VsdC5yZXBvcnRfZ2VvID0gISEocmVzdWx0LmZsYWdzICYgMzIpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNzU1MTE4MDYxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3dhbGxQYXBlcicgfTtcbnJlc3VsdC5pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5jcmVhdG9yID0gISEocmVzdWx0LmZsYWdzICYgMSk7XG5yZXN1bHQuZGVmYXVsdCA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0LnBhdHRlcm4gPSAhIShyZXN1bHQuZmxhZ3MgJiA4KTtcbnJlc3VsdC5kYXJrID0gISEocmVzdWx0LmZsYWdzICYgMTYpO1xucmVzdWx0LmFjY2Vzc19oYXNoID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuc2x1ZyA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuZG9jdW1lbnQgPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDQpIHJlc3VsdC5zZXR0aW5ncyA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIzMzEyNDk0NDUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnd2FsbFBhcGVyTm9GaWxlJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5kZWZhdWx0ID0gISEocmVzdWx0LmZsYWdzICYgMik7XG5yZXN1bHQuZGFyayA9ICEhKHJlc3VsdC5mbGFncyAmIDE2KTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA0KSByZXN1bHQuc2V0dGluZ3MgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxNDkwNzk5Mjg4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0UmVwb3J0UmVhc29uU3BhbScgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNTA1NTk1Nzg5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0UmVwb3J0UmVhc29uVmlvbGVuY2UnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzc3NzY0MDIyNiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dFJlcG9ydFJlYXNvblBvcm5vZ3JhcGh5JyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyOTE4NDY5MzQ3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0UmVwb3J0UmVhc29uQ2hpbGRBYnVzZScgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzc4MjUwMzY5MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dFJlcG9ydFJlYXNvbk90aGVyJyB9O1xucmVzdWx0LnRleHQgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNjA5NTEwNzE0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0UmVwb3J0UmVhc29uQ29weXJpZ2h0JyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNjg4MTY5MTk3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0UmVwb3J0UmVhc29uR2VvSXJyZWxldmFudCcgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzk5MjAyNjEzMCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1c2VyRnVsbCcgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuYmxvY2tlZCA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmVzdWx0LnBob25lX2NhbGxzX2F2YWlsYWJsZSA9ICEhKHJlc3VsdC5mbGFncyAmIDE2KTtcbnJlc3VsdC5waG9uZV9jYWxsc19wcml2YXRlID0gISEocmVzdWx0LmZsYWdzICYgMzIpO1xucmVzdWx0LmNhbl9waW5fbWVzc2FnZSA9ICEhKHJlc3VsdC5mbGFncyAmIDEyOCk7XG5yZXN1bHQuaGFzX3NjaGVkdWxlZCA9ICEhKHJlc3VsdC5mbGFncyAmIDQwOTYpO1xucmVzdWx0LnVzZXIgPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIpIHJlc3VsdC5hYm91dCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuc2V0dGluZ3MgPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDQpIHJlc3VsdC5wcm9maWxlX3Bob3RvID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5ub3RpZnlfc2V0dGluZ3MgPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDgpIHJlc3VsdC5ib3RfaW5mbyA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNjQpIHJlc3VsdC5waW5uZWRfbXNnX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5jb21tb25fY2hhdHNfY291bnQgPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIwNDgpIHJlc3VsdC5mb2xkZXJfaWQgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0MTc4NjkyNTAwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NvbnRhY3QnIH07XG5yZXN1bHQudXNlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQubXV0dWFsID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzQ4OTgyNTg0OCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbXBvcnRlZENvbnRhY3QnIH07XG5yZXN1bHQudXNlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuY2xpZW50X2lkID0gdGhpcy5sb25nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE0NDQ2NjEzNjksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY29udGFjdEJsb2NrZWQnIH07XG5yZXN1bHQudXNlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM1NDY4MTE0ODksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY29udGFjdFN0YXR1cycgfTtcbnJlc3VsdC51c2VyX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5zdGF0dXMgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMDc1MTg5MjAyLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NvbnRhY3RzLmNvbnRhY3RzTm90TW9kaWZpZWQnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM5NDExMDUyMTgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY29udGFjdHMuY29udGFjdHMnIH07XG5yZXN1bHQuY29udGFjdHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0LnNhdmVkX2NvdW50ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC51c2VycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIwMTAxMjc0MTksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY29udGFjdHMuaW1wb3J0ZWRDb250YWN0cycgfTtcbnJlc3VsdC5pbXBvcnRlZCA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQucG9wdWxhcl9pbnZpdGVzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC5yZXRyeV9jb250YWN0cyA9IHRoaXMudmVjdG9yKHRoaXMubG9uZywgZmFsc2UpO1xucmVzdWx0LnVzZXJzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDcxMDQzMzQ5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NvbnRhY3RzLmJsb2NrZWQnIH07XG5yZXN1bHQuYmxvY2tlZCA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQudXNlcnMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNDE2NDQ0MDY1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NvbnRhY3RzLmJsb2NrZWRTbGljZScgfTtcbnJlc3VsdC5jb3VudCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuYmxvY2tlZCA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQudXNlcnMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNjQ1Mzg5NDQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZXMuZGlhbG9ncycgfTtcbnJlc3VsdC5kaWFsb2dzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC5tZXNzYWdlcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQuY2hhdHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0LnVzZXJzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTkxMDU0MzYwMywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlcy5kaWFsb2dzU2xpY2UnIH07XG5yZXN1bHQuY291bnQgPSB0aGlzLmludCgpO1xucmVzdWx0LmRpYWxvZ3MgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0Lm1lc3NhZ2VzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC5jaGF0cyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQudXNlcnMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0MDQxNDY3Mjg2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VzLmRpYWxvZ3NOb3RNb2RpZmllZCcgfTtcbnJlc3VsdC5jb3VudCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIzNTYyNTIyOTUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZXMubWVzc2FnZXMnIH07XG5yZXN1bHQubWVzc2FnZXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0LmNoYXRzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC51c2VycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMzNzEwMjc5OTgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZXMubWVzc2FnZXNTbGljZScgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuaW5leGFjdCA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0LmNvdW50ID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQubmV4dF9yYXRlID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5tZXNzYWdlcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQuY2hhdHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0LnVzZXJzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjU2OTQxNjI0NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlcy5jaGFubmVsTWVzc2FnZXMnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LmluZXhhY3QgPSAhIShyZXN1bHQuZmxhZ3MgJiAyKTtcbnJlc3VsdC5wdHMgPSB0aGlzLmludCgpO1xucmVzdWx0LmNvdW50ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5tZXNzYWdlcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQuY2hhdHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0LnVzZXJzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTk1MTYyMDg5NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlcy5tZXNzYWdlc05vdE1vZGlmaWVkJyB9O1xucmVzdWx0LmNvdW50ID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTY5NDQ3NDE5NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlcy5jaGF0cycgfTtcbnJlc3VsdC5jaGF0cyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI2MzE0MDU4OTIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZXMuY2hhdHNTbGljZScgfTtcbnJlc3VsdC5jb3VudCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuY2hhdHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszODU2MTI2MzY0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VzLmNoYXRGdWxsJyB9O1xucmVzdWx0LmZ1bGxfY2hhdCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuY2hhdHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0LnVzZXJzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzAyNTk1NTI4MSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlcy5hZmZlY3RlZEhpc3RvcnknIH07XG5yZXN1bHQucHRzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wdHNfY291bnQgPSB0aGlzLmludCgpO1xucmVzdWx0Lm9mZnNldCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE0NzQ0OTIwMTIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRNZXNzYWdlc0ZpbHRlckVtcHR5JyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNTE3MjE0NDkyLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0TWVzc2FnZXNGaWx0ZXJQaG90b3MnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI2ODAxNjM5NDEsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRNZXNzYWdlc0ZpbHRlclZpZGVvJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxNDU4MTcyMTMyLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0TWVzc2FnZXNGaWx0ZXJQaG90b1ZpZGVvJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNjY1MzQ1NDE2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0TWVzc2FnZXNGaWx0ZXJEb2N1bWVudCcgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjEyOTcxNDU2NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dE1lc3NhZ2VzRmlsdGVyVXJsJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0MjkxMzIzMjcxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0TWVzc2FnZXNGaWx0ZXJHaWYnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzEzNTgyODM2NjYsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRNZXNzYWdlc0ZpbHRlclZvaWNlJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs5MjgxMDE1MzQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRNZXNzYWdlc0ZpbHRlck11c2ljJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs5NzUyMzYyODAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRNZXNzYWdlc0ZpbHRlckNoYXRQaG90b3MnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIxNjA2OTUxNDQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRNZXNzYWdlc0ZpbHRlclBob25lQ2FsbHMnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0Lm1pc3NlZCA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMDU0OTUyODY4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0TWVzc2FnZXNGaWx0ZXJSb3VuZFZvaWNlJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMDQxNTE2MTE1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0TWVzc2FnZXNGaWx0ZXJSb3VuZFZpZGVvJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMjU0MzE0NjUwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0TWVzc2FnZXNGaWx0ZXJNeU1lbnRpb25zJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszODc1Njk1ODg1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0TWVzc2FnZXNGaWx0ZXJHZW8nIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM3NjQ1NzUxMDcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRNZXNzYWdlc0ZpbHRlckNvbnRhY3RzJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs1MjI5MTQ1NTcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlTmV3TWVzc2FnZScgfTtcbnJlc3VsdC5tZXNzYWdlID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5wdHMgPSB0aGlzLmludCgpO1xucmVzdWx0LnB0c19jb3VudCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzEzMTgxMDkxNDIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlTWVzc2FnZUlEJyB9O1xucmVzdWx0LmlkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5yYW5kb21faWQgPSB0aGlzLmxvbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjcxODgwNjI0NSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVEZWxldGVNZXNzYWdlcycgfTtcbnJlc3VsdC5tZXNzYWdlcyA9IHRoaXMudmVjdG9yKHRoaXMuaW50LCBmYWxzZSk7XG5yZXN1bHQucHRzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wdHNfY291bnQgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxNTQ4MjQ5MzgzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZVVzZXJUeXBpbmcnIH07XG5yZXN1bHQudXNlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuYWN0aW9uID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjU5MDM3MDMzNSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVDaGF0VXNlclR5cGluZycgfTtcbnJlc3VsdC5jaGF0X2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC51c2VyX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5hY3Rpb24gPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMjUxNzgyNjQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlQ2hhdFBhcnRpY2lwYW50cycgfTtcbnJlc3VsdC5wYXJ0aWNpcGFudHMgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0Njk0ODk2OTksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlVXNlclN0YXR1cycgfTtcbnJlc3VsdC51c2VyX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5zdGF0dXMgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyODA1MTQ4NTMxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZVVzZXJOYW1lJyB9O1xucmVzdWx0LnVzZXJfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LmZpcnN0X25hbWUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0Lmxhc3RfbmFtZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQudXNlcm5hbWUgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNTAzMDMxNTY0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZVVzZXJQaG90bycgfTtcbnJlc3VsdC51c2VyX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5kYXRlID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5waG90byA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQucHJldmlvdXMgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMTQzNTkxOTQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlTmV3RW5jcnlwdGVkTWVzc2FnZScgfTtcbnJlc3VsdC5tZXNzYWdlID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5xdHMgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszODY5ODYzMjYsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlRW5jcnlwdGVkQ2hhdFR5cGluZycgfTtcbnJlc3VsdC5jaGF0X2lkID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzAzMDU3NTI0NSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVFbmNyeXB0aW9uJyB9O1xucmVzdWx0LmNoYXQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LmRhdGUgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs5NTYxNzk4OTUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlRW5jcnlwdGVkTWVzc2FnZXNSZWFkJyB9O1xucmVzdWx0LmNoYXRfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0Lm1heF9kYXRlID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5kYXRlID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzkzMDc4NzQyMCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVDaGF0UGFydGljaXBhbnRBZGQnIH07XG5yZXN1bHQuY2hhdF9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQudXNlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuaW52aXRlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXN1bHQudmVyc2lvbiA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE4NTE3NTU1NTQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlQ2hhdFBhcnRpY2lwYW50RGVsZXRlJyB9O1xucmVzdWx0LmNoYXRfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LnVzZXJfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LnZlcnNpb24gPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMzg4NTY0MDgzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZURjT3B0aW9ucycgfTtcbnJlc3VsdC5kY19vcHRpb25zID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjE2MzAwOTU2MiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVVc2VyQmxvY2tlZCcgfTtcbnJlc3VsdC51c2VyX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5ibG9ja2VkID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzIwMDQxMTg4NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVOb3RpZnlTZXR0aW5ncycgfTtcbnJlc3VsdC5wZWVyID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5ub3RpZnlfc2V0dGluZ3MgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszOTU3NjE0NjE3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZVNlcnZpY2VOb3RpZmljYXRpb24nIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LnBvcHVwID0gISEocmVzdWx0LmZsYWdzICYgMSk7XG5pZiAocmVzdWx0LmZsYWdzICYgMikgcmVzdWx0LmluYm94X2RhdGUgPSB0aGlzLmludCgpO1xucmVzdWx0LnR5cGUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0Lm1lc3NhZ2UgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0Lm1lZGlhID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5lbnRpdGllcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM5OTY4NTQwNTgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlUHJpdmFjeScgfTtcbnJlc3VsdC5rZXkgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnJ1bGVzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzE0MTMwODExLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZVVzZXJQaG9uZScgfTtcbnJlc3VsdC51c2VyX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5waG9uZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI2MjcxNjIwNzksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlUmVhZEhpc3RvcnlJbmJveCcgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LmZvbGRlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQucGVlciA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQubWF4X2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5zdGlsbF91bnJlYWRfY291bnQgPSB0aGlzLmludCgpO1xucmVzdWx0LnB0cyA9IHRoaXMuaW50KCk7XG5yZXN1bHQucHRzX2NvdW50ID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNzkxNjE3OTgzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZVJlYWRIaXN0b3J5T3V0Ym94JyB9O1xucmVzdWx0LnBlZXIgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0Lm1heF9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQucHRzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wdHNfY291bnQgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMTM5Njg5NDkxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZVdlYlBhZ2UnIH07XG5yZXN1bHQud2VicGFnZSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQucHRzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wdHNfY291bnQgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxNzU3NDkzNTU1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZVJlYWRNZXNzYWdlc0NvbnRlbnRzJyB9O1xucmVzdWx0Lm1lc3NhZ2VzID0gdGhpcy52ZWN0b3IodGhpcy5pbnQsIGZhbHNlKTtcbnJlc3VsdC5wdHMgPSB0aGlzLmludCgpO1xucmVzdWx0LnB0c19jb3VudCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM5NDI5MzQ1MjMsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlQ2hhbm5lbFRvb0xvbmcnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LmNoYW5uZWxfaWQgPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC5wdHMgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMDY3MzY5MDQ2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZUNoYW5uZWwnIH07XG5yZXN1bHQuY2hhbm5lbF9pZCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE2NTYzNTgxMDUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlTmV3Q2hhbm5lbE1lc3NhZ2UnIH07XG5yZXN1bHQubWVzc2FnZSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQucHRzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wdHNfY291bnQgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs4NTYzODA0NTIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlUmVhZENoYW5uZWxJbmJveCcgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LmZvbGRlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuY2hhbm5lbF9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQubWF4X2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5zdGlsbF91bnJlYWRfY291bnQgPSB0aGlzLmludCgpO1xucmVzdWx0LnB0cyA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMyNzkyMzM0ODEsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlRGVsZXRlQ2hhbm5lbE1lc3NhZ2VzJyB9O1xucmVzdWx0LmNoYW5uZWxfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0Lm1lc3NhZ2VzID0gdGhpcy52ZWN0b3IodGhpcy5pbnQsIGZhbHNlKTtcbnJlc3VsdC5wdHMgPSB0aGlzLmludCgpO1xucmVzdWx0LnB0c19jb3VudCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI1NjA2OTkyMTEsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlQ2hhbm5lbE1lc3NhZ2VWaWV3cycgfTtcbnJlc3VsdC5jaGFubmVsX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQudmlld3MgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMDYyODk2OTg1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZUNoYXRQYXJ0aWNpcGFudEFkbWluJyB9O1xucmVzdWx0LmNoYXRfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LnVzZXJfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LmlzX2FkbWluID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC52ZXJzaW9uID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTc1Mzg4Njg5MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVOZXdTdGlja2VyU2V0JyB9O1xucmVzdWx0LnN0aWNrZXJzZXQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxOTYyNjg1NDUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlU3RpY2tlclNldHNPcmRlcicgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQubWFza3MgPSAhIShyZXN1bHQuZmxhZ3MgJiAxKTtcbnJlc3VsdC5vcmRlciA9IHRoaXMudmVjdG9yKHRoaXMubG9uZywgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMTM1NDkyNTg4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZVN0aWNrZXJTZXRzJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNDczOTMxODA2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZVNhdmVkR2lmcycgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTQxNzgzMjA4MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVCb3RJbmxpbmVRdWVyeScgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQucXVlcnlfaWQgPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC51c2VyX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5xdWVyeSA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LmdlbyA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQub2Zmc2V0ID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjM5NjYzNDYwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZUJvdElubGluZVNlbmQnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LnVzZXJfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LnF1ZXJ5ID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQuZ2VvID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5pZCA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMikgcmVzdWx0Lm1zZ19pZCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQ1NzEzMzU1OSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVFZGl0Q2hhbm5lbE1lc3NhZ2UnIH07XG5yZXN1bHQubWVzc2FnZSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQucHRzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wdHNfY291bnQgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNTU1OTc4ODY5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZUNoYW5uZWxQaW5uZWRNZXNzYWdlJyB9O1xucmVzdWx0LmNoYW5uZWxfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LmlkID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzg3OTAyODcwNSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVCb3RDYWxsYmFja1F1ZXJ5JyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5xdWVyeV9pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LnVzZXJfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LnBlZXIgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0Lm1zZ19pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuY2hhdF9pbnN0YW5jZSA9IHRoaXMubG9uZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC5kYXRhID0gdGhpcy5ieXRlcygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIpIHJlc3VsdC5nYW1lX3Nob3J0X25hbWUgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszODI1NDMwNjkxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZUVkaXRNZXNzYWdlJyB9O1xucmVzdWx0Lm1lc3NhZ2UgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnB0cyA9IHRoaXMuaW50KCk7XG5yZXN1bHQucHRzX2NvdW50ID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDE5MTMyMDY2NiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVJbmxpbmVCb3RDYWxsYmFja1F1ZXJ5JyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5xdWVyeV9pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LnVzZXJfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0Lm1zZ19pZCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuY2hhdF9pbnN0YW5jZSA9IHRoaXMubG9uZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC5kYXRhID0gdGhpcy5ieXRlcygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIpIHJlc3VsdC5nYW1lX3Nob3J0X25hbWUgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs2MzQ4MzMzNTEsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlUmVhZENoYW5uZWxPdXRib3gnIH07XG5yZXN1bHQuY2hhbm5lbF9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQubWF4X2lkID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzk5NTg0MjkyMSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVEcmFmdE1lc3NhZ2UnIH07XG5yZXN1bHQucGVlciA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuZHJhZnQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxNDYxNTI4Mzg2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZVJlYWRGZWF0dXJlZFN0aWNrZXJzJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNTg4MDI3OTM2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZVJlY2VudFN0aWNrZXJzJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNzIwNjUyNTUwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZUNvbmZpZycgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbODYxMTY5NTUxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZVB0c0NoYW5nZWQnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzEwODE1NDcwMDgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlQ2hhbm5lbFdlYlBhZ2UnIH07XG5yZXN1bHQuY2hhbm5lbF9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQud2VicGFnZSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQucHRzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wdHNfY291bnQgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxODUyODI2OTA4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZURpYWxvZ1Bpbm5lZCcgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQucGlubmVkID0gISEocmVzdWx0LmZsYWdzICYgMSk7XG5pZiAocmVzdWx0LmZsYWdzICYgMikgcmVzdWx0LmZvbGRlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQucGVlciA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQxOTUzMDI1NjIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlUGlubmVkRGlhbG9ncycgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMikgcmVzdWx0LmZvbGRlcl9pZCA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0Lm9yZGVyID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMTk5MzcxOTcxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZUJvdFdlYmhvb2tKU09OJyB9O1xucmVzdWx0LmRhdGEgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNjEwMDUzMjg2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZUJvdFdlYmhvb2tKU09OUXVlcnknIH07XG5yZXN1bHQucXVlcnlfaWQgPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC5kYXRhID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC50aW1lb3V0ID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzc3MTU4Mjc4NCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVCb3RTaGlwcGluZ1F1ZXJ5JyB9O1xucmVzdWx0LnF1ZXJ5X2lkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQudXNlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQucGF5bG9hZCA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC5zaGlwcGluZ19hZGRyZXNzID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTU2MzM3NjI5NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVCb3RQcmVjaGVja291dFF1ZXJ5JyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5xdWVyeV9pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LnVzZXJfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LnBheWxvYWQgPSB0aGlzLmJ5dGVzKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LmluZm8gPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIpIHJlc3VsdC5zaGlwcGluZ19vcHRpb25faWQgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmN1cnJlbmN5ID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC50b3RhbF9hbW91bnQgPSB0aGlzLmxvbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjg2OTkxNDM5OCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVQaG9uZUNhbGwnIH07XG5yZXN1bHQucGhvbmVfY2FsbCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzExODAwNDE4MjgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlTGFuZ1BhY2tUb29Mb25nJyB9O1xucmVzdWx0LmxhbmdfY29kZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE0NDI5ODM3NTcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlTGFuZ1BhY2snIH07XG5yZXN1bHQuZGlmZmVyZW5jZSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM4NDMxMzU4NTMsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlRmF2ZWRTdGlja2VycycgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjMwNzQ3MjE5NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVDaGFubmVsUmVhZE1lc3NhZ2VzQ29udGVudHMnIH07XG5yZXN1bHQuY2hhbm5lbF9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQubWVzc2FnZXMgPSB0aGlzLnZlY3Rvcih0aGlzLmludCwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxODg3NzQxODg2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZUNvbnRhY3RzUmVzZXQnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE4OTM0MjcyNTUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlQ2hhbm5lbEF2YWlsYWJsZU1lc3NhZ2VzJyB9O1xucmVzdWx0LmNoYW5uZWxfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LmF2YWlsYWJsZV9taW5faWQgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNzgxNDUwMTc5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZURpYWxvZ1VucmVhZE1hcmsnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LnVucmVhZCA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmVzdWx0LnBlZXIgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMjc5NTE1MTYwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZVVzZXJQaW5uZWRNZXNzYWdlJyB9O1xucmVzdWx0LnVzZXJfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LmlkID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzc3NTc3MTQ2NSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVDaGF0UGlubmVkTWVzc2FnZScgfTtcbnJlc3VsdC5jaGF0X2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQudmVyc2lvbiA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI4OTYyNTg0MjcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlTWVzc2FnZVBvbGwnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LnBvbGxfaWQgPSB0aGlzLmxvbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQucG9sbCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQucmVzdWx0cyA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE0MjE4NzUyODAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlQ2hhdERlZmF1bHRCYW5uZWRSaWdodHMnIH07XG5yZXN1bHQucGVlciA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuZGVmYXVsdF9iYW5uZWRfcmlnaHRzID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC52ZXJzaW9uID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDIyOTcyODY0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZUZvbGRlclBlZXJzJyB9O1xucmVzdWx0LmZvbGRlcl9wZWVycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQucHRzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wdHNfY291bnQgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxNzg2NjcxOTc0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZVBlZXJTZXR0aW5ncycgfTtcbnJlc3VsdC5wZWVyID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5zZXR0aW5ncyA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMwMzE0MjA4NDgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlUGVlckxvY2F0ZWQnIH07XG5yZXN1bHQucGVlcnMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs5NjcxMjI0MjcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlTmV3U2NoZWR1bGVkTWVzc2FnZScgfTtcbnJlc3VsdC5tZXNzYWdlID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjQyNDcyODgxNCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVEZWxldGVTY2hlZHVsZWRNZXNzYWdlcycgfTtcbnJlc3VsdC5wZWVyID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5tZXNzYWdlcyA9IHRoaXMudmVjdG9yKHRoaXMuaW50LCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIxODI1NDQyOTEsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlVGhlbWUnIH07XG5yZXN1bHQudGhlbWUgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMjY3MDAzMTkzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZUdlb0xpdmVWaWV3ZWQnIH07XG5yZXN1bHQucGVlciA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQubXNnX2lkID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTQ0ODA3Njk0NSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVMb2dpblRva2VuJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMTIzNTg1ODM2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZU1lc3NhZ2VQb2xsVm90ZScgfTtcbnJlc3VsdC5wb2xsX2lkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQudXNlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQub3B0aW9ucyA9IHRoaXMudmVjdG9yKHRoaXMuYnl0ZXMsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNjU0MzAyODQ1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZURpYWxvZ0ZpbHRlcicgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuaWQgPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC5maWx0ZXIgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNzgyMzM5MzMzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZURpYWxvZ0ZpbHRlck9yZGVyJyB9O1xucmVzdWx0Lm9yZGVyID0gdGhpcy52ZWN0b3IodGhpcy5pbnQsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbODg5NDkxNzkxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZURpYWxvZ0ZpbHRlcnMnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI3NzUzMjkzNDIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBkYXRlcy5zdGF0ZScgfTtcbnJlc3VsdC5wdHMgPSB0aGlzLmludCgpO1xucmVzdWx0LnF0cyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXN1bHQuc2VxID0gdGhpcy5pbnQoKTtcbnJlc3VsdC51bnJlYWRfY291bnQgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxNTY3OTkwMDcyLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZXMuZGlmZmVyZW5jZUVtcHR5JyB9O1xucmVzdWx0LmRhdGUgPSB0aGlzLmludCgpO1xucmVzdWx0LnNlcSA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE2MDMwODgwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZXMuZGlmZmVyZW5jZScgfTtcbnJlc3VsdC5uZXdfbWVzc2FnZXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0Lm5ld19lbmNyeXB0ZWRfbWVzc2FnZXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0Lm90aGVyX3VwZGF0ZXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0LmNoYXRzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC51c2VycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQuc3RhdGUgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyODM1MDI4MzUzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZXMuZGlmZmVyZW5jZVNsaWNlJyB9O1xucmVzdWx0Lm5ld19tZXNzYWdlcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQubmV3X2VuY3J5cHRlZF9tZXNzYWdlcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQub3RoZXJfdXBkYXRlcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQuY2hhdHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0LnVzZXJzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC5pbnRlcm1lZGlhdGVfc3RhdGUgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMjU4MTk2ODQ1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZXMuZGlmZmVyZW5jZVRvb0xvbmcnIH07XG5yZXN1bHQucHRzID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzgwOTk4MDI4NiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVzVG9vTG9uZycgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjQzNzkyMjU3NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVTaG9ydE1lc3NhZ2UnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0Lm91dCA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0Lm1lbnRpb25lZCA9ICEhKHJlc3VsdC5mbGFncyAmIDE2KTtcbnJlc3VsdC5tZWRpYV91bnJlYWQgPSAhIShyZXN1bHQuZmxhZ3MgJiAzMik7XG5yZXN1bHQuc2lsZW50ID0gISEocmVzdWx0LmZsYWdzICYgODE5Mik7XG5yZXN1bHQuaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LnVzZXJfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0Lm1lc3NhZ2UgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnB0cyA9IHRoaXMuaW50KCk7XG5yZXN1bHQucHRzX2NvdW50ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5kYXRlID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA0KSByZXN1bHQuZndkX2Zyb20gPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIwNDgpIHJlc3VsdC52aWFfYm90X2lkID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA4KSByZXN1bHQucmVwbHlfdG9fbXNnX2lkID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxMjgpIHJlc3VsdC5lbnRpdGllcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzc3NTYyNzYwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZVNob3J0Q2hhdE1lc3NhZ2UnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0Lm91dCA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0Lm1lbnRpb25lZCA9ICEhKHJlc3VsdC5mbGFncyAmIDE2KTtcbnJlc3VsdC5tZWRpYV91bnJlYWQgPSAhIShyZXN1bHQuZmxhZ3MgJiAzMik7XG5yZXN1bHQuc2lsZW50ID0gISEocmVzdWx0LmZsYWdzICYgODE5Mik7XG5yZXN1bHQuaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LmZyb21faWQgPSB0aGlzLmludCgpO1xucmVzdWx0LmNoYXRfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0Lm1lc3NhZ2UgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnB0cyA9IHRoaXMuaW50KCk7XG5yZXN1bHQucHRzX2NvdW50ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5kYXRlID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA0KSByZXN1bHQuZndkX2Zyb20gPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIwNDgpIHJlc3VsdC52aWFfYm90X2lkID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA4KSByZXN1bHQucmVwbHlfdG9fbXNnX2lkID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxMjgpIHJlc3VsdC5lbnRpdGllcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjAyNzIxNjU3NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVTaG9ydCcgfTtcbnJlc3VsdC51cGRhdGUgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LmRhdGUgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxOTE4NTY3NjE5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZXNDb21iaW5lZCcgfTtcbnJlc3VsdC51cGRhdGVzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC51c2VycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQuY2hhdHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0LmRhdGUgPSB0aGlzLmludCgpO1xucmVzdWx0LnNlcV9zdGFydCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuc2VxID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTk1NzU3NzI4MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVzJyB9O1xucmVzdWx0LnVwZGF0ZXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0LnVzZXJzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC5jaGF0cyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQuZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXN1bHQuc2VxID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzAxMDE5OTMyLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZVNob3J0U2VudE1lc3NhZ2UnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0Lm91dCA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0LmlkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wdHMgPSB0aGlzLmludCgpO1xucmVzdWx0LnB0c19jb3VudCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZGF0ZSA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNTEyKSByZXN1bHQubWVkaWEgPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEyOCkgcmVzdWx0LmVudGl0aWVzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMzc4ODUzMDI5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3Bob3Rvcy5waG90b3MnIH07XG5yZXN1bHQucGhvdG9zID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC51c2VycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM1MjY1NzIzNiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwaG90b3MucGhvdG9zU2xpY2UnIH07XG5yZXN1bHQuY291bnQgPSB0aGlzLmludCgpO1xucmVzdWx0LnBob3RvcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQudXNlcnMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs1MzkwNDUwMzIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGhvdG9zLnBob3RvJyB9O1xucmVzdWx0LnBob3RvID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC51c2VycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE1Nzk0ODExNywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGxvYWQuZmlsZScgfTtcbnJlc3VsdC50eXBlID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5tdGltZSA9IHRoaXMuaW50KCk7XG5yZXN1bHQuYnl0ZXMgPSB0aGlzLmJ5dGVzKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQwNTI1Mzk5NzIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBsb2FkLmZpbGVDZG5SZWRpcmVjdCcgfTtcbnJlc3VsdC5kY19pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZmlsZV90b2tlbiA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC5lbmNyeXB0aW9uX2tleSA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC5lbmNyeXB0aW9uX2l2ID0gdGhpcy5ieXRlcygpO1xucmVzdWx0LmZpbGVfaGFzaGVzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDE0Njg3NTAxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2RjT3B0aW9uJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5pcHY2ID0gISEocmVzdWx0LmZsYWdzICYgMSk7XG5yZXN1bHQubWVkaWFfb25seSA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0LnRjcG9fb25seSA9ICEhKHJlc3VsdC5mbGFncyAmIDQpO1xucmVzdWx0LmNkbiA9ICEhKHJlc3VsdC5mbGFncyAmIDgpO1xucmVzdWx0LnN0YXRpYyA9ICEhKHJlc3VsdC5mbGFncyAmIDE2KTtcbnJlc3VsdC5pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuaXBfYWRkcmVzcyA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQucG9ydCA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMTAyNCkgcmVzdWx0LnNlY3JldCA9IHRoaXMuYnl0ZXMoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbODU2Mzc1Mzk5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NvbmZpZycgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQucGhvbmVjYWxsc19lbmFibGVkID0gISEocmVzdWx0LmZsYWdzICYgMik7XG5yZXN1bHQuZGVmYXVsdF9wMnBfY29udGFjdHMgPSAhIShyZXN1bHQuZmxhZ3MgJiA4KTtcbnJlc3VsdC5wcmVsb2FkX2ZlYXR1cmVkX3N0aWNrZXJzID0gISEocmVzdWx0LmZsYWdzICYgMTYpO1xucmVzdWx0Lmlnbm9yZV9waG9uZV9lbnRpdGllcyA9ICEhKHJlc3VsdC5mbGFncyAmIDMyKTtcbnJlc3VsdC5yZXZva2VfcG1faW5ib3ggPSAhIShyZXN1bHQuZmxhZ3MgJiA2NCk7XG5yZXN1bHQuYmxvY2tlZF9tb2RlID0gISEocmVzdWx0LmZsYWdzICYgMjU2KTtcbnJlc3VsdC5wZnNfZW5hYmxlZCA9ICEhKHJlc3VsdC5mbGFncyAmIDgxOTIpO1xucmVzdWx0LmRhdGUgPSB0aGlzLmludCgpO1xucmVzdWx0LmV4cGlyZXMgPSB0aGlzLmludCgpO1xucmVzdWx0LnRlc3RfbW9kZSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQudGhpc19kYyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZGNfb3B0aW9ucyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQuZGNfdHh0X2RvbWFpbl9uYW1lID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5jaGF0X3NpemVfbWF4ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5tZWdhZ3JvdXBfc2l6ZV9tYXggPSB0aGlzLmludCgpO1xucmVzdWx0LmZvcndhcmRlZF9jb3VudF9tYXggPSB0aGlzLmludCgpO1xucmVzdWx0Lm9ubGluZV91cGRhdGVfcGVyaW9kX21zID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5vZmZsaW5lX2JsdXJfdGltZW91dF9tcyA9IHRoaXMuaW50KCk7XG5yZXN1bHQub2ZmbGluZV9pZGxlX3RpbWVvdXRfbXMgPSB0aGlzLmludCgpO1xucmVzdWx0Lm9ubGluZV9jbG91ZF90aW1lb3V0X21zID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5ub3RpZnlfY2xvdWRfZGVsYXlfbXMgPSB0aGlzLmludCgpO1xucmVzdWx0Lm5vdGlmeV9kZWZhdWx0X2RlbGF5X21zID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wdXNoX2NoYXRfcGVyaW9kX21zID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wdXNoX2NoYXRfbGltaXQgPSB0aGlzLmludCgpO1xucmVzdWx0LnNhdmVkX2dpZnNfbGltaXQgPSB0aGlzLmludCgpO1xucmVzdWx0LmVkaXRfdGltZV9saW1pdCA9IHRoaXMuaW50KCk7XG5yZXN1bHQucmV2b2tlX3RpbWVfbGltaXQgPSB0aGlzLmludCgpO1xucmVzdWx0LnJldm9rZV9wbV90aW1lX2xpbWl0ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5yYXRpbmdfZV9kZWNheSA9IHRoaXMuaW50KCk7XG5yZXN1bHQuc3RpY2tlcnNfcmVjZW50X2xpbWl0ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5zdGlja2Vyc19mYXZlZF9saW1pdCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuY2hhbm5lbHNfcmVhZF9tZWRpYV9wZXJpb2QgPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC50bXBfc2Vzc2lvbnMgPSB0aGlzLmludCgpO1xucmVzdWx0LnBpbm5lZF9kaWFsb2dzX2NvdW50X21heCA9IHRoaXMuaW50KCk7XG5yZXN1bHQucGlubmVkX2luZm9sZGVyX2NvdW50X21heCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuY2FsbF9yZWNlaXZlX3RpbWVvdXRfbXMgPSB0aGlzLmludCgpO1xucmVzdWx0LmNhbGxfcmluZ190aW1lb3V0X21zID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5jYWxsX2Nvbm5lY3RfdGltZW91dF9tcyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuY2FsbF9wYWNrZXRfdGltZW91dF9tcyA9IHRoaXMuaW50KCk7XG5yZXN1bHQubWVfdXJsX3ByZWZpeCA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMTI4KSByZXN1bHQuYXV0b3VwZGF0ZV91cmxfcHJlZml4ID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA1MTIpIHJlc3VsdC5naWZfc2VhcmNoX3VzZXJuYW1lID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxMDI0KSByZXN1bHQudmVudWVfc2VhcmNoX3VzZXJuYW1lID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAyMDQ4KSByZXN1bHQuaW1nX3NlYXJjaF91c2VybmFtZSA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNDA5NikgcmVzdWx0LnN0YXRpY19tYXBzX3Byb3ZpZGVyID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5jYXB0aW9uX2xlbmd0aF9tYXggPSB0aGlzLmludCgpO1xucmVzdWx0Lm1lc3NhZ2VfbGVuZ3RoX21heCA9IHRoaXMuaW50KCk7XG5yZXN1bHQud2ViZmlsZV9kY19pZCA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNCkgcmVzdWx0LnN1Z2dlc3RlZF9sYW5nX2NvZGUgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDQpIHJlc3VsdC5sYW5nX3BhY2tfdmVyc2lvbiA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNCkgcmVzdWx0LmJhc2VfbGFuZ19wYWNrX3ZlcnNpb24gPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMzg0MDc0NjEzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ25lYXJlc3REYycgfTtcbnJlc3VsdC5jb3VudHJ5ID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC50aGlzX2RjID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5uZWFyZXN0X2RjID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDk3NDg5Mjk1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2hlbHAuYXBwVXBkYXRlJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5jYW5fbm90X3NraXAgPSAhIShyZXN1bHQuZmxhZ3MgJiAxKTtcbnJlc3VsdC5pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQudmVyc2lvbiA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQudGV4dCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuZW50aXRpZXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIpIHJlc3VsdC5kb2N1bWVudCA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNCkgcmVzdWx0LnVybCA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMyOTQyNTg0ODYsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaGVscC5ub0FwcFVwZGF0ZScgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDE1OTk3ODE2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2hlbHAuaW52aXRlVGV4dCcgfTtcbnJlc3VsdC5tZXNzYWdlID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjg3NzIxMDc4NCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdlbmNyeXB0ZWRDaGF0RW1wdHknIH07XG5yZXN1bHQuaWQgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMDA2MDQ0MTI0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2VuY3J5cHRlZENoYXRXYWl0aW5nJyB9O1xucmVzdWx0LmlkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5hY2Nlc3NfaGFzaCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmRhdGUgPSB0aGlzLmludCgpO1xucmVzdWx0LmFkbWluX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wYXJ0aWNpcGFudF9pZCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMzNjMzMjg2MzgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnZW5jcnlwdGVkQ2hhdFJlcXVlc3RlZCcgfTtcbnJlc3VsdC5pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuYWNjZXNzX2hhc2ggPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC5kYXRlID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5hZG1pbl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQucGFydGljaXBhbnRfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LmdfYSA9IHRoaXMuYnl0ZXMoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDE5OTk5Mjg4NiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdlbmNyeXB0ZWRDaGF0JyB9O1xucmVzdWx0LmlkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5hY2Nlc3NfaGFzaCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmRhdGUgPSB0aGlzLmludCgpO1xucmVzdWx0LmFkbWluX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wYXJ0aWNpcGFudF9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZ19hX29yX2IgPSB0aGlzLmJ5dGVzKCk7XG5yZXN1bHQua2V5X2ZpbmdlcnByaW50ID0gdGhpcy5sb25nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMzMjg0ODQyMywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdlbmNyeXB0ZWRDaGF0RGlzY2FyZGVkJyB9O1xucmVzdWx0LmlkID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDA0NzYxNTQ1NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dEVuY3J5cHRlZENoYXQnIH07XG5yZXN1bHQuY2hhdF9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuYWNjZXNzX2hhc2ggPSB0aGlzLmxvbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzI1NjgzMDMzNCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdlbmNyeXB0ZWRGaWxlRW1wdHknIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzEyNDg4OTMyNjAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnZW5jcnlwdGVkRmlsZScgfTtcbnJlc3VsdC5pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmFjY2Vzc19oYXNoID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuc2l6ZSA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZGNfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LmtleV9maW5nZXJwcmludCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQwNjMwNzY4NCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dEVuY3J5cHRlZEZpbGVFbXB0eScgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTY5MDEwODY3OCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dEVuY3J5cHRlZEZpbGVVcGxvYWRlZCcgfTtcbnJlc3VsdC5pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LnBhcnRzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5tZDVfY2hlY2tzdW0gPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmtleV9maW5nZXJwcmludCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE1MTE1MDMzMzMsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRFbmNyeXB0ZWRGaWxlJyB9O1xucmVzdWx0LmlkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuYWNjZXNzX2hhc2ggPSB0aGlzLmxvbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNzY3NjUyODA4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0RW5jcnlwdGVkRmlsZUJpZ1VwbG9hZGVkJyB9O1xucmVzdWx0LmlkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQucGFydHMgPSB0aGlzLmludCgpO1xucmVzdWx0LmtleV9maW5nZXJwcmludCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM5Nzc4MjI0ODgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnZW5jcnlwdGVkTWVzc2FnZScgfTtcbnJlc3VsdC5yYW5kb21faWQgPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC5jaGF0X2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5kYXRlID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5ieXRlcyA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC5maWxlID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNTk0NzU4NDA2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2VuY3J5cHRlZE1lc3NhZ2VTZXJ2aWNlJyB9O1xucmVzdWx0LnJhbmRvbV9pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmNoYXRfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LmRhdGUgPSB0aGlzLmludCgpO1xucmVzdWx0LmJ5dGVzID0gdGhpcy5ieXRlcygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMjM2MDU0NTgxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VzLmRoQ29uZmlnTm90TW9kaWZpZWQnIH07XG5yZXN1bHQucmFuZG9tID0gdGhpcy5ieXRlcygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs3NDA0MzM2MjksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZXMuZGhDb25maWcnIH07XG5yZXN1bHQuZyA9IHRoaXMuaW50KCk7XG5yZXN1bHQucCA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC52ZXJzaW9uID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5yYW5kb20gPSB0aGlzLmJ5dGVzKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE0NDM4NTg3NDEsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZXMuc2VudEVuY3J5cHRlZE1lc3NhZ2UnIH07XG5yZXN1bHQuZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI0OTI3MjcwOTAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZXMuc2VudEVuY3J5cHRlZEZpbGUnIH07XG5yZXN1bHQuZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZmlsZSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE5MjgzOTEzNDIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXREb2N1bWVudEVtcHR5JyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0NDg3NzE0NDUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXREb2N1bWVudCcgfTtcbnJlc3VsdC5pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmFjY2Vzc19oYXNoID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuZmlsZV9yZWZlcmVuY2UgPSB0aGlzLmJ5dGVzKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzkyMjI3MzkwNSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdkb2N1bWVudEVtcHR5JyB9O1xucmVzdWx0LmlkID0gdGhpcy5sb25nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI2MTExMjU0NDEsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnZG9jdW1lbnQnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LmlkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuYWNjZXNzX2hhc2ggPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC5maWxlX3JlZmVyZW5jZSA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC5kYXRlID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5taW1lX3R5cGUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnNpemUgPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC50aHVtYnMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSk7XG5yZXN1bHQuZGNfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LmF0dHJpYnV0ZXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszOTg4OTg2NzgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaGVscC5zdXBwb3J0JyB9O1xucmVzdWx0LnBob25lX251bWJlciA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQudXNlciA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI2ODE0NzQwMDgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbm90aWZ5UGVlcicgfTtcbnJlc3VsdC5wZWVyID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzAzMzAyMTI2MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdub3RpZnlVc2VycycgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzIyMTczNzE1NSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdub3RpZnlDaGF0cycgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzU5MTU2MzUwMywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdub3RpZnlCcm9hZGNhc3RzJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszODE2NDU5MDIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnc2VuZE1lc3NhZ2VUeXBpbmdBY3Rpb24nIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQyNTA4NDc0NzcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnc2VuZE1lc3NhZ2VDYW5jZWxBY3Rpb24nIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI3MTAwMzQwMzEsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnc2VuZE1lc3NhZ2VSZWNvcmRWaWRlb0FjdGlvbicgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzkxNjgzOTY2MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzZW5kTWVzc2FnZVVwbG9hZFZpZGVvQWN0aW9uJyB9O1xucmVzdWx0LnByb2dyZXNzID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzU3NjY1Njg4NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzZW5kTWVzc2FnZVJlY29yZEF1ZGlvQWN0aW9uJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0MDgyMjI3MTE1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3NlbmRNZXNzYWdlVXBsb2FkQXVkaW9BY3Rpb24nIH07XG5yZXN1bHQucHJvZ3Jlc3MgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNTIwMjg1MjIyLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3NlbmRNZXNzYWdlVXBsb2FkUGhvdG9BY3Rpb24nIH07XG5yZXN1bHQucHJvZ3Jlc3MgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyODUyOTY4OTMyLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3NlbmRNZXNzYWdlVXBsb2FkRG9jdW1lbnRBY3Rpb24nIH07XG5yZXN1bHQucHJvZ3Jlc3MgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszOTMxODYyMDksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnc2VuZE1lc3NhZ2VHZW9Mb2NhdGlvbkFjdGlvbicgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTY1MzM5MDQ0NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzZW5kTWVzc2FnZUNob29zZUNvbnRhY3RBY3Rpb24nIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM3MTQ3NDgyMzIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnc2VuZE1lc3NhZ2VHYW1lUGxheUFjdGlvbicgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjI5NzU5Mzc4OCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzZW5kTWVzc2FnZVJlY29yZFJvdW5kQWN0aW9uJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs2MDgwNTAyNzgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnc2VuZE1lc3NhZ2VVcGxvYWRSb3VuZEFjdGlvbicgfTtcbnJlc3VsdC5wcm9ncmVzcyA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMwMDQzODY3MTcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY29udGFjdHMuZm91bmQnIH07XG5yZXN1bHQubXlfcmVzdWx0cyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQucmVzdWx0cyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQuY2hhdHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0LnVzZXJzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTMzNTI4MjQ1NiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dFByaXZhY3lLZXlTdGF0dXNUaW1lc3RhbXAnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMxODczNDQ0MjIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRQcml2YWN5S2V5Q2hhdEludml0ZScgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDIwNjU1MDExMSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dFByaXZhY3lLZXlQaG9uZUNhbGwnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM2ODQ1OTM4NzQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRQcml2YWN5S2V5UGhvbmVQMlAnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI3NjU5NjYzNDQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRQcml2YWN5S2V5Rm9yd2FyZHMnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE0NjEzMDQwMTIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRQcml2YWN5S2V5UHJvZmlsZVBob3RvJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs1NTc2MTY1OCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dFByaXZhY3lLZXlQaG9uZU51bWJlcicgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzUwODY0MDczMywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dFByaXZhY3lLZXlBZGRlZEJ5UGhvbmUnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMxNTcxNzUwODgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncHJpdmFjeUtleVN0YXR1c1RpbWVzdGFtcCcgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTM0MzEyMjkzOCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwcml2YWN5S2V5Q2hhdEludml0ZScgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTAzMDEwNTk3OSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwcml2YWN5S2V5UGhvbmVDYWxsJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs5NjEwOTI4MDgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncHJpdmFjeUtleVBob25lUDJQJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxNzc3MDk2MzU1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3ByaXZhY3lLZXlGb3J3YXJkcycgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjUxNzk2NjgyOSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwcml2YWN5S2V5UHJvZmlsZVBob3RvJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNTE2NTg5MTY1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3ByaXZhY3lLZXlQaG9uZU51bWJlcicgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTEyNDA2MjI1MSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwcml2YWN5S2V5QWRkZWRCeVBob25lJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMTg3NTEwOTksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRQcml2YWN5VmFsdWVBbGxvd0NvbnRhY3RzJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0MDc1ODIxNTgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRQcml2YWN5VmFsdWVBbGxvd0FsbCcgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzIwNjUyOTI3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0UHJpdmFjeVZhbHVlQWxsb3dVc2VycycgfTtcbnJlc3VsdC51c2VycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE5NTM3MTAxNSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dFByaXZhY3lWYWx1ZURpc2FsbG93Q29udGFjdHMnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM1OTczNjI4ODksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRQcml2YWN5VmFsdWVEaXNhbGxvd0FsbCcgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjQxNzAzNDM0MywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dFByaXZhY3lWYWx1ZURpc2FsbG93VXNlcnMnIH07XG5yZXN1bHQudXNlcnMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMjgzNTcyMTU0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0UHJpdmFjeVZhbHVlQWxsb3dDaGF0UGFydGljaXBhbnRzJyB9O1xucmVzdWx0LmNoYXRzID0gdGhpcy52ZWN0b3IodGhpcy5pbnQsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzYyNjE5NzkzNSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dFByaXZhY3lWYWx1ZURpc2FsbG93Q2hhdFBhcnRpY2lwYW50cycgfTtcbnJlc3VsdC5jaGF0cyA9IHRoaXMudmVjdG9yKHRoaXMuaW50LCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQyOTQ4NDMzMDgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncHJpdmFjeVZhbHVlQWxsb3dDb250YWN0cycgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTY5ODg1NTgxMCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwcml2YWN5VmFsdWVBbGxvd0FsbCcgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTI5Nzg1ODA2MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwcml2YWN5VmFsdWVBbGxvd1VzZXJzJyB9O1xucmVzdWx0LnVzZXJzID0gdGhpcy52ZWN0b3IodGhpcy5pbnQsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDE2OTcyNjQ5MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwcml2YWN5VmFsdWVEaXNhbGxvd0NvbnRhY3RzJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMzM5NjI4ODk5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3ByaXZhY3lWYWx1ZURpc2FsbG93QWxsJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMDk2Njg1MzUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncHJpdmFjeVZhbHVlRGlzYWxsb3dVc2VycycgfTtcbnJlc3VsdC51c2VycyA9IHRoaXMudmVjdG9yKHRoaXMuaW50LCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQxNTEzNjEwNywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwcml2YWN5VmFsdWVBbGxvd0NoYXRQYXJ0aWNpcGFudHMnIH07XG5yZXN1bHQuY2hhdHMgPSB0aGlzLnZlY3Rvcih0aGlzLmludCwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyODk3MDg2MDk2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3ByaXZhY3lWYWx1ZURpc2FsbG93Q2hhdFBhcnRpY2lwYW50cycgfTtcbnJlc3VsdC5jaGF0cyA9IHRoaXMudmVjdG9yKHRoaXMuaW50LCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzEzNTI2ODMwNzcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnYWNjb3VudC5wcml2YWN5UnVsZXMnIH07XG5yZXN1bHQucnVsZXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0LmNoYXRzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC51c2VycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMxMDA2ODQyNTUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnYWNjb3VudERheXNUVEwnIH07XG5yZXN1bHQuZGF5cyA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE4MTU1OTMzMDgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnZG9jdW1lbnRBdHRyaWJ1dGVJbWFnZVNpemUnIH07XG5yZXN1bHQudyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuaCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI5NzEwOTgxNywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdkb2N1bWVudEF0dHJpYnV0ZUFuaW1hdGVkJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxNjYyNjM3NTg2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2RvY3VtZW50QXR0cmlidXRlU3RpY2tlcicgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQubWFzayA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0LmFsdCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuc3RpY2tlcnNldCA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0Lm1hc2tfY29vcmRzID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjUwNjIxMTU4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2RvY3VtZW50QXR0cmlidXRlVmlkZW8nIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LnJvdW5kX21lc3NhZ2UgPSAhIShyZXN1bHQuZmxhZ3MgJiAxKTtcbnJlc3VsdC5zdXBwb3J0c19zdHJlYW1pbmcgPSAhIShyZXN1bHQuZmxhZ3MgJiAyKTtcbnJlc3VsdC5kdXJhdGlvbiA9IHRoaXMuaW50KCk7XG5yZXN1bHQudyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuaCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI1NTU1NzQ3MjYsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnZG9jdW1lbnRBdHRyaWJ1dGVBdWRpbycgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQudm9pY2UgPSAhIShyZXN1bHQuZmxhZ3MgJiAxMDI0KTtcbnJlc3VsdC5kdXJhdGlvbiA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LnRpdGxlID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAyKSByZXN1bHQucGVyZm9ybWVyID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA0KSByZXN1bHQud2F2ZWZvcm0gPSB0aGlzLmJ5dGVzKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM1ODE1NDM0NCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdkb2N1bWVudEF0dHJpYnV0ZUZpbGVuYW1lJyB9O1xucmVzdWx0LmZpbGVfbmFtZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI1NTAyNTYzNzUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnZG9jdW1lbnRBdHRyaWJ1dGVIYXNTdGlja2VycycgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDA1MDk1MDY5MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlcy5zdGlja2Vyc05vdE1vZGlmaWVkJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszODMxMDc3ODIxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VzLnN0aWNrZXJzJyB9O1xucmVzdWx0Lmhhc2ggPSB0aGlzLmludCgpO1xucmVzdWx0LnN0aWNrZXJzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzEzNjk0Njc2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3N0aWNrZXJQYWNrJyB9O1xucmVzdWx0LmVtb3RpY29uID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5kb2N1bWVudHMgPSB0aGlzLnZlY3Rvcih0aGlzLmxvbmcsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzg5ODk5OTQ5MSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlcy5hbGxTdGlja2Vyc05vdE1vZGlmaWVkJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszOTkyNzk3Mjc5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VzLmFsbFN0aWNrZXJzJyB9O1xucmVzdWx0Lmhhc2ggPSB0aGlzLmludCgpO1xucmVzdWx0LnNldHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMjI4MzI2Nzg5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VzLmFmZmVjdGVkTWVzc2FnZXMnIH07XG5yZXN1bHQucHRzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wdHNfY291bnQgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszOTQzOTg3MTc2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3dlYlBhZ2VFbXB0eScgfTtcbnJlc3VsdC5pZCA9IHRoaXMubG9uZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMzEzOTQ5MjEyLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3dlYlBhZ2VQZW5kaW5nJyB9O1xucmVzdWx0LmlkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM5MDI1NTU1NzAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnd2ViUGFnZScgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuaWQgPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC51cmwgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmRpc3BsYXlfdXJsID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5oYXNoID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQudHlwZSA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMikgcmVzdWx0LnNpdGVfbmFtZSA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNCkgcmVzdWx0LnRpdGxlID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA4KSByZXN1bHQuZGVzY3JpcHRpb24gPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDE2KSByZXN1bHQucGhvdG8gPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDMyKSByZXN1bHQuZW1iZWRfdXJsID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAzMikgcmVzdWx0LmVtYmVkX3R5cGUgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDY0KSByZXN1bHQuZW1iZWRfd2lkdGggPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDY0KSByZXN1bHQuZW1iZWRfaGVpZ2h0ID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxMjgpIHJlc3VsdC5kdXJhdGlvbiA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMjU2KSByZXN1bHQuYXV0aG9yID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA1MTIpIHJlc3VsdC5kb2N1bWVudCA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMTAyNCkgcmVzdWx0LmNhY2hlZF9wYWdlID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA0MDk2KSByZXN1bHQuYXR0cmlidXRlcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTkzMDU0NTY4MSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd3ZWJQYWdlTm90TW9kaWZpZWQnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC5jYWNoZWRfcGFnZV92aWV3cyA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI5MDI1Nzg3MTcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnYXV0aG9yaXphdGlvbicgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuY3VycmVudCA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmVzdWx0Lm9mZmljaWFsX2FwcCA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0LnBhc3N3b3JkX3BlbmRpbmcgPSAhIShyZXN1bHQuZmxhZ3MgJiA0KTtcbnJlc3VsdC5oYXNoID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuZGV2aWNlX21vZGVsID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5wbGF0Zm9ybSA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuc3lzdGVtX3ZlcnNpb24gPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmFwaV9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuYXBwX25hbWUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmFwcF92ZXJzaW9uID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5kYXRlX2NyZWF0ZWQgPSB0aGlzLmludCgpO1xucmVzdWx0LmRhdGVfYWN0aXZlID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5pcCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuY291bnRyeSA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQucmVnaW9uID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzA3Mjc2NzY2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2FjY291bnQuYXV0aG9yaXphdGlvbnMnIH07XG5yZXN1bHQuYXV0aG9yaXphdGlvbnMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyOTA0OTY1NjI0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2FjY291bnQucGFzc3dvcmQnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0Lmhhc19yZWNvdmVyeSA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmVzdWx0Lmhhc19zZWN1cmVfdmFsdWVzID0gISEocmVzdWx0LmZsYWdzICYgMik7XG5yZXN1bHQuaGFzX3Bhc3N3b3JkID0gISEocmVzdWx0LmZsYWdzICYgNCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNCkgcmVzdWx0LmN1cnJlbnRfYWxnbyA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNCkgcmVzdWx0LnNycF9CID0gdGhpcy5ieXRlcygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDQpIHJlc3VsdC5zcnBfaWQgPSB0aGlzLmxvbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA4KSByZXN1bHQuaGludCA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMTYpIHJlc3VsdC5lbWFpbF91bmNvbmZpcm1lZF9wYXR0ZXJuID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5uZXdfYWxnbyA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQubmV3X3NlY3VyZV9hbGdvID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5zZWN1cmVfcmFuZG9tID0gdGhpcy5ieXRlcygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNTg5NzMzODYxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2FjY291bnQucGFzc3dvcmRTZXR0aW5ncycgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LmVtYWlsID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAyKSByZXN1bHQuc2VjdXJlX3NldHRpbmdzID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzI1ODM5NDU2OSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdhY2NvdW50LnBhc3N3b3JkSW5wdXRTZXR0aW5ncycgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0Lm5ld19hbGdvID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQubmV3X3Bhc3N3b3JkX2hhc2ggPSB0aGlzLmJ5dGVzKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LmhpbnQgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIpIHJlc3VsdC5lbWFpbCA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNCkgcmVzdWx0Lm5ld19zZWN1cmVfc2V0dGluZ3MgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMjY3MTU1NTcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnYXV0aC5wYXNzd29yZFJlY292ZXJ5JyB9O1xucmVzdWx0LmVtYWlsX3BhdHRlcm4gPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNzQzMzgzOTI5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3JlY2VpdmVkTm90aWZ5TWVzc2FnZScgfTtcbnJlc3VsdC5pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxNzc2MjM2MzkzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NoYXRJbnZpdGVFbXB0eScgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDIzMDg3NDU1NiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjaGF0SW52aXRlRXhwb3J0ZWQnIH07XG5yZXN1bHQubGluayA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE1MTY3OTMyMTIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhdEludml0ZUFscmVhZHknIH07XG5yZXN1bHQuY2hhdCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM3NTQwOTYwMTQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhdEludml0ZScgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuY2hhbm5lbCA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmVzdWx0LmJyb2FkY2FzdCA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0LnB1YmxpYyA9ICEhKHJlc3VsdC5mbGFncyAmIDQpO1xucmVzdWx0Lm1lZ2Fncm91cCA9ICEhKHJlc3VsdC5mbGFncyAmIDgpO1xucmVzdWx0LnRpdGxlID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5waG90byA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQucGFydGljaXBhbnRzX2NvdW50ID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxNikgcmVzdWx0LnBhcnRpY2lwYW50cyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDI5MDEyODc4OSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dFN0aWNrZXJTZXRFbXB0eScgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjY0OTIwMzMwNSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dFN0aWNrZXJTZXRJRCcgfTtcbnJlc3VsdC5pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmFjY2Vzc19oYXNoID0gdGhpcy5sb25nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIyNTAwMzMzMTIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRTdGlja2VyU2V0U2hvcnROYW1lJyB9O1xucmVzdWx0LnNob3J0X25hbWUgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0MjQwMjc2MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dFN0aWNrZXJTZXRBbmltYXRlZEVtb2ppJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszODY3MTAzNzU4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0U3RpY2tlclNldERpY2UnIH07XG5yZXN1bHQuZW1vdGljb24gPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0MDA0ODAyMzQzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3N0aWNrZXJTZXQnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LmFyY2hpdmVkID0gISEocmVzdWx0LmZsYWdzICYgMik7XG5yZXN1bHQub2ZmaWNpYWwgPSAhIShyZXN1bHQuZmxhZ3MgJiA0KTtcbnJlc3VsdC5tYXNrcyA9ICEhKHJlc3VsdC5mbGFncyAmIDgpO1xucmVzdWx0LmFuaW1hdGVkID0gISEocmVzdWx0LmZsYWdzICYgMzIpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC5pbnN0YWxsZWRfZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXN1bHQuaWQgPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC5hY2Nlc3NfaGFzaCA9IHRoaXMubG9uZygpO1xucmVzdWx0LnRpdGxlID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5zaG9ydF9uYW1lID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxNikgcmVzdWx0LnRodW1iID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxNikgcmVzdWx0LnRodW1iX2RjX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5jb3VudCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuaGFzaCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMwNTQxMTgwNTQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZXMuc3RpY2tlclNldCcgfTtcbnJlc3VsdC5zZXQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnBhY2tzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC5kb2N1bWVudHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMjYyODI2Njk1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2JvdENvbW1hbmQnIH07XG5yZXN1bHQuY29tbWFuZCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuZGVzY3JpcHRpb24gPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNTY1MzQ4NjY2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2JvdEluZm8nIH07XG5yZXN1bHQudXNlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZGVzY3JpcHRpb24gPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmNvbW1hbmRzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjczNDMxMTU1MiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdrZXlib2FyZEJ1dHRvbicgfTtcbnJlc3VsdC50ZXh0ID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNjI5ODY2MjQ1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2tleWJvYXJkQnV0dG9uVXJsJyB9O1xucmVzdWx0LnRleHQgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnVybCA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE3NDg2NTU2ODYsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAna2V5Ym9hcmRCdXR0b25DYWxsYmFjaycgfTtcbnJlc3VsdC50ZXh0ID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5kYXRhID0gdGhpcy5ieXRlcygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyOTc2NTQxNzM3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2tleWJvYXJkQnV0dG9uUmVxdWVzdFBob25lJyB9O1xucmVzdWx0LnRleHQgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0MjM1ODE1NzQzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2tleWJvYXJkQnV0dG9uUmVxdWVzdEdlb0xvY2F0aW9uJyB9O1xucmVzdWx0LnRleHQgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs5MDc0NDY0OCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdrZXlib2FyZEJ1dHRvblN3aXRjaElubGluZScgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuc2FtZV9wZWVyID0gISEocmVzdWx0LmZsYWdzICYgMSk7XG5yZXN1bHQudGV4dCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQucXVlcnkgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMzU4MTc1NDM5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2tleWJvYXJkQnV0dG9uR2FtZScgfTtcbnJlc3VsdC50ZXh0ID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjk1MDI1MDQyNywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdrZXlib2FyZEJ1dHRvbkJ1eScgfTtcbnJlc3VsdC50ZXh0ID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjgwNDY0NjgxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2tleWJvYXJkQnV0dG9uVXJsQXV0aCcgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQudGV4dCA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LmZ3ZF90ZXh0ID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC51cmwgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmJ1dHRvbl9pZCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM0OTI3MDgzMDgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRLZXlib2FyZEJ1dHRvblVybEF1dGgnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LnJlcXVlc3Rfd3JpdGVfYWNjZXNzID0gISEocmVzdWx0LmZsYWdzICYgMSk7XG5yZXN1bHQudGV4dCA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMikgcmVzdWx0LmZ3ZF90ZXh0ID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC51cmwgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmJvdCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMxNTA0MDE4ODUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAna2V5Ym9hcmRCdXR0b25SZXF1ZXN0UG9sbCcgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LnF1aXogPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnRleHQgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMDAyODE1ODc1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2tleWJvYXJkQnV0dG9uUm93JyB9O1xucmVzdWx0LmJ1dHRvbnMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNjg4NDQxMjIxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3JlcGx5S2V5Ym9hcmRIaWRlJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5zZWxlY3RpdmUgPSAhIShyZXN1bHQuZmxhZ3MgJiA0KTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDA5NDcyNDc2OCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdyZXBseUtleWJvYXJkRm9yY2VSZXBseScgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuc2luZ2xlX3VzZSA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0LnNlbGVjdGl2ZSA9ICEhKHJlc3VsdC5mbGFncyAmIDQpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs4ODkzNTM2MTIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncmVwbHlLZXlib2FyZE1hcmt1cCcgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQucmVzaXplID0gISEocmVzdWx0LmZsYWdzICYgMSk7XG5yZXN1bHQuc2luZ2xlX3VzZSA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0LnNlbGVjdGl2ZSA9ICEhKHJlc3VsdC5mbGFncyAmIDQpO1xucmVzdWx0LnJvd3MgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMjE4NjQyNTE2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3JlcGx5SW5saW5lTWFya3VwJyB9O1xucmVzdWx0LnJvd3MgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMTQ2OTU1NDEzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VFbnRpdHlVbmtub3duJyB9O1xucmVzdWx0Lm9mZnNldCA9IHRoaXMuaW50KCk7XG5yZXN1bHQubGVuZ3RoID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDE5NDU4ODU3MywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlRW50aXR5TWVudGlvbicgfTtcbnJlc3VsdC5vZmZzZXQgPSB0aGlzLmludCgpO1xucmVzdWx0Lmxlbmd0aCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE4Njg3ODIzNDksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZUVudGl0eUhhc2h0YWcnIH07XG5yZXN1bHQub2Zmc2V0ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5sZW5ndGggPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxODI3NjM3OTU5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VFbnRpdHlCb3RDb21tYW5kJyB9O1xucmVzdWx0Lm9mZnNldCA9IHRoaXMuaW50KCk7XG5yZXN1bHQubGVuZ3RoID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTg1OTEzNDc3NiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlRW50aXR5VXJsJyB9O1xucmVzdWx0Lm9mZnNldCA9IHRoaXMuaW50KCk7XG5yZXN1bHQubGVuZ3RoID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTY5MjY5Mzk1NCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlRW50aXR5RW1haWwnIH07XG5yZXN1bHQub2Zmc2V0ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5sZW5ndGggPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMTc3MjUzODMzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VFbnRpdHlCb2xkJyB9O1xucmVzdWx0Lm9mZnNldCA9IHRoaXMuaW50KCk7XG5yZXN1bHQubGVuZ3RoID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjE4ODM0ODI1NiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlRW50aXR5SXRhbGljJyB9O1xucmVzdWx0Lm9mZnNldCA9IHRoaXMuaW50KCk7XG5yZXN1bHQubGVuZ3RoID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNjgxNzA2ODY1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VFbnRpdHlDb2RlJyB9O1xucmVzdWx0Lm9mZnNldCA9IHRoaXMuaW50KCk7XG5yZXN1bHQubGVuZ3RoID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTkzODk2NzUyMCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlRW50aXR5UHJlJyB9O1xucmVzdWx0Lm9mZnNldCA9IHRoaXMuaW50KCk7XG5yZXN1bHQubGVuZ3RoID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5sYW5ndWFnZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE5OTA2NDQ1MTksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZUVudGl0eVRleHRVcmwnIH07XG5yZXN1bHQub2Zmc2V0ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5sZW5ndGggPSB0aGlzLmludCgpO1xucmVzdWx0LnVybCA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzg5MjE5MzM2OCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlRW50aXR5TWVudGlvbk5hbWUnIH07XG5yZXN1bHQub2Zmc2V0ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5sZW5ndGggPSB0aGlzLmludCgpO1xucmVzdWx0LnVzZXJfaWQgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs1NDYyMDM4NDksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRNZXNzYWdlRW50aXR5TWVudGlvbk5hbWUnIH07XG5yZXN1bHQub2Zmc2V0ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5sZW5ndGggPSB0aGlzLmludCgpO1xucmVzdWx0LnVzZXJfaWQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNjA3NDA3OTQ3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VFbnRpdHlQaG9uZScgfTtcbnJlc3VsdC5vZmZzZXQgPSB0aGlzLmludCgpO1xucmVzdWx0Lmxlbmd0aCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzEyODAyMDk5ODMsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZUVudGl0eUNhc2h0YWcnIH07XG5yZXN1bHQub2Zmc2V0ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5sZW5ndGggPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNjIyMzg5ODk5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VFbnRpdHlVbmRlcmxpbmUnIH07XG5yZXN1bHQub2Zmc2V0ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5sZW5ndGggPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMjA0ODc5MzE2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VFbnRpdHlTdHJpa2UnIH07XG5yZXN1bHQub2Zmc2V0ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5sZW5ndGggPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNDQ2OTMyOCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlRW50aXR5QmxvY2txdW90ZScgfTtcbnJlc3VsdC5vZmZzZXQgPSB0aGlzLmludCgpO1xucmVzdWx0Lmxlbmd0aCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE5ODE3MDQ5NDgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZUVudGl0eUJhbmtDYXJkJyB9O1xucmVzdWx0Lm9mZnNldCA9IHRoaXMuaW50KCk7XG5yZXN1bHQubGVuZ3RoID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDAwMjE2MDI2MiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dENoYW5uZWxFbXB0eScgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjk1MTQ0MjczNCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dENoYW5uZWwnIH07XG5yZXN1bHQuY2hhbm5lbF9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuYWNjZXNzX2hhc2ggPSB0aGlzLmxvbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNzA3MjkwNDE3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0Q2hhbm5lbEZyb21NZXNzYWdlJyB9O1xucmVzdWx0LnBlZXIgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0Lm1zZ19pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuY2hhbm5lbF9pZCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIxMzExOTY2MzMsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY29udGFjdHMucmVzb2x2ZWRQZWVyJyB9O1xucmVzdWx0LnBlZXIgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LmNoYXRzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC51c2VycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE4MjY0OTQyNywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlUmFuZ2UnIH07XG5yZXN1bHQubWluX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5tYXhfaWQgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMDQxMzQ2NTU1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZXMuY2hhbm5lbERpZmZlcmVuY2VFbXB0eScgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZmluYWwgPSAhIShyZXN1bHQuZmxhZ3MgJiAxKTtcbnJlc3VsdC5wdHMgPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIpIHJlc3VsdC50aW1lb3V0ID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjc2MzgzNTEzNCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGRhdGVzLmNoYW5uZWxEaWZmZXJlbmNlVG9vTG9uZycgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZmluYWwgPSAhIShyZXN1bHQuZmxhZ3MgJiAxKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAyKSByZXN1bHQudGltZW91dCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZGlhbG9nID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5tZXNzYWdlcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQuY2hhdHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0LnVzZXJzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNTQzNDUwOTU4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VwZGF0ZXMuY2hhbm5lbERpZmZlcmVuY2UnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LmZpbmFsID0gISEocmVzdWx0LmZsYWdzICYgMSk7XG5yZXN1bHQucHRzID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAyKSByZXN1bHQudGltZW91dCA9IHRoaXMuaW50KCk7XG5yZXN1bHQubmV3X21lc3NhZ2VzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC5vdGhlcl91cGRhdGVzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC5jaGF0cyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQudXNlcnMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNDk2OTMzNjA3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NoYW5uZWxNZXNzYWdlc0ZpbHRlckVtcHR5JyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNDQ3MTgzNzAzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NoYW5uZWxNZXNzYWdlc0ZpbHRlcicgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZXhjbHVkZV9uZXdfbWVzc2FnZXMgPSAhIShyZXN1bHQuZmxhZ3MgJiAyKTtcbnJlc3VsdC5yYW5nZXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNjc3NjY1NTcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhbm5lbFBhcnRpY2lwYW50JyB9O1xucmVzdWx0LnVzZXJfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LmRhdGUgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNzM3MzQ3MTgxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NoYW5uZWxQYXJ0aWNpcGFudFNlbGYnIH07XG5yZXN1bHQudXNlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuaW52aXRlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIxNTY3Mjk3NjQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhbm5lbFBhcnRpY2lwYW50Q3JlYXRvcicgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQudXNlcl9pZCA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LnJhbmsgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNDM1MDUxOTUxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NoYW5uZWxQYXJ0aWNpcGFudEFkbWluJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5jYW5fZWRpdCA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmVzdWx0LnNlbGYgPSAhIShyZXN1bHQuZmxhZ3MgJiAyKTtcbnJlc3VsdC51c2VyX2lkID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAyKSByZXN1bHQuaW52aXRlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQucHJvbW90ZWRfYnkgPSB0aGlzLmludCgpO1xucmVzdWx0LmRhdGUgPSB0aGlzLmludCgpO1xucmVzdWx0LmFkbWluX3JpZ2h0cyA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNCkgcmVzdWx0LnJhbmsgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0NzA3ODkyOTUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhbm5lbFBhcnRpY2lwYW50QmFubmVkJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5sZWZ0ID0gISEocmVzdWx0LmZsYWdzICYgMSk7XG5yZXN1bHQudXNlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQua2lja2VkX2J5ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5kYXRlID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5iYW5uZWRfcmlnaHRzID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzcyODY4NjIwMSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjaGFubmVsUGFydGljaXBhbnRzUmVjZW50JyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMDI2MjI1NTEzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NoYW5uZWxQYXJ0aWNpcGFudHNBZG1pbnMnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI3NDY1NjcwNDUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhbm5lbFBhcnRpY2lwYW50c0tpY2tlZCcgfTtcbnJlc3VsdC5xID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjk2NjUyMTQzNSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjaGFubmVsUGFydGljaXBhbnRzQm90cycgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzM4MTQyNjg5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NoYW5uZWxQYXJ0aWNpcGFudHNCYW5uZWQnIH07XG5yZXN1bHQucSA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzEwNjM0MzQ5OSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjaGFubmVsUGFydGljaXBhbnRzU2VhcmNoJyB9O1xucmVzdWx0LnEgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMTQ0MzQ1NzQxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NoYW5uZWxQYXJ0aWNpcGFudHNDb250YWN0cycgfTtcbnJlc3VsdC5xID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDExNzY4NDkwNCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjaGFubmVscy5jaGFubmVsUGFydGljaXBhbnRzJyB9O1xucmVzdWx0LmNvdW50ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wYXJ0aWNpcGFudHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0LnVzZXJzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDAyODA1NTUyOSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjaGFubmVscy5jaGFubmVsUGFydGljaXBhbnRzTm90TW9kaWZpZWQnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM1MDM5Mjc2NTEsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhbm5lbHMuY2hhbm5lbFBhcnRpY2lwYW50JyB9O1xucmVzdWx0LnBhcnRpY2lwYW50ID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC51c2VycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIwMTM5MjIwNjQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaGVscC50ZXJtc09mU2VydmljZScgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQucG9wdXAgPSAhIShyZXN1bHQuZmxhZ3MgJiAxKTtcbnJlc3VsdC5pZCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQudGV4dCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuZW50aXRpZXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIpIHJlc3VsdC5taW5fYWdlX2NvbmZpcm0gPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNzIxNjU2NjMsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnZm91bmRHaWYnIH07XG5yZXN1bHQudXJsID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC50aHVtYl91cmwgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmNvbnRlbnRfdXJsID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5jb250ZW50X3R5cGUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LncgPSB0aGlzLmludCgpO1xucmVzdWx0LmggPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNjI0OTE0NDQxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2ZvdW5kR2lmQ2FjaGVkJyB9O1xucmVzdWx0LnVybCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQucGhvdG8gPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LmRvY3VtZW50ID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTE1ODI5MDQ0MiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlcy5mb3VuZEdpZnMnIH07XG5yZXN1bHQubmV4dF9vZmZzZXQgPSB0aGlzLmludCgpO1xucmVzdWx0LnJlc3VsdHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszODkyNDY4ODk4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VzLnNhdmVkR2lmc05vdE1vZGlmaWVkJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs3NzIyMTMxNTcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZXMuc2F2ZWRHaWZzJyB9O1xucmVzdWx0Lmhhc2ggPSB0aGlzLmludCgpO1xucmVzdWx0LmdpZnMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs4NjQwNzc3MDIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRCb3RJbmxpbmVNZXNzYWdlTWVkaWFBdXRvJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5tZXNzYWdlID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAyKSByZXN1bHQuZW50aXRpZXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSk7XG5pZiAocmVzdWx0LmZsYWdzICYgNCkgcmVzdWx0LnJlcGx5X21hcmt1cCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzEwMzY4NzY0MjMsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRCb3RJbmxpbmVNZXNzYWdlVGV4dCcgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQubm9fd2VicGFnZSA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmVzdWx0Lm1lc3NhZ2UgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIpIHJlc3VsdC5lbnRpdGllcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA0KSByZXN1bHQucmVwbHlfbWFya3VwID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzI0OTYyNjQ2OSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dEJvdElubGluZU1lc3NhZ2VNZWRpYUdlbycgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZ2VvX3BvaW50ID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5wZXJpb2QgPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDQpIHJlc3VsdC5yZXBseV9tYXJrdXAgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMDk4NjI4ODgxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0Qm90SW5saW5lTWVzc2FnZU1lZGlhVmVudWUnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0Lmdlb19wb2ludCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQudGl0bGUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmFkZHJlc3MgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnByb3ZpZGVyID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC52ZW51ZV9pZCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQudmVudWVfdHlwZSA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNCkgcmVzdWx0LnJlcGx5X21hcmt1cCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI4MDA1OTkwMzcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRCb3RJbmxpbmVNZXNzYWdlTWVkaWFDb250YWN0JyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5waG9uZV9udW1iZXIgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmZpcnN0X25hbWUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0Lmxhc3RfbmFtZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQudmNhcmQgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDQpIHJlc3VsdC5yZXBseV9tYXJrdXAgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMjYyNjM5MjA0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0Qm90SW5saW5lTWVzc2FnZUdhbWUnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDQpIHJlc3VsdC5yZXBseV9tYXJrdXAgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMjk0MjU2NDA5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0Qm90SW5saW5lUmVzdWx0JyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5pZCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQudHlwZSA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMikgcmVzdWx0LnRpdGxlID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA0KSByZXN1bHQuZGVzY3JpcHRpb24gPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDgpIHJlc3VsdC51cmwgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDE2KSByZXN1bHQudGh1bWIgPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDMyKSByZXN1bHQuY29udGVudCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuc2VuZF9tZXNzYWdlID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjgzMjc1MzgzMSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dEJvdElubGluZVJlc3VsdFBob3RvJyB9O1xucmVzdWx0LmlkID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC50eXBlID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5waG90byA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuc2VuZF9tZXNzYWdlID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDI5NDUwNzk3MiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dEJvdElubGluZVJlc3VsdERvY3VtZW50JyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5pZCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQudHlwZSA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMikgcmVzdWx0LnRpdGxlID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA0KSByZXN1bHQuZGVzY3JpcHRpb24gPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmRvY3VtZW50ID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5zZW5kX21lc3NhZ2UgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMzM2MTU0MDk4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0Qm90SW5saW5lUmVzdWx0R2FtZScgfTtcbnJlc3VsdC5pZCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuc2hvcnRfbmFtZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuc2VuZF9tZXNzYWdlID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTk4NDc1NTcyOCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdib3RJbmxpbmVNZXNzYWdlTWVkaWFBdXRvJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5tZXNzYWdlID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAyKSByZXN1bHQuZW50aXRpZXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSk7XG5pZiAocmVzdWx0LmZsYWdzICYgNCkgcmVzdWx0LnJlcGx5X21hcmt1cCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIzNTcxNTkzOTQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnYm90SW5saW5lTWVzc2FnZVRleHQnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0Lm5vX3dlYnBhZ2UgPSAhIShyZXN1bHQuZmxhZ3MgJiAxKTtcbnJlc3VsdC5tZXNzYWdlID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAyKSByZXN1bHQuZW50aXRpZXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSk7XG5pZiAocmVzdWx0LmZsYWdzICYgNCkgcmVzdWx0LnJlcGx5X21hcmt1cCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMwNzI1MTU2ODUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnYm90SW5saW5lTWVzc2FnZU1lZGlhR2VvJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5nZW8gPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnBlcmlvZCA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNCkgcmVzdWx0LnJlcGx5X21hcmt1cCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIzMjQwNjM2NDQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnYm90SW5saW5lTWVzc2FnZU1lZGlhVmVudWUnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LmdlbyA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQudGl0bGUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmFkZHJlc3MgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnByb3ZpZGVyID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC52ZW51ZV9pZCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQudmVudWVfdHlwZSA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNCkgcmVzdWx0LnJlcGx5X21hcmt1cCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQxNjQwMjg4MiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdib3RJbmxpbmVNZXNzYWdlTWVkaWFDb250YWN0JyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5waG9uZV9udW1iZXIgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmZpcnN0X25hbWUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0Lmxhc3RfbmFtZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQudmNhcmQgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDQpIHJlc3VsdC5yZXBseV9tYXJrdXAgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyOTUwNjc0NTAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnYm90SW5saW5lUmVzdWx0JyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5pZCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQudHlwZSA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMikgcmVzdWx0LnRpdGxlID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA0KSByZXN1bHQuZGVzY3JpcHRpb24gPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDgpIHJlc3VsdC51cmwgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDE2KSByZXN1bHQudGh1bWIgPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDMyKSByZXN1bHQuY29udGVudCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuc2VuZF9tZXNzYWdlID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDAwMjY2MjUxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2JvdElubGluZU1lZGlhUmVzdWx0JyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5pZCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQudHlwZSA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LnBob3RvID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAyKSByZXN1bHQuZG9jdW1lbnQgPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDQpIHJlc3VsdC50aXRsZSA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgOCkgcmVzdWx0LmRlc2NyaXB0aW9uID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5zZW5kX21lc3NhZ2UgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNDkxMTk3NTEyLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VzLmJvdFJlc3VsdHMnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LmdhbGxlcnkgPSAhIShyZXN1bHQuZmxhZ3MgJiAxKTtcbnJlc3VsdC5xdWVyeV9pZCA9IHRoaXMubG9uZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIpIHJlc3VsdC5uZXh0X29mZnNldCA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNCkgcmVzdWx0LnN3aXRjaF9wbSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQucmVzdWx0cyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQuY2FjaGVfdGltZSA9IHRoaXMuaW50KCk7XG5yZXN1bHQudXNlcnMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxNTcxNDk0NjQ0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2V4cG9ydGVkTWVzc2FnZUxpbmsnIH07XG5yZXN1bHQubGluayA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuaHRtbCA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzg5MzAyMDI2NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlRndkSGVhZGVyJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQuZnJvbV9pZCA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMzIpIHJlc3VsdC5mcm9tX25hbWUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmRhdGUgPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIpIHJlc3VsdC5jaGFubmVsX2lkID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA0KSByZXN1bHQuY2hhbm5lbF9wb3N0ID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA4KSByZXN1bHQucG9zdF9hdXRob3IgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDE2KSByZXN1bHQuc2F2ZWRfZnJvbV9wZWVyID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxNikgcmVzdWx0LnNhdmVkX2Zyb21fbXNnX2lkID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA2NCkgcmVzdWx0LnBzYV90eXBlID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTkyMzI5MDUwOCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdhdXRoLmNvZGVUeXBlU21zJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxOTQ4MDQ2MzA3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2F1dGguY29kZVR5cGVDYWxsJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs1Nzc1NTYyMTksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnYXV0aC5jb2RlVHlwZUZsYXNoQ2FsbCcgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTAzNTY4ODMyNiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdhdXRoLnNlbnRDb2RlVHlwZUFwcCcgfTtcbnJlc3VsdC5sZW5ndGggPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMjIxMjczNTA2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2F1dGguc2VudENvZGVUeXBlU21zJyB9O1xucmVzdWx0Lmxlbmd0aCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzEzOTgwMDcyMDcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnYXV0aC5zZW50Q29kZVR5cGVDYWxsJyB9O1xucmVzdWx0Lmxlbmd0aCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI4NjkxNTE0NDksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnYXV0aC5zZW50Q29kZVR5cGVGbGFzaENhbGwnIH07XG5yZXN1bHQucGF0dGVybiA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzkxMTc2MTA2MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlcy5ib3RDYWxsYmFja0Fuc3dlcicgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuYWxlcnQgPSAhIShyZXN1bHQuZmxhZ3MgJiAyKTtcbnJlc3VsdC5oYXNfdXJsID0gISEocmVzdWx0LmZsYWdzICYgOCk7XG5yZXN1bHQubmF0aXZlX3VpID0gISEocmVzdWx0LmZsYWdzICYgMTYpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC5tZXNzYWdlID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA0KSByZXN1bHQudXJsID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5jYWNoZV90aW1lID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNjQ5NDUzMDMwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VzLm1lc3NhZ2VFZGl0RGF0YScgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuY2FwdGlvbiA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMjk5MjgwNzc3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0Qm90SW5saW5lTWVzc2FnZUlEJyB9O1xucmVzdWx0LmRjX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmFjY2Vzc19oYXNoID0gdGhpcy5sb25nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzEwMDg3NTUzNTksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5saW5lQm90U3dpdGNoUE0nIH07XG5yZXN1bHQudGV4dCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuc3RhcnRfcGFyYW0gPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs4NjMwOTM1ODgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZXMucGVlckRpYWxvZ3MnIH07XG5yZXN1bHQuZGlhbG9ncyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQubWVzc2FnZXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0LmNoYXRzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC51c2VycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQuc3RhdGUgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszOTg5Njg0MzE1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3RvcFBlZXInIH07XG5yZXN1bHQucGVlciA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQucmF0aW5nID0gdGhpcy5kb3VibGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjg3NTU5NTYxMSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd0b3BQZWVyQ2F0ZWdvcnlCb3RzUE0nIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM0NDM1NjgzNCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd0b3BQZWVyQ2F0ZWdvcnlCb3RzSW5saW5lJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMDQzMTQ4NjEsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndG9wUGVlckNhdGVnb3J5Q29ycmVzcG9uZGVudHMnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMxNzI0NDI0NDIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndG9wUGVlckNhdGVnb3J5R3JvdXBzJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNzEwMzc3MzYsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndG9wUGVlckNhdGVnb3J5Q2hhbm5lbHMnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzUxMTA5MjYyMCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd0b3BQZWVyQ2F0ZWdvcnlQaG9uZUNhbGxzJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyODIyNzk0NDA5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3RvcFBlZXJDYXRlZ29yeUZvcndhcmRVc2VycycgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDIyNjcyODE3NiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd0b3BQZWVyQ2F0ZWdvcnlGb3J3YXJkQ2hhdHMnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQyMTk2ODM0NzMsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndG9wUGVlckNhdGVnb3J5UGVlcnMnIH07XG5yZXN1bHQuY2F0ZWdvcnkgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LmNvdW50ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wZWVycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM3MjcwNjA3MjUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY29udGFjdHMudG9wUGVlcnNOb3RNb2RpZmllZCcgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTg5MTA3MDYzMiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjb250YWN0cy50b3BQZWVycycgfTtcbnJlc3VsdC5jYXRlZ29yaWVzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC5jaGF0cyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQudXNlcnMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMDM5NTk3NDY5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NvbnRhY3RzLnRvcFBlZXJzRGlzYWJsZWQnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQ1MzgwNTA4MiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdkcmFmdE1lc3NhZ2VFbXB0eScgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LmRhdGUgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0MjUzOTcwNzE5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2RyYWZ0TWVzc2FnZScgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQubm9fd2VicGFnZSA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC5yZXBseV90b19tc2dfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0Lm1lc3NhZ2UgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDgpIHJlc3VsdC5lbnRpdGllcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlKTtcbnJlc3VsdC5kYXRlID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzMzNjMwOTg2MiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlcy5mZWF0dXJlZFN0aWNrZXJzTm90TW9kaWZpZWQnIH07XG5yZXN1bHQuY291bnQgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMDY0NzA5OTUzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VzLmZlYXR1cmVkU3RpY2tlcnMnIH07XG5yZXN1bHQuaGFzaCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuY291bnQgPSB0aGlzLmludCgpO1xucmVzdWx0LnNldHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0LnVucmVhZCA9IHRoaXMudmVjdG9yKHRoaXMubG9uZywgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxODYxMjAzMzYsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZXMucmVjZW50U3RpY2tlcnNOb3RNb2RpZmllZCcgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNTg2Mzk1NTcxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VzLnJlY2VudFN0aWNrZXJzJyB9O1xucmVzdWx0Lmhhc2ggPSB0aGlzLmludCgpO1xucmVzdWx0LnBhY2tzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC5zdGlja2VycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQuZGF0ZXMgPSB0aGlzLnZlY3Rvcih0aGlzLmludCwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMzM4NzQ3MzM2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VzLmFyY2hpdmVkU3RpY2tlcnMnIH07XG5yZXN1bHQuY291bnQgPSB0aGlzLmludCgpO1xucmVzdWx0LnNldHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs5NDYwODMzNjgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZXMuc3RpY2tlclNldEluc3RhbGxSZXN1bHRTdWNjZXNzJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs5MDQxMzg5MjAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZXMuc3RpY2tlclNldEluc3RhbGxSZXN1bHRBcmNoaXZlJyB9O1xucmVzdWx0LnNldHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxNjc4ODEyNjI2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3N0aWNrZXJTZXRDb3ZlcmVkJyB9O1xucmVzdWx0LnNldCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuY292ZXIgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs4NzI5MzI2MzUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnc3RpY2tlclNldE11bHRpQ292ZXJlZCcgfTtcbnJlc3VsdC5zZXQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LmNvdmVycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI5MzMzMTY1MzAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWFza0Nvb3JkcycgfTtcbnJlc3VsdC5uID0gdGhpcy5pbnQoKTtcbnJlc3VsdC54ID0gdGhpcy5kb3VibGUoKTtcbnJlc3VsdC55ID0gdGhpcy5kb3VibGUoKTtcbnJlc3VsdC56b29tID0gdGhpcy5kb3VibGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTI1MTU0OTUyNywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dFN0aWNrZXJlZE1lZGlhUGhvdG8nIH07XG5yZXN1bHQuaWQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs3MDgxMzI3NSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dFN0aWNrZXJlZE1lZGlhRG9jdW1lbnQnIH07XG5yZXN1bHQuaWQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMTg3MjM4MjAzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2dhbWUnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LmlkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuYWNjZXNzX2hhc2ggPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC5zaG9ydF9uYW1lID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC50aXRsZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuZGVzY3JpcHRpb24gPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnBob3RvID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQuZG9jdW1lbnQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs1MzIzMTIyMywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dEdhbWVJRCcgfTtcbnJlc3VsdC5pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmFjY2Vzc19oYXNoID0gdGhpcy5sb25nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMyNzQ4Mjc3ODYsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRHYW1lU2hvcnROYW1lJyB9O1xucmVzdWx0LmJvdF9pZCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuc2hvcnRfbmFtZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE0OTMxNzE0MDgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaGlnaFNjb3JlJyB9O1xucmVzdWx0LnBvcyA9IHRoaXMuaW50KCk7XG5yZXN1bHQudXNlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuc2NvcmUgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNTg3NjIyODA5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VzLmhpZ2hTY29yZXMnIH07XG5yZXN1bHQuc2NvcmVzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC51c2VycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM2OTUwMTg1NzUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndGV4dEVtcHR5JyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxOTUwNzgyNjg4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3RleHRQbGFpbicgfTtcbnJlc3VsdC50ZXh0ID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTczMDQ1NjUxNiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd0ZXh0Qm9sZCcgfTtcbnJlc3VsdC50ZXh0ID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzY0MTg3NzkxNiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd0ZXh0SXRhbGljJyB9O1xucmVzdWx0LnRleHQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMjQwNTAxOTU2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3RleHRVbmRlcmxpbmUnIH07XG5yZXN1bHQudGV4dCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI2MTY3Njk0MjksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndGV4dFN0cmlrZScgfTtcbnJlc3VsdC50ZXh0ID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTgxNjA3NDY4MSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd0ZXh0Rml4ZWQnIH07XG5yZXN1bHQudGV4dCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzEwMDkyODgzODUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndGV4dFVybCcgfTtcbnJlc3VsdC50ZXh0ID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC51cmwgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LndlYnBhZ2VfaWQgPSB0aGlzLmxvbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzczMDQ0MzczNCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd0ZXh0RW1haWwnIH07XG5yZXN1bHQudGV4dCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuZW1haWwgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMTIwMzc2NTM1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3RleHRDb25jYXQnIH07XG5yZXN1bHQudGV4dHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszOTgzMTgxMDYwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3RleHRTdWJzY3JpcHQnIH07XG5yZXN1bHQudGV4dCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMzNTUxMzk1ODUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndGV4dFN1cGVyc2NyaXB0JyB9O1xucmVzdWx0LnRleHQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs1NTI4MTE4NSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd0ZXh0TWFya2VkJyB9O1xucmVzdWx0LnRleHQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0ODMxMDQzNjIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndGV4dFBob25lJyB9O1xucmVzdWx0LnRleHQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnBob25lID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTM2MTA1ODA3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3RleHRJbWFnZScgfTtcbnJlc3VsdC5kb2N1bWVudF9pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LncgPSB0aGlzLmludCgpO1xucmVzdWx0LmggPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs4OTQ3NzcxODYsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndGV4dEFuY2hvcicgfTtcbnJlc3VsdC50ZXh0ID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5uYW1lID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzI0NDM1NTk0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3BhZ2VCbG9ja1Vuc3VwcG9ydGVkJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxODkwMzA1MDIxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3BhZ2VCbG9ja1RpdGxlJyB9O1xucmVzdWx0LnRleHQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNDE1NTY1MzQzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3BhZ2VCbG9ja1N1YnRpdGxlJyB9O1xucmVzdWx0LnRleHQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMTMyMDg5ODI0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3BhZ2VCbG9ja0F1dGhvckRhdGUnIH07XG5yZXN1bHQuYXV0aG9yID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5wdWJsaXNoZWRfZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMyMTgxMDU1ODAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGFnZUJsb2NrSGVhZGVyJyB9O1xucmVzdWx0LnRleHQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0MDQ2MTczOTIxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3BhZ2VCbG9ja1N1YmhlYWRlcicgfTtcbnJlc3VsdC50ZXh0ID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTE4MjQwMjQwNiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwYWdlQmxvY2tQYXJhZ3JhcGgnIH07XG5yZXN1bHQudGV4dCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMyMjg2MjExMTgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGFnZUJsb2NrUHJlZm9ybWF0dGVkJyB9O1xucmVzdWx0LnRleHQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0Lmxhbmd1YWdlID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTIxNjgwOTM2OSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwYWdlQmxvY2tGb290ZXInIH07XG5yZXN1bHQudGV4dCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM2NzYzNTI5MDQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGFnZUJsb2NrRGl2aWRlcicgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzQ1Njk3MjcyMCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwYWdlQmxvY2tBbmNob3InIH07XG5yZXN1bHQubmFtZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM4NDA0NDIzODUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGFnZUJsb2NrTGlzdCcgfTtcbnJlc3VsdC5pdGVtcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzY0MTU2MzY4NiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwYWdlQmxvY2tCbG9ja3F1b3RlJyB9O1xucmVzdWx0LnRleHQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LmNhcHRpb24gPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMzI5ODc4NzM5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3BhZ2VCbG9ja1B1bGxxdW90ZScgfTtcbnJlc3VsdC50ZXh0ID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5jYXB0aW9uID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzkxNzU5MjAwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3BhZ2VCbG9ja1Bob3RvJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5waG90b19pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmNhcHRpb24gPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC51cmwgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC53ZWJwYWdlX2lkID0gdGhpcy5sb25nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIwODk4MDU3NTAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGFnZUJsb2NrVmlkZW8nIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LmF1dG9wbGF5ID0gISEocmVzdWx0LmZsYWdzICYgMSk7XG5yZXN1bHQubG9vcCA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0LnZpZGVvX2lkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuY2FwdGlvbiA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzk3MjE3NDA4MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwYWdlQmxvY2tDb3ZlcicgfTtcbnJlc3VsdC5jb3ZlciA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI4MjYwMTQxNDksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGFnZUJsb2NrRW1iZWQnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LmZ1bGxfd2lkdGggPSAhIShyZXN1bHQuZmxhZ3MgJiAxKTtcbnJlc3VsdC5hbGxvd19zY3JvbGxpbmcgPSAhIShyZXN1bHQuZmxhZ3MgJiA4KTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAyKSByZXN1bHQudXJsID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA0KSByZXN1bHQuaHRtbCA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMTYpIHJlc3VsdC5wb3N0ZXJfcGhvdG9faWQgPSB0aGlzLmxvbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAzMikgcmVzdWx0LncgPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDMyKSByZXN1bHQuaCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuY2FwdGlvbiA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQwNjU5NjE5OTUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGFnZUJsb2NrRW1iZWRQb3N0JyB9O1xucmVzdWx0LnVybCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQud2VicGFnZV9pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmF1dGhvcl9waG90b19pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmF1dGhvciA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXN1bHQuYmxvY2tzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC5jYXB0aW9uID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTcwNTA0ODY1MywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwYWdlQmxvY2tDb2xsYWdlJyB9O1xucmVzdWx0Lml0ZW1zID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC5jYXB0aW9uID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNTI0MDE1NTIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGFnZUJsb2NrU2xpZGVzaG93JyB9O1xucmVzdWx0Lml0ZW1zID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC5jYXB0aW9uID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDAxMTI4Mjg2OSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwYWdlQmxvY2tDaGFubmVsJyB9O1xucmVzdWx0LmNoYW5uZWwgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMTUxODk5NjI2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3BhZ2VCbG9ja0F1ZGlvJyB9O1xucmVzdWx0LmF1ZGlvX2lkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuY2FwdGlvbiA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzUwNDY2MDg4MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwYWdlQmxvY2tLaWNrZXInIH07XG5yZXN1bHQudGV4dCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMyMDk1NTQ1NjIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGFnZUJsb2NrVGFibGUnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LmJvcmRlcmVkID0gISEocmVzdWx0LmZsYWdzICYgMSk7XG5yZXN1bHQuc3RyaXBlZCA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0LnRpdGxlID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5yb3dzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjU5Mjc5MzA1NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwYWdlQmxvY2tPcmRlcmVkTGlzdCcgfTtcbnJlc3VsdC5pdGVtcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE5ODc0ODA1NTcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGFnZUJsb2NrRGV0YWlscycgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQub3BlbiA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmVzdWx0LmJsb2NrcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQudGl0bGUgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNzAyMzYwNTQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGFnZUJsb2NrUmVsYXRlZEFydGljbGVzJyB9O1xucmVzdWx0LnRpdGxlID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5hcnRpY2xlcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI3NTY2NTY4ODYsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGFnZUJsb2NrTWFwJyB9O1xucmVzdWx0LmdlbyA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuem9vbSA9IHRoaXMuaW50KCk7XG5yZXN1bHQudyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuaCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuY2FwdGlvbiA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIyNDYzMjA4OTcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGhvbmVDYWxsRGlzY2FyZFJlYXNvbk1pc3NlZCcgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzc2NzkxMDgxNiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwaG9uZUNhbGxEaXNjYXJkUmVhc29uRGlzY29ubmVjdCcgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTQ3MTAwNjM1MiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwaG9uZUNhbGxEaXNjYXJkUmVhc29uSGFuZ3VwJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0MjEwNTUwOTg1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3Bob25lQ2FsbERpc2NhcmRSZWFzb25CdXN5JyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMTA0NzkwMjc2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2RhdGFKU09OJyB9O1xucmVzdWx0LmRhdGEgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNDA4NDg5NDY0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2xhYmVsZWRQcmljZScgfTtcbnJlc3VsdC5sYWJlbCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuYW1vdW50ID0gdGhpcy5sb25nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMyNzIyNTQyOTYsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW52b2ljZScgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQudGVzdCA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmVzdWx0Lm5hbWVfcmVxdWVzdGVkID0gISEocmVzdWx0LmZsYWdzICYgMik7XG5yZXN1bHQucGhvbmVfcmVxdWVzdGVkID0gISEocmVzdWx0LmZsYWdzICYgNCk7XG5yZXN1bHQuZW1haWxfcmVxdWVzdGVkID0gISEocmVzdWx0LmZsYWdzICYgOCk7XG5yZXN1bHQuc2hpcHBpbmdfYWRkcmVzc19yZXF1ZXN0ZWQgPSAhIShyZXN1bHQuZmxhZ3MgJiAxNik7XG5yZXN1bHQuZmxleGlibGUgPSAhIShyZXN1bHQuZmxhZ3MgJiAzMik7XG5yZXN1bHQucGhvbmVfdG9fcHJvdmlkZXIgPSAhIShyZXN1bHQuZmxhZ3MgJiA2NCk7XG5yZXN1bHQuZW1haWxfdG9fcHJvdmlkZXIgPSAhIShyZXN1bHQuZmxhZ3MgJiAxMjgpO1xucmVzdWx0LmN1cnJlbmN5ID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5wcmljZXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszOTI2MDQ5NDA2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3BheW1lbnRDaGFyZ2UnIH07XG5yZXN1bHQuaWQgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnByb3ZpZGVyX2NoYXJnZV9pZCA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzUxMjUzNTI3NSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwb3N0QWRkcmVzcycgfTtcbnJlc3VsdC5zdHJlZXRfbGluZTEgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnN0cmVldF9saW5lMiA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuY2l0eSA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuc3RhdGUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmNvdW50cnlfaXNvMiA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQucG9zdF9jb2RlID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjQyNjE1ODk5NiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwYXltZW50UmVxdWVzdGVkSW5mbycgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0Lm5hbWUgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIpIHJlc3VsdC5waG9uZSA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNCkgcmVzdWx0LmVtYWlsID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA4KSByZXN1bHQuc2hpcHBpbmdfYWRkcmVzcyA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM0NTIwNzQ1MjcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGF5bWVudFNhdmVkQ3JlZGVudGlhbHNDYXJkJyB9O1xucmVzdWx0LmlkID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC50aXRsZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQ3NTQ2NzQ3MywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd3ZWJEb2N1bWVudCcgfTtcbnJlc3VsdC51cmwgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmFjY2Vzc19oYXNoID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuc2l6ZSA9IHRoaXMuaW50KCk7XG5yZXN1bHQubWltZV90eXBlID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5hdHRyaWJ1dGVzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDE5MDY4MjMxMCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd3ZWJEb2N1bWVudE5vUHJveHknIH07XG5yZXN1bHQudXJsID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5zaXplID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5taW1lX3R5cGUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmF0dHJpYnV0ZXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNjE2MDE3NzQxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0V2ViRG9jdW1lbnQnIH07XG5yZXN1bHQudXJsID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5zaXplID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5taW1lX3R5cGUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmF0dHJpYnV0ZXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMjU4NTcwMzc0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0V2ViRmlsZUxvY2F0aW9uJyB9O1xucmVzdWx0LnVybCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuYWNjZXNzX2hhc2ggPSB0aGlzLmxvbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjY2OTgxNDIxNywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dFdlYkZpbGVHZW9Qb2ludExvY2F0aW9uJyB9O1xucmVzdWx0Lmdlb19wb2ludCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuYWNjZXNzX2hhc2ggPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC53ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5oID0gdGhpcy5pbnQoKTtcbnJlc3VsdC56b29tID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5zY2FsZSA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzU2ODgwODM4MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGxvYWQud2ViRmlsZScgfTtcbnJlc3VsdC5zaXplID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5taW1lX3R5cGUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmZpbGVfdHlwZSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQubXRpbWUgPSB0aGlzLmludCgpO1xucmVzdWx0LmJ5dGVzID0gdGhpcy5ieXRlcygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMDYyNjQ1NDExLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3BheW1lbnRzLnBheW1lbnRGb3JtJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5jYW5fc2F2ZV9jcmVkZW50aWFscyA9ICEhKHJlc3VsdC5mbGFncyAmIDQpO1xucmVzdWx0LnBhc3N3b3JkX21pc3NpbmcgPSAhIShyZXN1bHQuZmxhZ3MgJiA4KTtcbnJlc3VsdC5ib3RfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0Lmludm9pY2UgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnByb3ZpZGVyX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC51cmwgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDE2KSByZXN1bHQubmF0aXZlX3Byb3ZpZGVyID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxNikgcmVzdWx0Lm5hdGl2ZV9wYXJhbXMgPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC5zYXZlZF9pbmZvID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAyKSByZXN1bHQuc2F2ZWRfY3JlZGVudGlhbHMgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnVzZXJzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzUxMDk2NjQwMywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwYXltZW50cy52YWxpZGF0ZWRSZXF1ZXN0ZWRJbmZvJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQuaWQgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIpIHJlc3VsdC5zaGlwcGluZ19vcHRpb25zID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMzE0ODgxODA1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3BheW1lbnRzLnBheW1lbnRSZXN1bHQnIH07XG5yZXN1bHQudXBkYXRlcyA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM2MjgxNDI5MDUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGF5bWVudHMucGF5bWVudFZlcmlmaWNhdGlvbk5lZWRlZCcgfTtcbnJlc3VsdC51cmwgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMzQyNzcxNjgxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3BheW1lbnRzLnBheW1lbnRSZWNlaXB0JyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5kYXRlID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5ib3RfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0Lmludm9pY2UgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnByb3ZpZGVyX2lkID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQuaW5mbyA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMikgcmVzdWx0LnNoaXBwaW5nID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5jdXJyZW5jeSA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQudG90YWxfYW1vdW50ID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuY3JlZGVudGlhbHNfdGl0bGUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnVzZXJzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDIyMDUxMTI5MiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwYXltZW50cy5zYXZlZEluZm8nIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0Lmhhc19zYXZlZF9jcmVkZW50aWFscyA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC5zYXZlZF9pbmZvID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzIzODk2NTk2NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dFBheW1lbnRDcmVkZW50aWFsc1NhdmVkJyB9O1xucmVzdWx0LmlkID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC50bXBfcGFzc3dvcmQgPSB0aGlzLmJ5dGVzKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzg3Mzk3NzY0MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dFBheW1lbnRDcmVkZW50aWFscycgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuc2F2ZSA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmVzdWx0LmRhdGEgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxNzgzNzM1MzUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRQYXltZW50Q3JlZGVudGlhbHNBcHBsZVBheScgfTtcbnJlc3VsdC5wYXltZW50X2RhdGEgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMzg5Mzc5ODU0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0UGF5bWVudENyZWRlbnRpYWxzQW5kcm9pZFBheScgfTtcbnJlc3VsdC5wYXltZW50X3Rva2VuID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5nb29nbGVfdHJhbnNhY3Rpb25faWQgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNjgwODI4NzI0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2FjY291bnQudG1wUGFzc3dvcmQnIH07XG5yZXN1bHQudG1wX3Bhc3N3b3JkID0gdGhpcy5ieXRlcygpO1xucmVzdWx0LnZhbGlkX3VudGlsID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzA1NTYzMTU4MywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzaGlwcGluZ09wdGlvbicgfTtcbnJlc3VsdC5pZCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQudGl0bGUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnByaWNlcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQyODg3MTc5NzQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRTdGlja2VyU2V0SXRlbScgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZG9jdW1lbnQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LmVtb2ppID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQubWFza19jb29yZHMgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs1MDY5MjA0MjksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRQaG9uZUNhbGwnIH07XG5yZXN1bHQuaWQgPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC5hY2Nlc3NfaGFzaCA9IHRoaXMubG9uZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMzk5MjQ1MDc3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3Bob25lQ2FsbEVtcHR5JyB9O1xucmVzdWx0LmlkID0gdGhpcy5sb25nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQ2MjM3NTYzMywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwaG9uZUNhbGxXYWl0aW5nJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC52aWRlbyA9ICEhKHJlc3VsdC5mbGFncyAmIDMyKTtcbnJlc3VsdC5pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmFjY2Vzc19oYXNoID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXN1bHQuYWRtaW5faWQgPSB0aGlzLmludCgpO1xucmVzdWx0LnBhcnRpY2lwYW50X2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wcm90b2NvbCA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LnJlY2VpdmVfZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIyODAzMDc1MzksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGhvbmVDYWxsUmVxdWVzdGVkJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC52aWRlbyA9ICEhKHJlc3VsdC5mbGFncyAmIDMyKTtcbnJlc3VsdC5pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmFjY2Vzc19oYXNoID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXN1bHQuYWRtaW5faWQgPSB0aGlzLmludCgpO1xucmVzdWx0LnBhcnRpY2lwYW50X2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5nX2FfaGFzaCA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC5wcm90b2NvbCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI1NzUwNTgyNTAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGhvbmVDYWxsQWNjZXB0ZWQnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LnZpZGVvID0gISEocmVzdWx0LmZsYWdzICYgMzIpO1xucmVzdWx0LmlkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuYWNjZXNzX2hhc2ggPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC5kYXRlID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5hZG1pbl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQucGFydGljaXBhbnRfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LmdfYiA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC5wcm90b2NvbCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIyNjkyOTQyMDcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGhvbmVDYWxsJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wMnBfYWxsb3dlZCA9ICEhKHJlc3VsdC5mbGFncyAmIDMyKTtcbnJlc3VsdC5pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmFjY2Vzc19oYXNoID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXN1bHQuYWRtaW5faWQgPSB0aGlzLmludCgpO1xucmVzdWx0LnBhcnRpY2lwYW50X2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5nX2Ffb3JfYiA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC5rZXlfZmluZ2VycHJpbnQgPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC5wcm90b2NvbCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuY29ubmVjdGlvbnMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0LnN0YXJ0X2RhdGUgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMzU1NDM1NDg5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3Bob25lQ2FsbERpc2NhcmRlZCcgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQubmVlZF9yYXRpbmcgPSAhIShyZXN1bHQuZmxhZ3MgJiA0KTtcbnJlc3VsdC5uZWVkX2RlYnVnID0gISEocmVzdWx0LmZsYWdzICYgOCk7XG5yZXN1bHQudmlkZW8gPSAhIShyZXN1bHQuZmxhZ3MgJiAzMik7XG5yZXN1bHQuaWQgPSB0aGlzLmxvbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQucmVhc29uID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAyKSByZXN1bHQuZHVyYXRpb24gPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNjM5MDA5NzI4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3Bob25lQ29ubmVjdGlvbicgfTtcbnJlc3VsdC5pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmlwID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5pcHY2ID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5wb3J0ID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wZWVyX3RhZyA9IHRoaXMuYnl0ZXMoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDIzNjc0MjYwMCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwaG9uZUNhbGxQcm90b2NvbCcgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQudWRwX3AycCA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmVzdWx0LnVkcF9yZWZsZWN0b3IgPSAhIShyZXN1bHQuZmxhZ3MgJiAyKTtcbnJlc3VsdC5taW5fbGF5ZXIgPSB0aGlzLmludCgpO1xucmVzdWx0Lm1heF9sYXllciA9IHRoaXMuaW50KCk7XG5yZXN1bHQubGlicmFyeV92ZXJzaW9ucyA9IHRoaXMudmVjdG9yKHRoaXMuc3RyaW5nLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM5NjgwMDAzMjAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGhvbmUucGhvbmVDYWxsJyB9O1xucmVzdWx0LnBob25lX2NhbGwgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnVzZXJzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDAwNDA0NTkzNCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cGxvYWQuY2RuRmlsZVJldXBsb2FkTmVlZGVkJyB9O1xucmVzdWx0LnJlcXVlc3RfdG9rZW4gPSB0aGlzLmJ5dGVzKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI4NDU4MjE1MTksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAndXBsb2FkLmNkbkZpbGUnIH07XG5yZXN1bHQuYnl0ZXMgPSB0aGlzLmJ5dGVzKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMzODA4MDAxODYsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2RuUHVibGljS2V5JyB9O1xucmVzdWx0LmRjX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wdWJsaWNfa2V5ID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTQ2MjEwMTAwMiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjZG5Db25maWcnIH07XG5yZXN1bHQucHVibGljX2tleXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNDAyNzI3OTI2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2xhbmdQYWNrU3RyaW5nJyB9O1xucmVzdWx0LmtleSA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQudmFsdWUgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxODE2NjM2NTc1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2xhbmdQYWNrU3RyaW5nUGx1cmFsaXplZCcgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQua2V5ID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQuemVyb192YWx1ZSA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMikgcmVzdWx0Lm9uZV92YWx1ZSA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNCkgcmVzdWx0LnR3b192YWx1ZSA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgOCkgcmVzdWx0LmZld192YWx1ZSA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMTYpIHJlc3VsdC5tYW55X3ZhbHVlID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5vdGhlcl92YWx1ZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzY5NTg1NjgxOCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdsYW5nUGFja1N0cmluZ0RlbGV0ZWQnIH07XG5yZXN1bHQua2V5ID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDA4NTYyOTQzMCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdsYW5nUGFja0RpZmZlcmVuY2UnIH07XG5yZXN1bHQubGFuZ19jb2RlID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5mcm9tX3ZlcnNpb24gPSB0aGlzLmludCgpO1xucmVzdWx0LnZlcnNpb24gPSB0aGlzLmludCgpO1xucmVzdWx0LnN0cmluZ3MgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0MDA2MjM5NDU5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2xhbmdQYWNrTGFuZ3VhZ2UnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0Lm9mZmljaWFsID0gISEocmVzdWx0LmZsYWdzICYgMSk7XG5yZXN1bHQucnRsID0gISEocmVzdWx0LmZsYWdzICYgNCk7XG5yZXN1bHQuYmV0YSA9ICEhKHJlc3VsdC5mbGFncyAmIDgpO1xucmVzdWx0Lm5hbWUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0Lm5hdGl2ZV9uYW1lID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5sYW5nX2NvZGUgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIpIHJlc3VsdC5iYXNlX2xhbmdfY29kZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQucGx1cmFsX2NvZGUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnN0cmluZ3NfY291bnQgPSB0aGlzLmludCgpO1xucmVzdWx0LnRyYW5zbGF0ZWRfY291bnQgPSB0aGlzLmludCgpO1xucmVzdWx0LnRyYW5zbGF0aW9uc191cmwgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszODczNDIxMzQ5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NoYW5uZWxBZG1pbkxvZ0V2ZW50QWN0aW9uQ2hhbmdlVGl0bGUnIH07XG5yZXN1bHQucHJldl92YWx1ZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQubmV3X3ZhbHVlID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTQyNzY3MTU5OCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjaGFubmVsQWRtaW5Mb2dFdmVudEFjdGlvbkNoYW5nZUFib3V0JyB9O1xucmVzdWx0LnByZXZfdmFsdWUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0Lm5ld192YWx1ZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE3ODMyOTkxMjgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhbm5lbEFkbWluTG9nRXZlbnRBY3Rpb25DaGFuZ2VVc2VybmFtZScgfTtcbnJlc3VsdC5wcmV2X3ZhbHVlID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5uZXdfdmFsdWUgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMTI5MDQyNjA3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NoYW5uZWxBZG1pbkxvZ0V2ZW50QWN0aW9uQ2hhbmdlUGhvdG8nIH07XG5yZXN1bHQucHJldl9waG90byA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQubmV3X3Bob3RvID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDYwOTE2NjU0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NoYW5uZWxBZG1pbkxvZ0V2ZW50QWN0aW9uVG9nZ2xlSW52aXRlcycgfTtcbnJlc3VsdC5uZXdfdmFsdWUgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs2NDg5Mzk4ODksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhbm5lbEFkbWluTG9nRXZlbnRBY3Rpb25Ub2dnbGVTaWduYXR1cmVzJyB9O1xucmVzdWx0Lm5ld192YWx1ZSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM5MjQzMDY5NjgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhbm5lbEFkbWluTG9nRXZlbnRBY3Rpb25VcGRhdGVQaW5uZWQnIH07XG5yZXN1bHQubWVzc2FnZSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE4ODkyMTU0OTMsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhbm5lbEFkbWluTG9nRXZlbnRBY3Rpb25FZGl0TWVzc2FnZScgfTtcbnJlc3VsdC5wcmV2X21lc3NhZ2UgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0Lm5ld19tZXNzYWdlID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTEyMTk5NDY4MywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjaGFubmVsQWRtaW5Mb2dFdmVudEFjdGlvbkRlbGV0ZU1lc3NhZ2UnIH07XG5yZXN1bHQubWVzc2FnZSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQwNTgxNTUwNywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjaGFubmVsQWRtaW5Mb2dFdmVudEFjdGlvblBhcnRpY2lwYW50Sm9pbicgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDE3MDY3NjIxMCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjaGFubmVsQWRtaW5Mb2dFdmVudEFjdGlvblBhcnRpY2lwYW50TGVhdmUnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM4MTAyNzY1NjgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhbm5lbEFkbWluTG9nRXZlbnRBY3Rpb25QYXJ0aWNpcGFudEludml0ZScgfTtcbnJlc3VsdC5wYXJ0aWNpcGFudCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM4NzI5MzExOTgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhbm5lbEFkbWluTG9nRXZlbnRBY3Rpb25QYXJ0aWNpcGFudFRvZ2dsZUJhbicgfTtcbnJlc3VsdC5wcmV2X3BhcnRpY2lwYW50ID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5uZXdfcGFydGljaXBhbnQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNTgwMzIzNjAwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NoYW5uZWxBZG1pbkxvZ0V2ZW50QWN0aW9uUGFydGljaXBhbnRUb2dnbGVBZG1pbicgfTtcbnJlc3VsdC5wcmV2X3BhcnRpY2lwYW50ID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5uZXdfcGFydGljaXBhbnQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyOTgyMzk4NjMxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NoYW5uZWxBZG1pbkxvZ0V2ZW50QWN0aW9uQ2hhbmdlU3RpY2tlclNldCcgfTtcbnJlc3VsdC5wcmV2X3N0aWNrZXJzZXQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0Lm5ld19zdGlja2Vyc2V0ID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTU5OTkwMzIxNywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjaGFubmVsQWRtaW5Mb2dFdmVudEFjdGlvblRvZ2dsZVByZUhpc3RvcnlIaWRkZW4nIH07XG5yZXN1bHQubmV3X3ZhbHVlID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNzcxMDk1NTYyLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NoYW5uZWxBZG1pbkxvZ0V2ZW50QWN0aW9uRGVmYXVsdEJhbm5lZFJpZ2h0cycgfTtcbnJlc3VsdC5wcmV2X2Jhbm5lZF9yaWdodHMgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0Lm5ld19iYW5uZWRfcmlnaHRzID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjM5OTYzOTEwNywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjaGFubmVsQWRtaW5Mb2dFdmVudEFjdGlvblN0b3BQb2xsJyB9O1xucmVzdWx0Lm1lc3NhZ2UgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNzI1MjE4MzMxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NoYW5uZWxBZG1pbkxvZ0V2ZW50QWN0aW9uQ2hhbmdlTGlua2VkQ2hhdCcgfTtcbnJlc3VsdC5wcmV2X3ZhbHVlID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5uZXdfdmFsdWUgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNDE5MjM3NTgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhbm5lbEFkbWluTG9nRXZlbnRBY3Rpb25DaGFuZ2VMb2NhdGlvbicgfTtcbnJlc3VsdC5wcmV2X3ZhbHVlID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5uZXdfdmFsdWUgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxNDAxOTg0ODg5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NoYW5uZWxBZG1pbkxvZ0V2ZW50QWN0aW9uVG9nZ2xlU2xvd01vZGUnIH07XG5yZXN1bHQucHJldl92YWx1ZSA9IHRoaXMuaW50KCk7XG5yZXN1bHQubmV3X3ZhbHVlID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbOTk1NzY5OTIwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NoYW5uZWxBZG1pbkxvZ0V2ZW50JyB9O1xucmVzdWx0LmlkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXN1bHQudXNlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuYWN0aW9uID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzk4NTMwNzQ2OSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjaGFubmVscy5hZG1pbkxvZ1Jlc3VsdHMnIH07XG5yZXN1bHQuZXZlbnRzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC5jaGF0cyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQudXNlcnMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszOTI2OTQ4NTgwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NoYW5uZWxBZG1pbkxvZ0V2ZW50c0ZpbHRlcicgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuam9pbiA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmVzdWx0LmxlYXZlID0gISEocmVzdWx0LmZsYWdzICYgMik7XG5yZXN1bHQuaW52aXRlID0gISEocmVzdWx0LmZsYWdzICYgNCk7XG5yZXN1bHQuYmFuID0gISEocmVzdWx0LmZsYWdzICYgOCk7XG5yZXN1bHQudW5iYW4gPSAhIShyZXN1bHQuZmxhZ3MgJiAxNik7XG5yZXN1bHQua2ljayA9ICEhKHJlc3VsdC5mbGFncyAmIDMyKTtcbnJlc3VsdC51bmtpY2sgPSAhIShyZXN1bHQuZmxhZ3MgJiA2NCk7XG5yZXN1bHQucHJvbW90ZSA9ICEhKHJlc3VsdC5mbGFncyAmIDEyOCk7XG5yZXN1bHQuZGVtb3RlID0gISEocmVzdWx0LmZsYWdzICYgMjU2KTtcbnJlc3VsdC5pbmZvID0gISEocmVzdWx0LmZsYWdzICYgNTEyKTtcbnJlc3VsdC5zZXR0aW5ncyA9ICEhKHJlc3VsdC5mbGFncyAmIDEwMjQpO1xucmVzdWx0LnBpbm5lZCA9ICEhKHJlc3VsdC5mbGFncyAmIDIwNDgpO1xucmVzdWx0LmVkaXQgPSAhIShyZXN1bHQuZmxhZ3MgJiA0MDk2KTtcbnJlc3VsdC5kZWxldGUgPSAhIShyZXN1bHQuZmxhZ3MgJiA4MTkyKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTU1ODI2NjIyOSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwb3B1bGFyQ29udGFjdCcgfTtcbnJlc3VsdC5jbGllbnRfaWQgPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC5pbXBvcnRlcnMgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNjYwMjE0NDgzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VzLmZhdmVkU3RpY2tlcnNOb3RNb2RpZmllZCcgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDA4NTE5ODYxNCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlcy5mYXZlZFN0aWNrZXJzJyB9O1xucmVzdWx0Lmhhc2ggPSB0aGlzLmludCgpO1xucmVzdWx0LnBhY2tzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC5zdGlja2VycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzExODkyMDQyODUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncmVjZW50TWVVcmxVbmtub3duJyB9O1xucmVzdWx0LnVybCA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIzNzc5MjEzMzQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncmVjZW50TWVVcmxVc2VyJyB9O1xucmVzdWx0LnVybCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQudXNlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI2ODYxMzI5ODUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncmVjZW50TWVVcmxDaGF0JyB9O1xucmVzdWx0LnVybCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuY2hhdF9pZCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM5NDc0MzE5NjUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncmVjZW50TWVVcmxDaGF0SW52aXRlJyB9O1xucmVzdWx0LnVybCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuY2hhdF9pbnZpdGUgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMTU0Nzk0NDYwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3JlY2VudE1lVXJsU3RpY2tlclNldCcgfTtcbnJlc3VsdC51cmwgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnNldCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIzNTA4MTk0MywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdoZWxwLnJlY2VudE1lVXJscycgfTtcbnJlc3VsdC51cmxzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC5jaGF0cyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQudXNlcnMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0ODI3OTc4NTUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRTaW5nbGVNZWRpYScgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQubWVkaWEgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnJhbmRvbV9pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0Lm1lc3NhZ2UgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC5lbnRpdGllcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzQwMjE4Nzc2MiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd3ZWJBdXRob3JpemF0aW9uJyB9O1xucmVzdWx0Lmhhc2ggPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC5ib3RfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LmRvbWFpbiA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuYnJvd3NlciA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQucGxhdGZvcm0gPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmRhdGVfY3JlYXRlZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZGF0ZV9hY3RpdmUgPSB0aGlzLmludCgpO1xucmVzdWx0LmlwID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5yZWdpb24gPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszOTgxODg3OTk2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2FjY291bnQud2ViQXV0aG9yaXphdGlvbnMnIH07XG5yZXN1bHQuYXV0aG9yaXphdGlvbnMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0LnVzZXJzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjc5Mjc5Mjg2NiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dE1lc3NhZ2VJRCcgfTtcbnJlc3VsdC5pZCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMxMzQ3NTE2MzcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRNZXNzYWdlUmVwbHlUbycgfTtcbnJlc3VsdC5pZCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIyNTcwMDM4MzIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRNZXNzYWdlUGlubmVkJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0MjM5MDY0NzU5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0RGlhbG9nUGVlcicgfTtcbnJlc3VsdC5wZWVyID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTY4NDAxNDM3NSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dERpYWxvZ1BlZXJGb2xkZXInIH07XG5yZXN1bHQuZm9sZGVyX2lkID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzg0OTE3NDc4OSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdkaWFsb2dQZWVyJyB9O1xucmVzdWx0LnBlZXIgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMzYzNDgzMTA2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2RpYWxvZ1BlZXJGb2xkZXInIH07XG5yZXN1bHQuZm9sZGVyX2lkID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjIzNjU1NTE3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ21lc3NhZ2VzLmZvdW5kU3RpY2tlclNldHNOb3RNb2RpZmllZCcgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTM1OTUzMzY0MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlcy5mb3VuZFN0aWNrZXJTZXRzJyB9O1xucmVzdWx0Lmhhc2ggPSB0aGlzLmludCgpO1xucmVzdWx0LnNldHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxNjQ4NTQzNjAzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2ZpbGVIYXNoJyB9O1xucmVzdWx0Lm9mZnNldCA9IHRoaXMuaW50KCk7XG5yZXN1bHQubGltaXQgPSB0aGlzLmludCgpO1xucmVzdWx0Lmhhc2ggPSB0aGlzLmJ5dGVzKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE5Njg3MzcwODcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRDbGllbnRQcm94eScgfTtcbnJlc3VsdC5hZGRyZXNzID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5wb3J0ID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzgxMTYxNDU5MSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdoZWxwLnRlcm1zT2ZTZXJ2aWNlVXBkYXRlRW1wdHknIH07XG5yZXN1bHQuZXhwaXJlcyA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzY4NjYxODk3NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdoZWxwLnRlcm1zT2ZTZXJ2aWNlVXBkYXRlJyB9O1xucmVzdWx0LmV4cGlyZXMgPSB0aGlzLmludCgpO1xucmVzdWx0LnRlcm1zX29mX3NlcnZpY2UgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs4NTkwOTExODQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRTZWN1cmVGaWxlVXBsb2FkZWQnIH07XG5yZXN1bHQuaWQgPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC5wYXJ0cyA9IHRoaXMuaW50KCk7XG5yZXN1bHQubWQ1X2NoZWNrc3VtID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5maWxlX2hhc2ggPSB0aGlzLmJ5dGVzKCk7XG5yZXN1bHQuc2VjcmV0ID0gdGhpcy5ieXRlcygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMzk5MzE3OTUwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0U2VjdXJlRmlsZScgfTtcbnJlc3VsdC5pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmFjY2Vzc19oYXNoID0gdGhpcy5sb25nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE2NzkzOTg3MjQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnc2VjdXJlRmlsZUVtcHR5JyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNzYwNjgzNjE4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3NlY3VyZUZpbGUnIH07XG5yZXN1bHQuaWQgPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC5hY2Nlc3NfaGFzaCA9IHRoaXMubG9uZygpO1xucmVzdWx0LnNpemUgPSB0aGlzLmludCgpO1xucmVzdWx0LmRjX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5kYXRlID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5maWxlX2hhc2ggPSB0aGlzLmJ5dGVzKCk7XG5yZXN1bHQuc2VjcmV0ID0gdGhpcy5ieXRlcygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMzMwNjQwMDY3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3NlY3VyZURhdGEnIH07XG5yZXN1bHQuZGF0YSA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC5kYXRhX2hhc2ggPSB0aGlzLmJ5dGVzKCk7XG5yZXN1bHQuc2VjcmV0ID0gdGhpcy5ieXRlcygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMTAzNDgyODQ1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3NlY3VyZVBsYWluUGhvbmUnIH07XG5yZXN1bHQucGhvbmUgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs1NjkxMzc3NTksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnc2VjdXJlUGxhaW5FbWFpbCcgfTtcbnJlc3VsdC5lbWFpbCA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI2MzY4MDg2NzUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnc2VjdXJlVmFsdWVUeXBlUGVyc29uYWxEZXRhaWxzJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMDM0NzA5NTA0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3NlY3VyZVZhbHVlVHlwZVBhc3Nwb3J0JyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMTU2MTUxNzIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnc2VjdXJlVmFsdWVUeXBlRHJpdmVyTGljZW5zZScgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjY5ODAxNTgxOSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzZWN1cmVWYWx1ZVR5cGVJZGVudGl0eUNhcmQnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI1Nzc2OTg1OTUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnc2VjdXJlVmFsdWVUeXBlSW50ZXJuYWxQYXNzcG9ydCcgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzQyMDY1OTIzOCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzZWN1cmVWYWx1ZVR5cGVBZGRyZXNzJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0MjMxNDM1NTk4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3NlY3VyZVZhbHVlVHlwZVV0aWxpdHlCaWxsJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMjk5NzU1NTMzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3NlY3VyZVZhbHVlVHlwZUJhbmtTdGF0ZW1lbnQnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIzNDA5NTkzNjgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnc2VjdXJlVmFsdWVUeXBlUmVudGFsQWdyZWVtZW50JyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNTgxODIzNTk0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3NlY3VyZVZhbHVlVHlwZVBhc3Nwb3J0UmVnaXN0cmF0aW9uJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszOTI2MDYwMDgzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3NlY3VyZVZhbHVlVHlwZVRlbXBvcmFyeVJlZ2lzdHJhdGlvbicgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzAwNTI2MjU1NSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzZWN1cmVWYWx1ZVR5cGVQaG9uZScgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjM4NjMzOTgyMiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzZWN1cmVWYWx1ZVR5cGVFbWFpbCcgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDExMDE3NDE4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3NlY3VyZVZhbHVlJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC50eXBlID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQuZGF0YSA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMikgcmVzdWx0LmZyb250X3NpZGUgPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDQpIHJlc3VsdC5yZXZlcnNlX3NpZGUgPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDgpIHJlc3VsdC5zZWxmaWUgPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDY0KSByZXN1bHQudHJhbnNsYXRpb24gPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSk7XG5pZiAocmVzdWx0LmZsYWdzICYgMTYpIHJlc3VsdC5maWxlcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAzMikgcmVzdWx0LnBsYWluX2RhdGEgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0Lmhhc2ggPSB0aGlzLmJ5dGVzKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM2NzY0MjY0MDcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRTZWN1cmVWYWx1ZScgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQudHlwZSA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LmRhdGEgPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIpIHJlc3VsdC5mcm9udF9zaWRlID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA0KSByZXN1bHQucmV2ZXJzZV9zaWRlID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA4KSByZXN1bHQuc2VsZmllID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA2NCkgcmVzdWx0LnRyYW5zbGF0aW9uID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDE2KSByZXN1bHQuZmlsZXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSk7XG5pZiAocmVzdWx0LmZsYWdzICYgMzIpIHJlc3VsdC5wbGFpbl9kYXRhID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzk3ODIxODkyOCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzZWN1cmVWYWx1ZUhhc2gnIH07XG5yZXN1bHQudHlwZSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuaGFzaCA9IHRoaXMuYnl0ZXMoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzkwMzA2NTA0OSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzZWN1cmVWYWx1ZUVycm9yRGF0YScgfTtcbnJlc3VsdC50eXBlID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5kYXRhX2hhc2ggPSB0aGlzLmJ5dGVzKCk7XG5yZXN1bHQuZmllbGQgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnRleHQgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMjQ2NzcwNiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzZWN1cmVWYWx1ZUVycm9yRnJvbnRTaWRlJyB9O1xucmVzdWx0LnR5cGUgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LmZpbGVfaGFzaCA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC50ZXh0ID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjI1NzIwMTgyOSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzZWN1cmVWYWx1ZUVycm9yUmV2ZXJzZVNpZGUnIH07XG5yZXN1bHQudHlwZSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuZmlsZV9oYXNoID0gdGhpcy5ieXRlcygpO1xucmVzdWx0LnRleHQgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszODQ1NjM5ODk0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3NlY3VyZVZhbHVlRXJyb3JTZWxmaWUnIH07XG5yZXN1bHQudHlwZSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuZmlsZV9oYXNoID0gdGhpcy5ieXRlcygpO1xucmVzdWx0LnRleHQgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMDU0MTYyNTQ3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3NlY3VyZVZhbHVlRXJyb3JGaWxlJyB9O1xucmVzdWx0LnR5cGUgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LmZpbGVfaGFzaCA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC50ZXh0ID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTcxNzcwNjk4NSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzZWN1cmVWYWx1ZUVycm9yRmlsZXMnIH07XG5yZXN1bHQudHlwZSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuZmlsZV9oYXNoID0gdGhpcy52ZWN0b3IodGhpcy5ieXRlcywgZmFsc2UpO1xucmVzdWx0LnRleHQgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMjU4NDY2MTkxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3NlY3VyZVZhbHVlRXJyb3InIH07XG5yZXN1bHQudHlwZSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuaGFzaCA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC50ZXh0ID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjcwMjQ2MDc4NCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzZWN1cmVWYWx1ZUVycm9yVHJhbnNsYXRpb25GaWxlJyB9O1xucmVzdWx0LnR5cGUgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LmZpbGVfaGFzaCA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC50ZXh0ID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbODc4OTMxNDE2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3NlY3VyZVZhbHVlRXJyb3JUcmFuc2xhdGlvbkZpbGVzJyB9O1xucmVzdWx0LnR5cGUgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LmZpbGVfaGFzaCA9IHRoaXMudmVjdG9yKHRoaXMuYnl0ZXMsIGZhbHNlKTtcbnJlc3VsdC50ZXh0ID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbODcxNDI2NjMxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3NlY3VyZUNyZWRlbnRpYWxzRW5jcnlwdGVkJyB9O1xucmVzdWx0LmRhdGEgPSB0aGlzLmJ5dGVzKCk7XG5yZXN1bHQuaGFzaCA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC5zZWNyZXQgPSB0aGlzLmJ5dGVzKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI5MDU0ODA0MDgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnYWNjb3VudC5hdXRob3JpemF0aW9uRm9ybScgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQucmVxdWlyZWRfdHlwZXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0LnZhbHVlcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQuZXJyb3JzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC51c2VycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0LnByaXZhY3lfcG9saWN5X3VybCA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIxNjYzMjY2MDcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnYWNjb3VudC5zZW50RW1haWxDb2RlJyB9O1xucmVzdWx0LmVtYWlsX3BhdHRlcm4gPSB0aGlzLnN0cmluZygpO1xucmVzdWx0Lmxlbmd0aCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE3MjI3ODYxNTAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaGVscC5kZWVwTGlua0luZm9FbXB0eScgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTc4MzU1NjE0NiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdoZWxwLmRlZXBMaW5rSW5mbycgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQudXBkYXRlX2FwcCA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmVzdWx0Lm1lc3NhZ2UgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIpIHJlc3VsdC5lbnRpdGllcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjg5NTg2NTE4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3NhdmVkUGhvbmVDb250YWN0JyB9O1xucmVzdWx0LnBob25lID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5maXJzdF9uYW1lID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5sYXN0X25hbWUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmRhdGUgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMzA0MDUyOTkzLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2FjY291bnQudGFrZW91dCcgfTtcbnJlc3VsdC5pZCA9IHRoaXMubG9uZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNTYyNzEzMjM4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3Bhc3N3b3JkS2RmQWxnb1Vua25vd24nIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzk4MjU5Mjg0MiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwYXNzd29yZEtkZkFsZ29TSEEyNTZTSEEyNTZQQktERjJITUFDU0hBNTEyaXRlcjEwMDAwMFNIQTI1Nk1vZFBvdycgfTtcbnJlc3VsdC5zYWx0MSA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC5zYWx0MiA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC5nID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wID0gdGhpcy5ieXRlcygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0ODgzNzY3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3NlY3VyZVBhc3N3b3JkS2RmQWxnb1Vua25vd24nIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMxNTMyNTU4NDAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnc2VjdXJlUGFzc3dvcmRLZGZBbGdvUEJLREYySE1BQ1NIQTUxMml0ZXIxMDAwMDAnIH07XG5yZXN1bHQuc2FsdCA9IHRoaXMuYnl0ZXMoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjI1MjgwNzU3MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzZWN1cmVQYXNzd29yZEtkZkFsZ29TSEE1MTInIH07XG5yZXN1bHQuc2FsdCA9IHRoaXMuYnl0ZXMoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzU0OTI1NzQwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3NlY3VyZVNlY3JldFNldHRpbmdzJyB9O1xucmVzdWx0LnNlY3VyZV9hbGdvID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5zZWN1cmVfc2VjcmV0ID0gdGhpcy5ieXRlcygpO1xucmVzdWx0LnNlY3VyZV9zZWNyZXRfaWQgPSB0aGlzLmxvbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjU1ODU4ODUwNCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dENoZWNrUGFzc3dvcmRFbXB0eScgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzUzMTYwMDAwMiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dENoZWNrUGFzc3dvcmRTUlAnIH07XG5yZXN1bHQuc3JwX2lkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuQSA9IHRoaXMuYnl0ZXMoKTtcbnJlc3VsdC5NMSA9IHRoaXMuYnl0ZXMoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjE5MTM2NjYxOCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzZWN1cmVSZXF1aXJlZFR5cGUnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0Lm5hdGl2ZV9uYW1lcyA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmVzdWx0LnNlbGZpZV9yZXF1aXJlZCA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0LnRyYW5zbGF0aW9uX3JlcXVpcmVkID0gISEocmVzdWx0LmZsYWdzICYgNCk7XG5yZXN1bHQudHlwZSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQxMTg3MjUyLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3NlY3VyZVJlcXVpcmVkVHlwZU9uZU9mJyB9O1xucmVzdWx0LnR5cGVzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzIxNjYzNDk2NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdoZWxwLnBhc3Nwb3J0Q29uZmlnTm90TW9kaWZpZWQnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI2OTQzNzA5OTEsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaGVscC5wYXNzcG9ydENvbmZpZycgfTtcbnJlc3VsdC5oYXNoID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5jb3VudHJpZXNfbGFuZ3MgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0ODgzMTM0MTMsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRBcHBFdmVudCcgfTtcbnJlc3VsdC50aW1lID0gdGhpcy5kb3VibGUoKTtcbnJlc3VsdC50eXBlID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5wZWVyID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuZGF0YSA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMyMzU3ODE1OTMsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnanNvbk9iamVjdFZhbHVlJyB9O1xucmVzdWx0LmtleSA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQudmFsdWUgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMDY0MTM5NjI0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2pzb25OdWxsJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMzQyMDk4MDI2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2pzb25Cb29sJyB9O1xucmVzdWx0LnZhbHVlID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNzM2MTU3NjA0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2pzb25OdW1iZXInIH07XG5yZXN1bHQudmFsdWUgPSB0aGlzLmRvdWJsZSgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMDcyMjI2OTM4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2pzb25TdHJpbmcnIH07XG5yZXN1bHQudmFsdWUgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0MTQ4NDQ3MDc1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2pzb25BcnJheScgfTtcbnJlc3VsdC52YWx1ZSA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI1Nzk2MTY5MjUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnanNvbk9iamVjdCcgfTtcbnJlc3VsdC52YWx1ZSA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzg3ODA3ODgyNiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwYWdlVGFibGVDZWxsJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5oZWFkZXIgPSAhIShyZXN1bHQuZmxhZ3MgJiAxKTtcbnJlc3VsdC5hbGlnbl9jZW50ZXIgPSAhIShyZXN1bHQuZmxhZ3MgJiA4KTtcbnJlc3VsdC5hbGlnbl9yaWdodCA9ICEhKHJlc3VsdC5mbGFncyAmIDE2KTtcbnJlc3VsdC52YWxpZ25fbWlkZGxlID0gISEocmVzdWx0LmZsYWdzICYgMzIpO1xucmVzdWx0LnZhbGlnbl9ib3R0b20gPSAhIShyZXN1bHQuZmxhZ3MgJiA2NCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMTI4KSByZXN1bHQudGV4dCA9IHRoaXMucHJlZGljYXRlKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMikgcmVzdWx0LmNvbHNwYW4gPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDQpIHJlc3VsdC5yb3dzcGFuID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzc3MDcyOTk1NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwYWdlVGFibGVSb3cnIH07XG5yZXN1bHQuY2VsbHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxODY5OTAzNDQ3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3BhZ2VDYXB0aW9uJyB9O1xucmVzdWx0LnRleHQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LmNyZWRpdCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMxMDY5MTE5NDksIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGFnZUxpc3RJdGVtVGV4dCcgfTtcbnJlc3VsdC50ZXh0ID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNjM1NDY2NzQ4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3BhZ2VMaXN0SXRlbUJsb2NrcycgfTtcbnJlc3VsdC5ibG9ja3MgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxNTc3NDg0MzU5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3BhZ2VMaXN0T3JkZXJlZEl0ZW1UZXh0JyB9O1xucmVzdWx0Lm51bSA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQudGV4dCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI1NjQ2NTU0MTQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGFnZUxpc3RPcmRlcmVkSXRlbUJsb2NrcycgfTtcbnJlc3VsdC5udW0gPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmJsb2NrcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMwMTI2MTUxNzYsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGFnZVJlbGF0ZWRBcnRpY2xlJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC51cmwgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LndlYnBhZ2VfaWQgPSB0aGlzLmxvbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQudGl0bGUgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIpIHJlc3VsdC5kZXNjcmlwdGlvbiA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNCkgcmVzdWx0LnBob3RvX2lkID0gdGhpcy5sb25nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgOCkgcmVzdWx0LmF1dGhvciA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMTYpIHJlc3VsdC5wdWJsaXNoZWRfZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI1NTY3ODg0OTMsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncGFnZScgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQucGFydCA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmVzdWx0LnJ0bCA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0LnYyID0gISEocmVzdWx0LmZsYWdzICYgNCk7XG5yZXN1bHQudXJsID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC5ibG9ja3MgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0LnBob3RvcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQuZG9jdW1lbnRzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA4KSByZXN1bHQudmlld3MgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMzQ5MTk5ODE3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2hlbHAuc3VwcG9ydE5hbWUnIH07XG5yZXN1bHQubmFtZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQwODgyNzg3NjUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaGVscC51c2VySW5mb0VtcHR5JyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMjE5MjM0NCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdoZWxwLnVzZXJJbmZvJyB9O1xucmVzdWx0Lm1lc3NhZ2UgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmVudGl0aWVzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC5hdXRob3IgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmRhdGUgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxODIzMDY0ODA5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3BvbGxBbnN3ZXInIH07XG5yZXN1bHQudGV4dCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQub3B0aW9uID0gdGhpcy5ieXRlcygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMjYyOTI1NjY1LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3BvbGwnIH07XG5yZXN1bHQuaWQgPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuY2xvc2VkID0gISEocmVzdWx0LmZsYWdzICYgMSk7XG5yZXN1bHQucHVibGljX3ZvdGVycyA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0Lm11bHRpcGxlX2Nob2ljZSA9ICEhKHJlc3VsdC5mbGFncyAmIDQpO1xucmVzdWx0LnF1aXogPSAhIShyZXN1bHQuZmxhZ3MgJiA4KTtcbnJlc3VsdC5xdWVzdGlvbiA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuYW5zd2VycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5pZiAocmVzdWx0LmZsYWdzICYgMTYpIHJlc3VsdC5jbG9zZV9wZXJpb2QgPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDMyKSByZXN1bHQuY2xvc2VfZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzk5NzA1NTE4NiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwb2xsQW5zd2VyVm90ZXJzJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5jaG9zZW4gPSAhIShyZXN1bHQuZmxhZ3MgJiAxKTtcbnJlc3VsdC5jb3JyZWN0ID0gISEocmVzdWx0LmZsYWdzICYgMik7XG5yZXN1bHQub3B0aW9uID0gdGhpcy5ieXRlcygpO1xucmVzdWx0LnZvdGVycyA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMxMzUwMjk2NjcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncG9sbFJlc3VsdHMnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0Lm1pbiA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDIpIHJlc3VsdC5yZXN1bHRzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDQpIHJlc3VsdC50b3RhbF92b3RlcnMgPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDgpIHJlc3VsdC5yZWNlbnRfdm90ZXJzID0gdGhpcy52ZWN0b3IodGhpcy5pbnQpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDE2KSByZXN1bHQuc29sdXRpb24gPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDE2KSByZXN1bHQuc29sdXRpb25fZW50aXRpZXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQwMzA4NDk2MTYsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhdE9ubGluZXMnIH07XG5yZXN1bHQub25saW5lcyA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzEyMDIyODcwNzIsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnc3RhdHNVUkwnIH07XG5yZXN1bHQudXJsID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTYwNTUxMDM1NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjaGF0QWRtaW5SaWdodHMnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LmNoYW5nZV9pbmZvID0gISEocmVzdWx0LmZsYWdzICYgMSk7XG5yZXN1bHQucG9zdF9tZXNzYWdlcyA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0LmVkaXRfbWVzc2FnZXMgPSAhIShyZXN1bHQuZmxhZ3MgJiA0KTtcbnJlc3VsdC5kZWxldGVfbWVzc2FnZXMgPSAhIShyZXN1bHQuZmxhZ3MgJiA4KTtcbnJlc3VsdC5iYW5fdXNlcnMgPSAhIShyZXN1bHQuZmxhZ3MgJiAxNik7XG5yZXN1bHQuaW52aXRlX3VzZXJzID0gISEocmVzdWx0LmZsYWdzICYgMzIpO1xucmVzdWx0LnBpbl9tZXNzYWdlcyA9ICEhKHJlc3VsdC5mbGFncyAmIDEyOCk7XG5yZXN1bHQuYWRkX2FkbWlucyA9ICEhKHJlc3VsdC5mbGFncyAmIDUxMik7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI2Njg3NTgwNDAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY2hhdEJhbm5lZFJpZ2h0cycgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQudmlld19tZXNzYWdlcyA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmVzdWx0LnNlbmRfbWVzc2FnZXMgPSAhIShyZXN1bHQuZmxhZ3MgJiAyKTtcbnJlc3VsdC5zZW5kX21lZGlhID0gISEocmVzdWx0LmZsYWdzICYgNCk7XG5yZXN1bHQuc2VuZF9zdGlja2VycyA9ICEhKHJlc3VsdC5mbGFncyAmIDgpO1xucmVzdWx0LnNlbmRfZ2lmcyA9ICEhKHJlc3VsdC5mbGFncyAmIDE2KTtcbnJlc3VsdC5zZW5kX2dhbWVzID0gISEocmVzdWx0LmZsYWdzICYgMzIpO1xucmVzdWx0LnNlbmRfaW5saW5lID0gISEocmVzdWx0LmZsYWdzICYgNjQpO1xucmVzdWx0LmVtYmVkX2xpbmtzID0gISEocmVzdWx0LmZsYWdzICYgMTI4KTtcbnJlc3VsdC5zZW5kX3BvbGxzID0gISEocmVzdWx0LmZsYWdzICYgMjU2KTtcbnJlc3VsdC5jaGFuZ2VfaW5mbyA9ICEhKHJlc3VsdC5mbGFncyAmIDEwMjQpO1xucmVzdWx0Lmludml0ZV91c2VycyA9ICEhKHJlc3VsdC5mbGFncyAmIDMyNzY4KTtcbnJlc3VsdC5waW5fbWVzc2FnZXMgPSAhIShyZXN1bHQuZmxhZ3MgJiAxMzEwNzIpO1xucmVzdWx0LnVudGlsX2RhdGUgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszODYxOTUyODg5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2lucHV0V2FsbFBhcGVyJyB9O1xucmVzdWx0LmlkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuYWNjZXNzX2hhc2ggPSB0aGlzLmxvbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTkxMzE5OTc0NCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dFdhbGxQYXBlclNsdWcnIH07XG5yZXN1bHQuc2x1ZyA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIyMTcxOTY0NjAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRXYWxsUGFwZXJOb0ZpbGUnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQ3MTQzNzY5OSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdhY2NvdW50LndhbGxQYXBlcnNOb3RNb2RpZmllZCcgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTg4MTg5MjI2NSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdhY2NvdW50LndhbGxQYXBlcnMnIH07XG5yZXN1bHQuaGFzaCA9IHRoaXMuaW50KCk7XG5yZXN1bHQud2FsbHBhcGVycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM3MzcwNDI1NjMsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnY29kZVNldHRpbmdzJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5hbGxvd19mbGFzaGNhbGwgPSAhIShyZXN1bHQuZmxhZ3MgJiAxKTtcbnJlc3VsdC5jdXJyZW50X251bWJlciA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0LmFsbG93X2FwcF9oYXNoID0gISEocmVzdWx0LmZsYWdzICYgMTYpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs4NDQzODI2NCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd3YWxsUGFwZXJTZXR0aW5ncycgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuYmx1ciA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0Lm1vdGlvbiA9ICEhKHJlc3VsdC5mbGFncyAmIDQpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC5iYWNrZ3JvdW5kX2NvbG9yID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxNikgcmVzdWx0LnNlY29uZF9iYWNrZ3JvdW5kX2NvbG9yID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA4KSByZXN1bHQuaW50ZW5zaXR5ID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxNikgcmVzdWx0LnJvdGF0aW9uID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzc2MjQzNDgwMywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdhdXRvRG93bmxvYWRTZXR0aW5ncycgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZGlzYWJsZWQgPSAhIShyZXN1bHQuZmxhZ3MgJiAxKTtcbnJlc3VsdC52aWRlb19wcmVsb2FkX2xhcmdlID0gISEocmVzdWx0LmZsYWdzICYgMik7XG5yZXN1bHQuYXVkaW9fcHJlbG9hZF9uZXh0ID0gISEocmVzdWx0LmZsYWdzICYgNCk7XG5yZXN1bHQucGhvbmVjYWxsc19sZXNzX2RhdGEgPSAhIShyZXN1bHQuZmxhZ3MgJiA4KTtcbnJlc3VsdC5waG90b19zaXplX21heCA9IHRoaXMuaW50KCk7XG5yZXN1bHQudmlkZW9fc2l6ZV9tYXggPSB0aGlzLmludCgpO1xucmVzdWx0LmZpbGVfc2l6ZV9tYXggPSB0aGlzLmludCgpO1xucmVzdWx0LnZpZGVvX3VwbG9hZF9tYXhiaXRyYXRlID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTY3NDIzNTY4NiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdhY2NvdW50LmF1dG9Eb3dubG9hZFNldHRpbmdzJyB9O1xucmVzdWx0LmxvdyA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQubWVkaXVtID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5oaWdoID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzU4NTMyNTU2MSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdlbW9qaUtleXdvcmQnIH07XG5yZXN1bHQua2V5d29yZCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuZW1vdGljb25zID0gdGhpcy52ZWN0b3IodGhpcy5zdHJpbmcsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNTk0NDA4OTk0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2Vtb2ppS2V5d29yZERlbGV0ZWQnIH07XG5yZXN1bHQua2V5d29yZCA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQuZW1vdGljb25zID0gdGhpcy52ZWN0b3IodGhpcy5zdHJpbmcsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTU1NjU3MDU1NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdlbW9qaUtleXdvcmRzRGlmZmVyZW5jZScgfTtcbnJlc3VsdC5sYW5nX2NvZGUgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LmZyb21fdmVyc2lvbiA9IHRoaXMuaW50KCk7XG5yZXN1bHQudmVyc2lvbiA9IHRoaXMuaW50KCk7XG5yZXN1bHQua2V5d29yZHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNzc1OTM3OTQ5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2Vtb2ppVVJMJyB9O1xucmVzdWx0LnVybCA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMwMTk1OTI1NDUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnZW1vamlMYW5ndWFnZScgfTtcbnJlc3VsdC5sYW5nX2NvZGUgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMTYyNDkwNTczLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2ZpbGVMb2NhdGlvblRvQmVEZXByZWNhdGVkJyB9O1xucmVzdWx0LnZvbHVtZV9pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmxvY2FsX2lkID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDI4MzcxNTE3MywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdmb2xkZXInIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LmF1dG9maWxsX25ld19icm9hZGNhc3RzID0gISEocmVzdWx0LmZsYWdzICYgMSk7XG5yZXN1bHQuYXV0b2ZpbGxfcHVibGljX2dyb3VwcyA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0LmF1dG9maWxsX25ld19jb3JyZXNwb25kZW50cyA9ICEhKHJlc3VsdC5mbGFncyAmIDQpO1xucmVzdWx0LmlkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC50aXRsZSA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgOCkgcmVzdWx0LnBob3RvID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDIyNDg5MzU5MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdpbnB1dEZvbGRlclBlZXInIH07XG5yZXN1bHQucGVlciA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuZm9sZGVyX2lkID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzkyMTMyMzYyNCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdmb2xkZXJQZWVyJyB9O1xucmVzdWx0LnBlZXIgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LmZvbGRlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM4OTY4MzA5NzUsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZXMuc2VhcmNoQ291bnRlcicgfTtcbnJlc3VsdC5mbGFncyA9IHRoaXMuaW50KCk7XG5yZXN1bHQuaW5leGFjdCA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0LmZpbHRlciA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuY291bnQgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyNDYzMzE2NDk0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3VybEF1dGhSZXN1bHRSZXF1ZXN0JyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5yZXF1ZXN0X3dyaXRlX2FjY2VzcyA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmVzdWx0LmJvdCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuZG9tYWluID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjQwODMyMDU5MCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cmxBdXRoUmVzdWx0QWNjZXB0ZWQnIH07XG5yZXN1bHQudXJsID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjg0OTQzMDMwMywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd1cmxBdXRoUmVzdWx0RGVmYXVsdCcgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzIxNjM1NDY5OSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdjaGFubmVsTG9jYXRpb25FbXB0eScgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNTQ3MDYyNDkxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2NoYW5uZWxMb2NhdGlvbicgfTtcbnJlc3VsdC5nZW9fcG9pbnQgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LmFkZHJlc3MgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMzkzNTkyMTU3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3BlZXJMb2NhdGVkJyB9O1xucmVzdWx0LnBlZXIgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LmV4cGlyZXMgPSB0aGlzLmludCgpO1xucmVzdWx0LmRpc3RhbmNlID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDE3NjIyNjM3OSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdwZWVyU2VsZkxvY2F0ZWQnIH07XG5yZXN1bHQuZXhwaXJlcyA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzM0OTcxNzYyNDQsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAncmVzdHJpY3Rpb25SZWFzb24nIH07XG5yZXN1bHQucGxhdGZvcm0gPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnJlYXNvbiA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQudGV4dCA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzEwMTIzMDY5MjEsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRUaGVtZScgfTtcbnJlc3VsdC5pZCA9IHRoaXMubG9uZygpO1xucmVzdWx0LmFjY2Vzc19oYXNoID0gdGhpcy5sb25nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQxMTkzOTk5MjEsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRUaGVtZVNsdWcnIH07XG5yZXN1bHQuc2x1ZyA9IHRoaXMuc3RyaW5nKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQyOTMwNDUyLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3RoZW1lJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5jcmVhdG9yID0gISEocmVzdWx0LmZsYWdzICYgMSk7XG5yZXN1bHQuZGVmYXVsdCA9ICEhKHJlc3VsdC5mbGFncyAmIDIpO1xucmVzdWx0LmlkID0gdGhpcy5sb25nKCk7XG5yZXN1bHQuYWNjZXNzX2hhc2ggPSB0aGlzLmxvbmcoKTtcbnJlc3VsdC5zbHVnID0gdGhpcy5zdHJpbmcoKTtcbnJlc3VsdC50aXRsZSA9IHRoaXMuc3RyaW5nKCk7XG5pZiAocmVzdWx0LmZsYWdzICYgNCkgcmVzdWx0LmRvY3VtZW50ID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA4KSByZXN1bHQuc2V0dGluZ3MgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0Lmluc3RhbGxzX2NvdW50ID0gdGhpcy5pbnQoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbNDA5NTY1MzQxMCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdhY2NvdW50LnRoZW1lc05vdE1vZGlmaWVkJyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMTM3NDgyMjczLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2FjY291bnQudGhlbWVzJyB9O1xucmVzdWx0Lmhhc2ggPSB0aGlzLmludCgpO1xucmVzdWx0LnRoZW1lcyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE2NTQ1OTM5MjAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnYXV0aC5sb2dpblRva2VuJyB9O1xucmVzdWx0LmV4cGlyZXMgPSB0aGlzLmludCgpO1xucmVzdWx0LnRva2VuID0gdGhpcy5ieXRlcygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMTAwMDg1OTgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnYXV0aC5sb2dpblRva2VuTWlncmF0ZVRvJyB9O1xucmVzdWx0LmRjX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC50b2tlbiA9IHRoaXMuYnl0ZXMoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbOTU3MTc2OTI2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2F1dGgubG9naW5Ub2tlblN1Y2Nlc3MnIH07XG5yZXN1bHQuYXV0aG9yaXphdGlvbiA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzE0NzQ0NjIyNDEsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnYWNjb3VudC5jb250ZW50U2V0dGluZ3MnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LnNlbnNpdGl2ZV9lbmFibGVkID0gISEocmVzdWx0LmZsYWdzICYgMSk7XG5yZXN1bHQuc2Vuc2l0aXZlX2Nhbl9jaGFuZ2UgPSAhIShyZXN1bHQuZmxhZ3MgJiAyKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjgzNzk3MDYyOSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlcy5pbmFjdGl2ZUNoYXRzJyB9O1xucmVzdWx0LmRhdGVzID0gdGhpcy52ZWN0b3IodGhpcy5pbnQsIGZhbHNlKTtcbnJlc3VsdC5jaGF0cyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQudXNlcnMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMjgyMTE3NzMwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2Jhc2VUaGVtZUNsYXNzaWMnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzQyMjUyNDI3NjAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnYmFzZVRoZW1lRGF5JyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMDgxOTY5MzIwLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2Jhc2VUaGVtZU5pZ2h0JyB9O1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxODM0OTczMTY2LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2Jhc2VUaGVtZVRpbnRlZCcgfTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTUyNzg0NTQ2NiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdiYXNlVGhlbWVBcmN0aWMnIH07XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMxNzYxNjg2NTcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnaW5wdXRUaGVtZVNldHRpbmdzJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5iYXNlX3RoZW1lID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5hY2NlbnRfY29sb3IgPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC5tZXNzYWdlX3RvcF9jb2xvciA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0Lm1lc3NhZ2VfYm90dG9tX2NvbG9yID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAyKSByZXN1bHQud2FsbHBhcGVyID0gdGhpcy5wcmVkaWNhdGUoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAyKSByZXN1bHQud2FsbHBhcGVyX3NldHRpbmdzID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjYxODU5NTQwMiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd0aGVtZVNldHRpbmdzJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5iYXNlX3RoZW1lID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5hY2NlbnRfY29sb3IgPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC5tZXNzYWdlX3RvcF9jb2xvciA9IHRoaXMuaW50KCk7XG5pZiAocmVzdWx0LmZsYWdzICYgMSkgcmVzdWx0Lm1lc3NhZ2VfYm90dG9tX2NvbG9yID0gdGhpcy5pbnQoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAyKSByZXN1bHQud2FsbHBhcGVyID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTQyMTE3NDI5NSwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICd3ZWJQYWdlQXR0cmlidXRlVGhlbWUnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC5kb2N1bWVudHMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSk7XG5pZiAocmVzdWx0LmZsYWdzICYgMikgcmVzdWx0LnNldHRpbmdzID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjcyNzIzNjk1MywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlVXNlclZvdGUnIH07XG5yZXN1bHQudXNlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQub3B0aW9uID0gdGhpcy5ieXRlcygpO1xucmVzdWx0LmRhdGUgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs5MDk2MDM4ODgsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZVVzZXJWb3RlSW5wdXRPcHRpb24nIH07XG5yZXN1bHQudXNlcl9pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQuZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzI0NDMxMDIzOCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlVXNlclZvdGVNdWx0aXBsZScgfTtcbnJlc3VsdC51c2VyX2lkID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5vcHRpb25zID0gdGhpcy52ZWN0b3IodGhpcy5ieXRlcywgZmFsc2UpO1xucmVzdWx0LmRhdGUgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMzY1NzQ1MzcsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnbWVzc2FnZXMudm90ZXNMaXN0JyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5jb3VudCA9IHRoaXMuaW50KCk7XG5yZXN1bHQudm90ZXMgPSB0aGlzLnZlY3Rvcih0aGlzLnByZWRpY2F0ZSwgZmFsc2UpO1xucmVzdWx0LnVzZXJzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiAxKSByZXN1bHQubmV4dF9vZmZzZXQgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFs0MTE3MjM0MzE0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2JhbmtDYXJkT3BlblVybCcgfTtcbnJlc3VsdC51cmwgPSB0aGlzLnN0cmluZygpO1xucmVzdWx0Lm5hbWUgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsxMDQyNjA1NDI3LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3BheW1lbnRzLmJhbmtDYXJkRGF0YScgfTtcbnJlc3VsdC50aXRsZSA9IHRoaXMuc3RyaW5nKCk7XG5yZXN1bHQub3Blbl91cmxzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMTk0OTg5MDUzNiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdkaWFsb2dGaWx0ZXInIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0LmNvbnRhY3RzID0gISEocmVzdWx0LmZsYWdzICYgMSk7XG5yZXN1bHQubm9uX2NvbnRhY3RzID0gISEocmVzdWx0LmZsYWdzICYgMik7XG5yZXN1bHQuZ3JvdXBzID0gISEocmVzdWx0LmZsYWdzICYgNCk7XG5yZXN1bHQuYnJvYWRjYXN0cyA9ICEhKHJlc3VsdC5mbGFncyAmIDgpO1xucmVzdWx0LmJvdHMgPSAhIShyZXN1bHQuZmxhZ3MgJiAxNik7XG5yZXN1bHQuZXhjbHVkZV9tdXRlZCA9ICEhKHJlc3VsdC5mbGFncyAmIDIwNDgpO1xucmVzdWx0LmV4Y2x1ZGVfcmVhZCA9ICEhKHJlc3VsdC5mbGFncyAmIDQwOTYpO1xucmVzdWx0LmV4Y2x1ZGVfYXJjaGl2ZWQgPSAhIShyZXN1bHQuZmxhZ3MgJiA4MTkyKTtcbnJlc3VsdC5pZCA9IHRoaXMuaW50KCk7XG5yZXN1bHQudGl0bGUgPSB0aGlzLnN0cmluZygpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDMzNTU0NDMyKSByZXN1bHQuZW1vdGljb24gPSB0aGlzLnN0cmluZygpO1xucmVzdWx0LnBpbm5lZF9wZWVycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQuaW5jbHVkZV9wZWVycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXN1bHQuZXhjbHVkZV9wZWVycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzIwMDQxMTA2NjYsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnZGlhbG9nRmlsdGVyU3VnZ2VzdGVkJyB9O1xucmVzdWx0LmZpbHRlciA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuZGVzY3JpcHRpb24gPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszMDU3MTE4NjM5LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3N0YXRzRGF0ZVJhbmdlRGF5cycgfTtcbnJlc3VsdC5taW5fZGF0ZSA9IHRoaXMuaW50KCk7XG5yZXN1bHQubWF4X2RhdGUgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFszNDEwMjEwMDE0LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3N0YXRzQWJzVmFsdWVBbmRQcmV2JyB9O1xucmVzdWx0LmN1cnJlbnQgPSB0aGlzLmRvdWJsZSgpO1xucmVzdWx0LnByZXZpb3VzID0gdGhpcy5kb3VibGUoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzQxOTI4NzUyMCwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzdGF0c1BlcmNlbnRWYWx1ZScgfTtcbnJlc3VsdC5wYXJ0ID0gdGhpcy5kb3VibGUoKTtcbnJlc3VsdC50b3RhbCA9IHRoaXMuZG91YmxlKCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzEyNDQxMzAwOTMsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnc3RhdHNHcmFwaEFzeW5jJyB9O1xucmVzdWx0LnRva2VuID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMzIwMjEyNzkwNiwgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdzdGF0c0dyYXBoRXJyb3InIH07XG5yZXN1bHQuZXJyb3IgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMzkzMTM4MzU4LCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ3N0YXRzR3JhcGgnIH07XG5yZXN1bHQuZmxhZ3MgPSB0aGlzLmludCgpO1xucmVzdWx0Lmpzb24gPSB0aGlzLnByZWRpY2F0ZSgpO1xuaWYgKHJlc3VsdC5mbGFncyAmIDEpIHJlc3VsdC56b29tX3Rva2VuID0gdGhpcy5zdHJpbmcoKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjkwNzY4NzM1NywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdtZXNzYWdlSW50ZXJhY3Rpb25Db3VudGVycycgfTtcbnJlc3VsdC5tc2dfaWQgPSB0aGlzLmludCgpO1xucmVzdWx0LnZpZXdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5mb3J3YXJkcyA9IHRoaXMuaW50KCk7XG5yZXR1cm4gcmVzdWx0O1xuICB9XSxcbiAgWzMxODcxMTQ5MDAsIGZ1bmN0aW9uKCkge1xuY29uc3QgcmVzdWx0ID0geyBfOiAnc3RhdHMuYnJvYWRjYXN0U3RhdHMnIH07XG5yZXN1bHQucGVyaW9kID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5mb2xsb3dlcnMgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnZpZXdzX3Blcl9wb3N0ID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5zaGFyZXNfcGVyX3Bvc3QgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LmVuYWJsZWRfbm90aWZpY2F0aW9ucyA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuZ3Jvd3RoX2dyYXBoID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5mb2xsb3dlcnNfZ3JhcGggPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0Lm11dGVfZ3JhcGggPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnRvcF9ob3Vyc19ncmFwaCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQuaW50ZXJhY3Rpb25zX2dyYXBoID0gdGhpcy5wcmVkaWNhdGUoKTtcbnJlc3VsdC5pdl9pbnRlcmFjdGlvbnNfZ3JhcGggPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LnZpZXdzX2J5X3NvdXJjZV9ncmFwaCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQubmV3X2ZvbGxvd2Vyc19ieV9zb3VyY2VfZ3JhcGggPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0Lmxhbmd1YWdlc19ncmFwaCA9IHRoaXMucHJlZGljYXRlKCk7XG5yZXN1bHQucmVjZW50X21lc3NhZ2VfaW50ZXJhY3Rpb25zID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJldHVybiByZXN1bHQ7XG4gIH1dLFxuICBbMjU2NjMwMjgzNywgZnVuY3Rpb24oKSB7XG5jb25zdCByZXN1bHQgPSB7IF86ICdoZWxwLnByb21vRGF0YUVtcHR5JyB9O1xucmVzdWx0LmV4cGlyZXMgPSB0aGlzLmludCgpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG4gIFsyMzUyNTc2ODMxLCBmdW5jdGlvbigpIHtcbmNvbnN0IHJlc3VsdCA9IHsgXzogJ2hlbHAucHJvbW9EYXRhJyB9O1xucmVzdWx0LmZsYWdzID0gdGhpcy5pbnQoKTtcbnJlc3VsdC5wcm94eSA9ICEhKHJlc3VsdC5mbGFncyAmIDEpO1xucmVzdWx0LmV4cGlyZXMgPSB0aGlzLmludCgpO1xucmVzdWx0LnBlZXIgPSB0aGlzLnByZWRpY2F0ZSgpO1xucmVzdWx0LmNoYXRzID0gdGhpcy52ZWN0b3IodGhpcy5wcmVkaWNhdGUsIGZhbHNlKTtcbnJlc3VsdC51c2VycyA9IHRoaXMudmVjdG9yKHRoaXMucHJlZGljYXRlLCBmYWxzZSk7XG5pZiAocmVzdWx0LmZsYWdzICYgMikgcmVzdWx0LnBzYV90eXBlID0gdGhpcy5zdHJpbmcoKTtcbmlmIChyZXN1bHQuZmxhZ3MgJiA0KSByZXN1bHQucHNhX21lc3NhZ2UgPSB0aGlzLnN0cmluZygpO1xucmV0dXJuIHJlc3VsdDtcbiAgfV0sXG5dKTtcbmV4cG9ydCBkZWZhdWx0IHBhcnNlck1hcDsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mtproto/core/src/tl/parser/index.js\n");

/***/ }),

/***/ "./node_modules/@mtproto/core/src/tl/serializer/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@mtproto/core/src/tl/serializer/index.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var big_integer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! big-integer */ \"./node_modules/big-integer/BigInteger.js\");\n/* harmony import */ var big_integer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(big_integer__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _builder_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../builder/index.js */ \"./node_modules/@mtproto/core/src/tl/builder/index.js\");\n\n\n\nclass Serializer {\n  constructor() {\n    // 0.5 MB\n    this.buffer = new ArrayBuffer(524288);\n    this.dataView = new DataView(this.buffer);\n    this.byteView = new Uint8Array(this.buffer);\n\n    this.offset = 0;\n  }\n\n  uint32(value) {\n    this.dataView.setUint32(this.offset, value, true);\n    this.offset += 4;\n  }\n\n  int32(value) {\n    this.dataView.setInt32(this.offset, value, true);\n    this.offset += 4;\n  }\n\n  long(value) {\n    if (Array.isArray(value)) {\n      if (value.length === 2) {\n        const [low, high] = value;\n\n        this.uint32(high);\n        this.uint32(low);\n      } else {\n        this.bytesRaw(value);\n      }\n\n      return;\n    }\n\n    const { quotient, remainder } = big_integer__WEBPACK_IMPORTED_MODULE_0___default()(value).divmod(big_integer__WEBPACK_IMPORTED_MODULE_0___default()(0x100000000));\n\n    this.uint32(remainder.toJSNumber());\n    this.uint32(quotient.toJSNumber());\n  }\n\n  int128(array) {\n    this.byteView.set(array, this.offset);\n    this.offset += 16;\n  }\n\n  int256(array) {\n    this.byteView.set(array, this.offset);\n    this.offset += 32;\n  }\n\n  double(value) {\n    this.dataView.setFloat64(this.offset, value, true);\n    this.offset += 8;\n  }\n\n  bytes(bytes) {\n    const { length } = bytes;\n\n    if (length <= 253) {\n      this.byteView[this.offset++] = length;\n    } else {\n      this.byteView[this.offset++] = 254;\n      this.byteView[this.offset++] = length & 0xff;\n      this.byteView[this.offset++] = (length & 0xff00) >> 8;\n      this.byteView[this.offset++] = (length & 0xff0000) >> 16;\n    }\n\n    this.byteView.set(bytes, this.offset);\n    this.offset += length;\n\n    // Padding\n    while (this.offset % 4 !== 0) {\n      this.byteView[this.offset++] = 0;\n    }\n  }\n\n  bytesRaw(bytes) {\n    this.byteView.set(bytes, this.offset);\n    this.offset += bytes.length;\n  }\n\n  string(value) {\n    const encoder = new TextEncoder();\n\n    const bytes = encoder.encode(value);\n\n    this.bytes(bytes);\n  }\n\n  int(value) {\n    this.int32(value);\n  }\n\n  // TODO: Convert method name to 'bool'\n  Bool(value) {\n    this.predicate({ _: value ? 'boolTrue' : 'boolFalse' });\n  }\n\n  has(value) {\n    return +!!(Array.isArray(value) ? value.length : value);\n  }\n\n  flag(fn, value) {\n    if (this.has(value)) {\n      fn.call(this, value);\n    }\n  }\n\n  flagVector(fn, value) {\n    if (value === undefined || value.length === 0) {\n      return;\n    }\n\n    this.vector(fn, value);\n  }\n\n  vector(fn, value) {\n    this.int32(0x1cb5c415);\n    this.int32(value.length);\n\n    for (let i = 0; i < value.length; i++) {\n      fn.call(this, value[i]);\n    }\n  }\n\n  predicate(params, bare = false) {\n    const fn = _builder_index_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"][params._];\n\n    fn.call(this, params);\n  }\n\n  getBytes() {\n    const resultBuffer = new ArrayBuffer(this.offset);\n    const resultArray = new Uint8Array(resultBuffer);\n\n    resultArray.set(this.byteView.subarray(0, this.offset));\n\n    return resultArray;\n  }\n\n  getBuffer() {\n    return this.getBytes().buffer;\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Serializer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvdGwvc2VyaWFsaXplci9pbmRleC5qcz82MjZiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQWlDO0FBQ1k7O0FBRTdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBOztBQUVBLFdBQVcsc0JBQXNCLEdBQUcsa0RBQU0sZUFBZSxrREFBTTs7QUFFL0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxTQUFTOztBQUVwQjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixzQ0FBc0M7QUFDMUQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CLGtCQUFrQjtBQUNyQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLHlEQUFVOztBQUV6QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVlLHlFQUFVLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvdGwvc2VyaWFsaXplci9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBiaWdJbnQgZnJvbSAnYmlnLWludGVnZXInO1xuaW1wb3J0IGJ1aWxkZXJNYXAgZnJvbSAnLi4vYnVpbGRlci9pbmRleC5qcyc7XG5cbmNsYXNzIFNlcmlhbGl6ZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyAwLjUgTUJcbiAgICB0aGlzLmJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcig1MjQyODgpO1xuICAgIHRoaXMuZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcodGhpcy5idWZmZXIpO1xuICAgIHRoaXMuYnl0ZVZpZXcgPSBuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlcik7XG5cbiAgICB0aGlzLm9mZnNldCA9IDA7XG4gIH1cblxuICB1aW50MzIodmFsdWUpIHtcbiAgICB0aGlzLmRhdGFWaWV3LnNldFVpbnQzMih0aGlzLm9mZnNldCwgdmFsdWUsIHRydWUpO1xuICAgIHRoaXMub2Zmc2V0ICs9IDQ7XG4gIH1cblxuICBpbnQzMih2YWx1ZSkge1xuICAgIHRoaXMuZGF0YVZpZXcuc2V0SW50MzIodGhpcy5vZmZzZXQsIHZhbHVlLCB0cnVlKTtcbiAgICB0aGlzLm9mZnNldCArPSA0O1xuICB9XG5cbiAgbG9uZyh2YWx1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBjb25zdCBbbG93LCBoaWdoXSA9IHZhbHVlO1xuXG4gICAgICAgIHRoaXMudWludDMyKGhpZ2gpO1xuICAgICAgICB0aGlzLnVpbnQzMihsb3cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5ieXRlc1Jhdyh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7IHF1b3RpZW50LCByZW1haW5kZXIgfSA9IGJpZ0ludCh2YWx1ZSkuZGl2bW9kKGJpZ0ludCgweDEwMDAwMDAwMCkpO1xuXG4gICAgdGhpcy51aW50MzIocmVtYWluZGVyLnRvSlNOdW1iZXIoKSk7XG4gICAgdGhpcy51aW50MzIocXVvdGllbnQudG9KU051bWJlcigpKTtcbiAgfVxuXG4gIGludDEyOChhcnJheSkge1xuICAgIHRoaXMuYnl0ZVZpZXcuc2V0KGFycmF5LCB0aGlzLm9mZnNldCk7XG4gICAgdGhpcy5vZmZzZXQgKz0gMTY7XG4gIH1cblxuICBpbnQyNTYoYXJyYXkpIHtcbiAgICB0aGlzLmJ5dGVWaWV3LnNldChhcnJheSwgdGhpcy5vZmZzZXQpO1xuICAgIHRoaXMub2Zmc2V0ICs9IDMyO1xuICB9XG5cbiAgZG91YmxlKHZhbHVlKSB7XG4gICAgdGhpcy5kYXRhVmlldy5zZXRGbG9hdDY0KHRoaXMub2Zmc2V0LCB2YWx1ZSwgdHJ1ZSk7XG4gICAgdGhpcy5vZmZzZXQgKz0gODtcbiAgfVxuXG4gIGJ5dGVzKGJ5dGVzKSB7XG4gICAgY29uc3QgeyBsZW5ndGggfSA9IGJ5dGVzO1xuXG4gICAgaWYgKGxlbmd0aCA8PSAyNTMpIHtcbiAgICAgIHRoaXMuYnl0ZVZpZXdbdGhpcy5vZmZzZXQrK10gPSBsZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYnl0ZVZpZXdbdGhpcy5vZmZzZXQrK10gPSAyNTQ7XG4gICAgICB0aGlzLmJ5dGVWaWV3W3RoaXMub2Zmc2V0KytdID0gbGVuZ3RoICYgMHhmZjtcbiAgICAgIHRoaXMuYnl0ZVZpZXdbdGhpcy5vZmZzZXQrK10gPSAobGVuZ3RoICYgMHhmZjAwKSA+PiA4O1xuICAgICAgdGhpcy5ieXRlVmlld1t0aGlzLm9mZnNldCsrXSA9IChsZW5ndGggJiAweGZmMDAwMCkgPj4gMTY7XG4gICAgfVxuXG4gICAgdGhpcy5ieXRlVmlldy5zZXQoYnl0ZXMsIHRoaXMub2Zmc2V0KTtcbiAgICB0aGlzLm9mZnNldCArPSBsZW5ndGg7XG5cbiAgICAvLyBQYWRkaW5nXG4gICAgd2hpbGUgKHRoaXMub2Zmc2V0ICUgNCAhPT0gMCkge1xuICAgICAgdGhpcy5ieXRlVmlld1t0aGlzLm9mZnNldCsrXSA9IDA7XG4gICAgfVxuICB9XG5cbiAgYnl0ZXNSYXcoYnl0ZXMpIHtcbiAgICB0aGlzLmJ5dGVWaWV3LnNldChieXRlcywgdGhpcy5vZmZzZXQpO1xuICAgIHRoaXMub2Zmc2V0ICs9IGJ5dGVzLmxlbmd0aDtcbiAgfVxuXG4gIHN0cmluZyh2YWx1ZSkge1xuICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcblxuICAgIGNvbnN0IGJ5dGVzID0gZW5jb2Rlci5lbmNvZGUodmFsdWUpO1xuXG4gICAgdGhpcy5ieXRlcyhieXRlcyk7XG4gIH1cblxuICBpbnQodmFsdWUpIHtcbiAgICB0aGlzLmludDMyKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFRPRE86IENvbnZlcnQgbWV0aG9kIG5hbWUgdG8gJ2Jvb2wnXG4gIEJvb2wodmFsdWUpIHtcbiAgICB0aGlzLnByZWRpY2F0ZSh7IF86IHZhbHVlID8gJ2Jvb2xUcnVlJyA6ICdib29sRmFsc2UnIH0pO1xuICB9XG5cbiAgaGFzKHZhbHVlKSB7XG4gICAgcmV0dXJuICshIShBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmxlbmd0aCA6IHZhbHVlKTtcbiAgfVxuXG4gIGZsYWcoZm4sIHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuaGFzKHZhbHVlKSkge1xuICAgICAgZm4uY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgZmxhZ1ZlY3RvcihmbiwgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnZlY3RvcihmbiwgdmFsdWUpO1xuICB9XG5cbiAgdmVjdG9yKGZuLCB2YWx1ZSkge1xuICAgIHRoaXMuaW50MzIoMHgxY2I1YzQxNSk7XG4gICAgdGhpcy5pbnQzMih2YWx1ZS5sZW5ndGgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgZm4uY2FsbCh0aGlzLCB2YWx1ZVtpXSk7XG4gICAgfVxuICB9XG5cbiAgcHJlZGljYXRlKHBhcmFtcywgYmFyZSA9IGZhbHNlKSB7XG4gICAgY29uc3QgZm4gPSBidWlsZGVyTWFwW3BhcmFtcy5fXTtcblxuICAgIGZuLmNhbGwodGhpcywgcGFyYW1zKTtcbiAgfVxuXG4gIGdldEJ5dGVzKCkge1xuICAgIGNvbnN0IHJlc3VsdEJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcih0aGlzLm9mZnNldCk7XG4gICAgY29uc3QgcmVzdWx0QXJyYXkgPSBuZXcgVWludDhBcnJheShyZXN1bHRCdWZmZXIpO1xuXG4gICAgcmVzdWx0QXJyYXkuc2V0KHRoaXMuYnl0ZVZpZXcuc3ViYXJyYXkoMCwgdGhpcy5vZmZzZXQpKTtcblxuICAgIHJldHVybiByZXN1bHRBcnJheTtcbiAgfVxuXG4gIGdldEJ1ZmZlcigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRCeXRlcygpLmJ1ZmZlcjtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTZXJpYWxpemVyO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@mtproto/core/src/tl/serializer/index.js\n");

/***/ }),

/***/ "./node_modules/@mtproto/core/src/transport/index.browser.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@mtproto/core/src/transport/index.browser.js ***!
  \*******************************************************************/
/*! exports provided: Transport */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Transport\", function() { return Transport; });\n/* harmony import */ var _socket_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./socket/index.js */ \"./node_modules/@mtproto/core/src/transport/socket/index.js\");\n\n\nconst Transport = _socket_index_js__WEBPACK_IMPORTED_MODULE_0__[\"Socket\"];\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvdHJhbnNwb3J0L2luZGV4LmJyb3dzZXIuanM/YWZhZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBMkM7O0FBRTNDLGtCQUFrQix1REFBTTs7QUFFSCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AbXRwcm90by9jb3JlL3NyYy90cmFuc3BvcnQvaW5kZXguYnJvd3Nlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNvY2tldCB9IGZyb20gJy4vc29ja2V0L2luZGV4LmpzJztcblxuY29uc3QgVHJhbnNwb3J0ID0gU29ja2V0O1xuXG5leHBvcnQgeyBUcmFuc3BvcnQgfTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mtproto/core/src/transport/index.browser.js\n");

/***/ }),

/***/ "./node_modules/@mtproto/core/src/transport/obfuscated/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@mtproto/core/src/transport/obfuscated/index.js ***!
  \**********************************************************************/
/*! exports provided: Obfuscated */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Obfuscated\", function() { return Obfuscated; });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/crypto/index.js */ \"./node_modules/@mtproto/core/src/utils/crypto/index.js\");\n/* harmony import */ var _utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/common/index.js */ \"./node_modules/@mtproto/core/src/utils/common/index.js\");\n\n\n\n\nclass Obfuscated extends events__WEBPACK_IMPORTED_MODULE_0___default.a {\n  // https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation\n  async generateObfuscationKeys() {\n    let initBytes = null;\n\n    while (true) {\n      initBytes = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"getRandomBytes\"])(64);\n      const initDataView = new DataView(initBytes.buffer);\n      initDataView.setUint32(56, 0xeeeeeeee, true);\n\n      if (initBytes[0] === 0xef) {\n        continue;\n      }\n\n      const firstInt = initDataView.getUint32(0, true);\n\n      if (\n        [\n          0x44414548,\n          0x54534f50,\n          0x20544547,\n          0x4954504f,\n          0xdddddddd,\n          0xeeeeeeee,\n          0x02010316,\n        ].includes(firstInt)\n      ) {\n        continue;\n      }\n\n      const secondInt = initDataView.getUint32(4, true);\n\n      if (secondInt === 0) {\n        continue;\n      }\n\n      break;\n    }\n\n    const initRevBytes = new Uint8Array(initBytes).reverse();\n\n    const encryptKey = initBytes.slice(8, 40);\n    const encryptIV = initBytes.slice(40, 56);\n\n    const decryptKey = initRevBytes.slice(8, 40);\n    const decryptIV = initRevBytes.slice(40, 56);\n\n    this.encryptAES = new _utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__[\"AES\"].CTR(encryptKey, encryptIV);\n    this.decryptAES = new _utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__[\"AES\"].CTR(decryptKey, decryptIV);\n\n    const encryptedInitBytes = await this.obfuscate(initBytes);\n    initBytes.set(encryptedInitBytes.slice(56, 64), 56);\n\n    return initBytes;\n  }\n\n  async obfuscate(bytes) {\n    return this.encryptAES.encrypt(bytes);\n  }\n\n  async deobfuscate(bytes) {\n    return this.decryptAES.decrypt(bytes);\n  }\n\n  getIntermediatePayload(bytes) {\n    const dataView = new DataView(bytes.buffer);\n\n    const payloadLength = dataView.getUint32(0, true);\n\n    if (payloadLength === 4) {\n      const code = dataView.getInt32(4, true) * -1;\n\n      this.emit('error', {\n        type: 'transport',\n        code,\n      });\n    }\n\n    return bytes.slice(4);\n  }\n\n  getIntermediateBytes(bytes) {\n    const resultBytes = new Uint8Array(bytes.length + 4);\n\n    const dataView = new DataView(resultBytes.buffer);\n    dataView.setUint32(0, bytes.length, true);\n\n    resultBytes.set(bytes, 4);\n\n    return resultBytes;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvdHJhbnNwb3J0L29iZnVzY2F0ZWQvaW5kZXguanM/ZmRkMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBa0M7QUFDZ0I7QUFDVzs7QUFFN0QseUJBQXlCLDZDQUFZO0FBQ3JDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQiw2RUFBYztBQUNoQztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsMEJBQTBCLDBEQUFHO0FBQzdCLDBCQUEwQiwwREFBRzs7QUFFN0I7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBSUUiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvdHJhbnNwb3J0L29iZnVzY2F0ZWQvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgeyBBRVMgfSBmcm9tICcuLi8uLi91dGlscy9jcnlwdG8vaW5kZXguanMnO1xuaW1wb3J0IHsgZ2V0UmFuZG9tQnl0ZXMgfSBmcm9tICcuLi8uLi91dGlscy9jb21tb24vaW5kZXguanMnO1xuXG5jbGFzcyBPYmZ1c2NhdGVkIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgLy8gaHR0cHM6Ly9jb3JlLnRlbGVncmFtLm9yZy9tdHByb3RvL210cHJvdG8tdHJhbnNwb3J0cyN0cmFuc3BvcnQtb2JmdXNjYXRpb25cbiAgYXN5bmMgZ2VuZXJhdGVPYmZ1c2NhdGlvbktleXMoKSB7XG4gICAgbGV0IGluaXRCeXRlcyA9IG51bGw7XG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgaW5pdEJ5dGVzID0gZ2V0UmFuZG9tQnl0ZXMoNjQpO1xuICAgICAgY29uc3QgaW5pdERhdGFWaWV3ID0gbmV3IERhdGFWaWV3KGluaXRCeXRlcy5idWZmZXIpO1xuICAgICAgaW5pdERhdGFWaWV3LnNldFVpbnQzMig1NiwgMHhlZWVlZWVlZSwgdHJ1ZSk7XG5cbiAgICAgIGlmIChpbml0Qnl0ZXNbMF0gPT09IDB4ZWYpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGZpcnN0SW50ID0gaW5pdERhdGFWaWV3LmdldFVpbnQzMigwLCB0cnVlKTtcblxuICAgICAgaWYgKFxuICAgICAgICBbXG4gICAgICAgICAgMHg0NDQxNDU0OCxcbiAgICAgICAgICAweDU0NTM0ZjUwLFxuICAgICAgICAgIDB4MjA1NDQ1NDcsXG4gICAgICAgICAgMHg0OTU0NTA0ZixcbiAgICAgICAgICAweGRkZGRkZGRkLFxuICAgICAgICAgIDB4ZWVlZWVlZWUsXG4gICAgICAgICAgMHgwMjAxMDMxNixcbiAgICAgICAgXS5pbmNsdWRlcyhmaXJzdEludClcbiAgICAgICkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc2Vjb25kSW50ID0gaW5pdERhdGFWaWV3LmdldFVpbnQzMig0LCB0cnVlKTtcblxuICAgICAgaWYgKHNlY29uZEludCA9PT0gMCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY29uc3QgaW5pdFJldkJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoaW5pdEJ5dGVzKS5yZXZlcnNlKCk7XG5cbiAgICBjb25zdCBlbmNyeXB0S2V5ID0gaW5pdEJ5dGVzLnNsaWNlKDgsIDQwKTtcbiAgICBjb25zdCBlbmNyeXB0SVYgPSBpbml0Qnl0ZXMuc2xpY2UoNDAsIDU2KTtcblxuICAgIGNvbnN0IGRlY3J5cHRLZXkgPSBpbml0UmV2Qnl0ZXMuc2xpY2UoOCwgNDApO1xuICAgIGNvbnN0IGRlY3J5cHRJViA9IGluaXRSZXZCeXRlcy5zbGljZSg0MCwgNTYpO1xuXG4gICAgdGhpcy5lbmNyeXB0QUVTID0gbmV3IEFFUy5DVFIoZW5jcnlwdEtleSwgZW5jcnlwdElWKTtcbiAgICB0aGlzLmRlY3J5cHRBRVMgPSBuZXcgQUVTLkNUUihkZWNyeXB0S2V5LCBkZWNyeXB0SVYpO1xuXG4gICAgY29uc3QgZW5jcnlwdGVkSW5pdEJ5dGVzID0gYXdhaXQgdGhpcy5vYmZ1c2NhdGUoaW5pdEJ5dGVzKTtcbiAgICBpbml0Qnl0ZXMuc2V0KGVuY3J5cHRlZEluaXRCeXRlcy5zbGljZSg1NiwgNjQpLCA1Nik7XG5cbiAgICByZXR1cm4gaW5pdEJ5dGVzO1xuICB9XG5cbiAgYXN5bmMgb2JmdXNjYXRlKGJ5dGVzKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5jcnlwdEFFUy5lbmNyeXB0KGJ5dGVzKTtcbiAgfVxuXG4gIGFzeW5jIGRlb2JmdXNjYXRlKGJ5dGVzKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVjcnlwdEFFUy5kZWNyeXB0KGJ5dGVzKTtcbiAgfVxuXG4gIGdldEludGVybWVkaWF0ZVBheWxvYWQoYnl0ZXMpIHtcbiAgICBjb25zdCBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhieXRlcy5idWZmZXIpO1xuXG4gICAgY29uc3QgcGF5bG9hZExlbmd0aCA9IGRhdGFWaWV3LmdldFVpbnQzMigwLCB0cnVlKTtcblxuICAgIGlmIChwYXlsb2FkTGVuZ3RoID09PSA0KSB7XG4gICAgICBjb25zdCBjb2RlID0gZGF0YVZpZXcuZ2V0SW50MzIoNCwgdHJ1ZSkgKiAtMTtcblxuICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIHtcbiAgICAgICAgdHlwZTogJ3RyYW5zcG9ydCcsXG4gICAgICAgIGNvZGUsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnl0ZXMuc2xpY2UoNCk7XG4gIH1cblxuICBnZXRJbnRlcm1lZGlhdGVCeXRlcyhieXRlcykge1xuICAgIGNvbnN0IHJlc3VsdEJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYnl0ZXMubGVuZ3RoICsgNCk7XG5cbiAgICBjb25zdCBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhyZXN1bHRCeXRlcy5idWZmZXIpO1xuICAgIGRhdGFWaWV3LnNldFVpbnQzMigwLCBieXRlcy5sZW5ndGgsIHRydWUpO1xuXG4gICAgcmVzdWx0Qnl0ZXMuc2V0KGJ5dGVzLCA0KTtcblxuICAgIHJldHVybiByZXN1bHRCeXRlcztcbiAgfVxufVxuXG5leHBvcnQge1xuICBPYmZ1c2NhdGVkLFxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mtproto/core/src/transport/obfuscated/index.js\n");

/***/ }),

/***/ "./node_modules/@mtproto/core/src/transport/socket/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@mtproto/core/src/transport/socket/index.js ***!
  \******************************************************************/
/*! exports provided: Socket */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Socket\", function() { return Socket; });\n/* harmony import */ var _obfuscated_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../obfuscated/index.js */ \"./node_modules/@mtproto/core/src/transport/obfuscated/index.js\");\n\n\nconst subdomainsMap = {\n  1: 'pluto',\n  2: 'venus',\n  3: 'aurora',\n  4: 'vesta',\n  5: 'flora',\n};\n\nclass Socket extends _obfuscated_index_js__WEBPACK_IMPORTED_MODULE_0__[\"Obfuscated\"] {\n  constructor(dc) {\n    super();\n\n    this.dc = dc;\n    this.url = `wss://${subdomainsMap[this.dc.id]}.web.telegram.org${\n      this.dc.test ? '/apiws_test' : '/apiws'\n    }`;\n\n    this.connect();\n  }\n\n  connect() {\n    this.socket = new WebSocket(this.url, 'binary');\n    this.socket.binaryType = 'arraybuffer';\n\n    this.socket.addEventListener('error', this.handleError.bind(this));\n    this.socket.addEventListener('open', this.handleOpen.bind(this));\n    this.socket.addEventListener('close', this.handleClose.bind(this));\n    this.socket.addEventListener('message', this.handleMessage.bind(this));\n  }\n\n  async handleError(event) {\n    this.emit('error', {\n      type: 'socket',\n    });\n  }\n\n  async handleOpen(event) {\n    const initialMessage = await this.generateObfuscationKeys();\n    this.socket.send(initialMessage);\n\n    this.emit('open', event);\n  }\n\n  async handleClose(event) {\n    if (this.socket.readyState === 1) {\n      this.socket.close();\n    }\n\n    this.emit('close', event);\n\n    this.connect();\n  }\n\n  async handleMessage(event) {\n    const obfuscatedBytes = new Uint8Array(event.data);\n    const bytes = await this.deobfuscate(obfuscatedBytes);\n\n    const payload = this.getIntermediatePayload(bytes);\n\n    this.emit('message', payload.buffer);\n  }\n\n  async send(bytes) {\n    const intermediateBytes = this.getIntermediateBytes(bytes);\n\n    const { buffer } = await this.obfuscate(intermediateBytes);\n\n    this.socket.send(buffer);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvdHJhbnNwb3J0L3NvY2tldC9pbmRleC5qcz8yYTJiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFvRDs7QUFFcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLCtEQUFVO0FBQy9CO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0IsMEJBQTBCO0FBQ2xEO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsV0FBVyxTQUFTOztBQUVwQjtBQUNBO0FBQ0E7O0FBRWtCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BtdHByb3RvL2NvcmUvc3JjL3RyYW5zcG9ydC9zb2NrZXQvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYmZ1c2NhdGVkIH0gZnJvbSAnLi4vb2JmdXNjYXRlZC9pbmRleC5qcyc7XG5cbmNvbnN0IHN1YmRvbWFpbnNNYXAgPSB7XG4gIDE6ICdwbHV0bycsXG4gIDI6ICd2ZW51cycsXG4gIDM6ICdhdXJvcmEnLFxuICA0OiAndmVzdGEnLFxuICA1OiAnZmxvcmEnLFxufTtcblxuY2xhc3MgU29ja2V0IGV4dGVuZHMgT2JmdXNjYXRlZCB7XG4gIGNvbnN0cnVjdG9yKGRjKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuZGMgPSBkYztcbiAgICB0aGlzLnVybCA9IGB3c3M6Ly8ke3N1YmRvbWFpbnNNYXBbdGhpcy5kYy5pZF19LndlYi50ZWxlZ3JhbS5vcmcke1xuICAgICAgdGhpcy5kYy50ZXN0ID8gJy9hcGl3c190ZXN0JyA6ICcvYXBpd3MnXG4gICAgfWA7XG5cbiAgICB0aGlzLmNvbm5lY3QoKTtcbiAgfVxuXG4gIGNvbm5lY3QoKSB7XG4gICAgdGhpcy5zb2NrZXQgPSBuZXcgV2ViU29ja2V0KHRoaXMudXJsLCAnYmluYXJ5Jyk7XG4gICAgdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSA9ICdhcnJheWJ1ZmZlcic7XG5cbiAgICB0aGlzLnNvY2tldC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIHRoaXMuaGFuZGxlRXJyb3IuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5zb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignb3BlbicsIHRoaXMuaGFuZGxlT3Blbi5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnNvY2tldC5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsIHRoaXMuaGFuZGxlQ2xvc2UuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5zb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMuaGFuZGxlTWVzc2FnZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIGFzeW5jIGhhbmRsZUVycm9yKGV2ZW50KSB7XG4gICAgdGhpcy5lbWl0KCdlcnJvcicsIHtcbiAgICAgIHR5cGU6ICdzb2NrZXQnLFxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgaGFuZGxlT3BlbihldmVudCkge1xuICAgIGNvbnN0IGluaXRpYWxNZXNzYWdlID0gYXdhaXQgdGhpcy5nZW5lcmF0ZU9iZnVzY2F0aW9uS2V5cygpO1xuICAgIHRoaXMuc29ja2V0LnNlbmQoaW5pdGlhbE1lc3NhZ2UpO1xuXG4gICAgdGhpcy5lbWl0KCdvcGVuJywgZXZlbnQpO1xuICB9XG5cbiAgYXN5bmMgaGFuZGxlQ2xvc2UoZXZlbnQpIHtcbiAgICBpZiAodGhpcy5zb2NrZXQucmVhZHlTdGF0ZSA9PT0gMSkge1xuICAgICAgdGhpcy5zb2NrZXQuY2xvc2UoKTtcbiAgICB9XG5cbiAgICB0aGlzLmVtaXQoJ2Nsb3NlJywgZXZlbnQpO1xuXG4gICAgdGhpcy5jb25uZWN0KCk7XG4gIH1cblxuICBhc3luYyBoYW5kbGVNZXNzYWdlKGV2ZW50KSB7XG4gICAgY29uc3Qgb2JmdXNjYXRlZEJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoZXZlbnQuZGF0YSk7XG4gICAgY29uc3QgYnl0ZXMgPSBhd2FpdCB0aGlzLmRlb2JmdXNjYXRlKG9iZnVzY2F0ZWRCeXRlcyk7XG5cbiAgICBjb25zdCBwYXlsb2FkID0gdGhpcy5nZXRJbnRlcm1lZGlhdGVQYXlsb2FkKGJ5dGVzKTtcblxuICAgIHRoaXMuZW1pdCgnbWVzc2FnZScsIHBheWxvYWQuYnVmZmVyKTtcbiAgfVxuXG4gIGFzeW5jIHNlbmQoYnl0ZXMpIHtcbiAgICBjb25zdCBpbnRlcm1lZGlhdGVCeXRlcyA9IHRoaXMuZ2V0SW50ZXJtZWRpYXRlQnl0ZXMoYnl0ZXMpO1xuXG4gICAgY29uc3QgeyBidWZmZXIgfSA9IGF3YWl0IHRoaXMub2JmdXNjYXRlKGludGVybWVkaWF0ZUJ5dGVzKTtcblxuICAgIHRoaXMuc29ja2V0LnNlbmQoYnVmZmVyKTtcbiAgfVxufVxuXG5leHBvcnQgeyBTb2NrZXQgfTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mtproto/core/src/transport/socket/index.js\n");

/***/ }),

/***/ "./node_modules/@mtproto/core/src/utils/common/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@mtproto/core/src/utils/common/index.js ***!
  \**************************************************************/
/*! exports provided: getRandomBytes, bytesIsEqual, bigIntToBytes, hexToBytesRaw, hexToBytes, bytesToBigInt, xorBytes, concatBytes, bytesToHex, bytesToBytesRaw, longToBytesRaw, intsToLong, intToUint, uintToInt, getRandomInt */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bytesIsEqual\", function() { return bytesIsEqual; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bigIntToBytes\", function() { return bigIntToBytes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hexToBytesRaw\", function() { return hexToBytesRaw; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hexToBytes\", function() { return hexToBytes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bytesToBigInt\", function() { return bytesToBigInt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"xorBytes\", function() { return xorBytes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"concatBytes\", function() { return concatBytes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bytesToHex\", function() { return bytesToHex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bytesToBytesRaw\", function() { return bytesToBytesRaw; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"longToBytesRaw\", function() { return longToBytesRaw; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"intsToLong\", function() { return intsToLong; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"intToUint\", function() { return intToUint; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"uintToInt\", function() { return uintToInt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getRandomInt\", function() { return getRandomInt; });\n/* harmony import */ var big_integer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! big-integer */ \"./node_modules/big-integer/BigInteger.js\");\n/* harmony import */ var big_integer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(big_integer__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _random_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./random/index.js */ \"./node_modules/@mtproto/core/src/utils/common/random/index.browser.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"getRandomBytes\", function() { return _random_index_js__WEBPACK_IMPORTED_MODULE_1__[\"getRandomBytes\"]; });\n\n\n\n\nfunction bytesIsEqual(bytes1, bytes2) {\n  if (bytes1.length !== bytes2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < bytes1.length; i++) {\n    if (bytes1[i] !== bytes2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction bigIntToBytes(bigInt, length) {\n  return hexToBytes(bigInt.toString(16), length);\n}\n\nfunction hexToBytesRaw(value, length) {\n  if (!length) {\n    length = Math.ceil(value.length / 2);\n  }\n\n  while (value.length < length * 2) {\n    value = '0' + value;\n  }\n\n  const bytes = [];\n  for (let i = 0; i < length; i++) {\n    bytes.push(parseInt(value.slice(i * 2, i * 2 + 2), 16));\n  }\n  return bytes;\n}\n\nfunction hexToBytes(value, length) {\n  return new Uint8Array(hexToBytesRaw(value, length));\n}\n\nfunction bytesToBigInt(bytes) {\n  return big_integer__WEBPACK_IMPORTED_MODULE_0___default()(bytesToHex(bytes), 16);\n}\n\nfunction xorBytes(bytes1, bytes2) {\n  let bytes = new Uint8Array(bytes1.length);\n  for (let i = 0; i < bytes1.length; i++) {\n    bytes[i] = bytes1[i] ^ bytes2[i];\n  }\n  return bytes;\n}\n\nfunction concatBytes(...arrays) {\n  let length = 0;\n\n  for (let bytes of arrays) {\n    length += bytes.length;\n  }\n\n  let result = new Uint8Array(length);\n  let offset = 0;\n\n  for (let bytes of arrays) {\n    result.set(bytes, offset);\n    offset += bytes.length;\n  }\n\n  return result;\n}\n\nfunction bytesToHex(bytes) {\n  const result = [];\n  for (let i = 0; i < bytes.length; i++) {\n    result.push((bytes[i] < 16 ? '0' : '') + bytes[i].toString(16));\n  }\n  return result.join('');\n}\n\nfunction bytesToBytesRaw(bytes) {\n  const result = [];\n\n  for (let i = 0; i < bytes.length; i++) {\n    result.push(bytes[i]);\n  }\n\n  return result;\n}\n\nfunction longToBytesRaw(value) {\n  const result = hexToBytesRaw(big_integer__WEBPACK_IMPORTED_MODULE_0___default()(value).toString(16), 8).reverse();\n\n  return result;\n}\n\nfunction intsToLong(low, high) {\n  return big_integer__WEBPACK_IMPORTED_MODULE_0___default()(low).shiftLeft(32).add(big_integer__WEBPACK_IMPORTED_MODULE_0___default()(high)).toString(10);\n}\n\nfunction intToUint(value) {\n  value = +value;\n\n  return value < 0 ? value + 4294967296 : value;\n}\n\nfunction uintToInt(val) {\n  if (val > 2147483647) {\n    val = val - 4294967296;\n  }\n  return val;\n}\n\nfunction getRandomInt(maxValue) {\n  return Math.floor(Math.random() * maxValue);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvdXRpbHMvY29tbW9uL2luZGV4LmpzPzMxZjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFpQztBQUNrQjs7QUFFbkQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLG1CQUFtQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTLGtEQUFNO0FBQ2Y7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixtQkFBbUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCLGtCQUFrQjtBQUNuQztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSwrQkFBK0Isa0RBQU07O0FBRXJDO0FBQ0E7O0FBRUE7QUFDQSxTQUFTLGtEQUFNLHdCQUF3QixrREFBTTtBQUM3Qzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFrQkUiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvdXRpbHMvY29tbW9uL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGJpZ0ludCBmcm9tICdiaWctaW50ZWdlcic7XG5pbXBvcnQgeyBnZXRSYW5kb21CeXRlcyB9IGZyb20gJy4vcmFuZG9tL2luZGV4LmpzJztcblxuZnVuY3Rpb24gYnl0ZXNJc0VxdWFsKGJ5dGVzMSwgYnl0ZXMyKSB7XG4gIGlmIChieXRlczEubGVuZ3RoICE9PSBieXRlczIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlczEubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYnl0ZXMxW2ldICE9PSBieXRlczJbaV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gYmlnSW50VG9CeXRlcyhiaWdJbnQsIGxlbmd0aCkge1xuICByZXR1cm4gaGV4VG9CeXRlcyhiaWdJbnQudG9TdHJpbmcoMTYpLCBsZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBoZXhUb0J5dGVzUmF3KHZhbHVlLCBsZW5ndGgpIHtcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSBNYXRoLmNlaWwodmFsdWUubGVuZ3RoIC8gMik7XG4gIH1cblxuICB3aGlsZSAodmFsdWUubGVuZ3RoIDwgbGVuZ3RoICogMikge1xuICAgIHZhbHVlID0gJzAnICsgdmFsdWU7XG4gIH1cblxuICBjb25zdCBieXRlcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgYnl0ZXMucHVzaChwYXJzZUludCh2YWx1ZS5zbGljZShpICogMiwgaSAqIDIgKyAyKSwgMTYpKTtcbiAgfVxuICByZXR1cm4gYnl0ZXM7XG59XG5cbmZ1bmN0aW9uIGhleFRvQnl0ZXModmFsdWUsIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoaGV4VG9CeXRlc1Jhdyh2YWx1ZSwgbGVuZ3RoKSk7XG59XG5cbmZ1bmN0aW9uIGJ5dGVzVG9CaWdJbnQoYnl0ZXMpIHtcbiAgcmV0dXJuIGJpZ0ludChieXRlc1RvSGV4KGJ5dGVzKSwgMTYpO1xufVxuXG5mdW5jdGlvbiB4b3JCeXRlcyhieXRlczEsIGJ5dGVzMikge1xuICBsZXQgYnl0ZXMgPSBuZXcgVWludDhBcnJheShieXRlczEubGVuZ3RoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlczEubGVuZ3RoOyBpKyspIHtcbiAgICBieXRlc1tpXSA9IGJ5dGVzMVtpXSBeIGJ5dGVzMltpXTtcbiAgfVxuICByZXR1cm4gYnl0ZXM7XG59XG5cbmZ1bmN0aW9uIGNvbmNhdEJ5dGVzKC4uLmFycmF5cykge1xuICBsZXQgbGVuZ3RoID0gMDtcblxuICBmb3IgKGxldCBieXRlcyBvZiBhcnJheXMpIHtcbiAgICBsZW5ndGggKz0gYnl0ZXMubGVuZ3RoO1xuICB9XG5cbiAgbGV0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gIGxldCBvZmZzZXQgPSAwO1xuXG4gIGZvciAobGV0IGJ5dGVzIG9mIGFycmF5cykge1xuICAgIHJlc3VsdC5zZXQoYnl0ZXMsIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IGJ5dGVzLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGJ5dGVzVG9IZXgoYnl0ZXMpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHQucHVzaCgoYnl0ZXNbaV0gPCAxNiA/ICcwJyA6ICcnKSArIGJ5dGVzW2ldLnRvU3RyaW5nKDE2KSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdC5qb2luKCcnKTtcbn1cblxuZnVuY3Rpb24gYnl0ZXNUb0J5dGVzUmF3KGJ5dGVzKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHQucHVzaChieXRlc1tpXSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBsb25nVG9CeXRlc1Jhdyh2YWx1ZSkge1xuICBjb25zdCByZXN1bHQgPSBoZXhUb0J5dGVzUmF3KGJpZ0ludCh2YWx1ZSkudG9TdHJpbmcoMTYpLCA4KS5yZXZlcnNlKCk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gaW50c1RvTG9uZyhsb3csIGhpZ2gpIHtcbiAgcmV0dXJuIGJpZ0ludChsb3cpLnNoaWZ0TGVmdCgzMikuYWRkKGJpZ0ludChoaWdoKSkudG9TdHJpbmcoMTApO1xufVxuXG5mdW5jdGlvbiBpbnRUb1VpbnQodmFsdWUpIHtcbiAgdmFsdWUgPSArdmFsdWU7XG5cbiAgcmV0dXJuIHZhbHVlIDwgMCA/IHZhbHVlICsgNDI5NDk2NzI5NiA6IHZhbHVlO1xufVxuXG5mdW5jdGlvbiB1aW50VG9JbnQodmFsKSB7XG4gIGlmICh2YWwgPiAyMTQ3NDgzNjQ3KSB7XG4gICAgdmFsID0gdmFsIC0gNDI5NDk2NzI5NjtcbiAgfVxuICByZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBnZXRSYW5kb21JbnQobWF4VmFsdWUpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG1heFZhbHVlKTtcbn1cblxuZXhwb3J0IHtcbiAgZ2V0UmFuZG9tQnl0ZXMsXG4gIGJ5dGVzSXNFcXVhbCxcbiAgYmlnSW50VG9CeXRlcyxcbiAgaGV4VG9CeXRlc1JhdyxcbiAgaGV4VG9CeXRlcyxcbiAgYnl0ZXNUb0JpZ0ludCxcbiAgeG9yQnl0ZXMsXG4gIGNvbmNhdEJ5dGVzLFxuICBieXRlc1RvSGV4LFxuICBieXRlc1RvQnl0ZXNSYXcsXG4gIGxvbmdUb0J5dGVzUmF3LFxuICBpbnRzVG9Mb25nLFxuICBpbnRUb1VpbnQsXG4gIHVpbnRUb0ludCxcbiAgZ2V0UmFuZG9tSW50LFxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mtproto/core/src/utils/common/index.js\n");

/***/ }),

/***/ "./node_modules/@mtproto/core/src/utils/common/logger/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@mtproto/core/src/utils/common/logger/index.js ***!
  \*********************************************************************/
/*! exports provided: createLogger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createLogger\", function() { return createLogger; });\n// https://github.com/visionmedia/debug\n\nfunction createLogger(namespace) {\n  const logger = {};\n\n  if (typeof process !== 'undefined' && process.env.DEBUG) {\n    logger.log = data => {\n      console.log(\n        JSON.stringify({\n          namespace,\n          ...data,\n        })\n      );\n    };\n\n    logger.bytes = data => {\n      data.bytes = Array.from(data.bytes);\n\n      logger.log(data);\n    };\n  } else {\n    logger.bytes = logger.log = () => {};\n  }\n\n  return logger;\n}\n\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvdXRpbHMvY29tbW9uL2xvZ2dlci9pbmRleC5qcz8zOWYzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRXdCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BtdHByb3RvL2NvcmUvc3JjL3V0aWxzL2NvbW1vbi9sb2dnZXIvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vdmlzaW9ubWVkaWEvZGVidWdcblxuZnVuY3Rpb24gY3JlYXRlTG9nZ2VyKG5hbWVzcGFjZSkge1xuICBjb25zdCBsb2dnZXIgPSB7fTtcblxuICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW52LkRFQlVHKSB7XG4gICAgbG9nZ2VyLmxvZyA9IGRhdGEgPT4ge1xuICAgICAgY29uc29sZS5sb2coXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfTtcblxuICAgIGxvZ2dlci5ieXRlcyA9IGRhdGEgPT4ge1xuICAgICAgZGF0YS5ieXRlcyA9IEFycmF5LmZyb20oZGF0YS5ieXRlcyk7XG5cbiAgICAgIGxvZ2dlci5sb2coZGF0YSk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBsb2dnZXIuYnl0ZXMgPSBsb2dnZXIubG9nID0gKCkgPT4ge307XG4gIH1cblxuICByZXR1cm4gbG9nZ2VyO1xufVxuXG5leHBvcnQgeyBjcmVhdGVMb2dnZXIgfTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mtproto/core/src/utils/common/logger/index.js\n");

/***/ }),

/***/ "./node_modules/@mtproto/core/src/utils/common/random/index.browser.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@mtproto/core/src/utils/common/random/index.browser.js ***!
  \*****************************************************************************/
/*! exports provided: getRandomBytes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getRandomBytes\", function() { return getRandomBytes; });\nfunction getRandomBytes(length) {\n  const bytes = new Uint8Array(length);\n  crypto.getRandomValues(bytes);\n  return bytes;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvdXRpbHMvY29tbW9uL3JhbmRvbS9pbmRleC5icm93c2VyLmpzPzU3NzkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTBCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BtdHByb3RvL2NvcmUvc3JjL3V0aWxzL2NvbW1vbi9yYW5kb20vaW5kZXguYnJvd3Nlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGdldFJhbmRvbUJ5dGVzKGxlbmd0aCkge1xuICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYnl0ZXMpO1xuICByZXR1cm4gYnl0ZXM7XG59XG5cbmV4cG9ydCB7IGdldFJhbmRvbUJ5dGVzIH07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mtproto/core/src/utils/common/random/index.browser.js\n");

/***/ }),

/***/ "./node_modules/@mtproto/core/src/utils/crypto/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@mtproto/core/src/utils/crypto/index.js ***!
  \**************************************************************/
/*! exports provided: AES, RSA, SHA1, SHA256, getSRPParams */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AES\", function() { return AES; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RSA\", function() { return RSA; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSRPParams\", function() { return getSRPParams; });\n/* harmony import */ var aes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aes-js */ \"./node_modules/aes-js/index.js\");\n/* harmony import */ var aes_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(aes_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var big_integer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! big-integer */ \"./node_modules/big-integer/BigInteger.js\");\n/* harmony import */ var big_integer__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(big_integer__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/common/index.js */ \"./node_modules/@mtproto/core/src/utils/common/index.js\");\n/* harmony import */ var _sha1_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sha1/index.js */ \"./node_modules/@mtproto/core/src/utils/crypto/sha1/index.browser.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"SHA1\", function() { return _sha1_index_js__WEBPACK_IMPORTED_MODULE_3__[\"SHA1\"]; });\n\n/* harmony import */ var _sha256_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sha256/index.js */ \"./node_modules/@mtproto/core/src/utils/crypto/sha256/index.browser.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"SHA256\", function() { return _sha256_index_js__WEBPACK_IMPORTED_MODULE_4__[\"SHA256\"]; });\n\n/* harmony import */ var _pbkdf2_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pbkdf2/index.js */ \"./node_modules/@mtproto/core/src/utils/crypto/pbkdf2/index.browser.js\");\n\n\n\n\n\n\n\nconst AES = aes_js__WEBPACK_IMPORTED_MODULE_0___default.a.AES;\nAES.Counter = aes_js__WEBPACK_IMPORTED_MODULE_0___default.a.Counter;\nAES.CTR = aes_js__WEBPACK_IMPORTED_MODULE_0___default.a.ModeOfOperation.ctr;\n\nconst createArray = aes_js__WEBPACK_IMPORTED_MODULE_0___default.a._arrayTest.createArray;\nconst copyArray = aes_js__WEBPACK_IMPORTED_MODULE_0___default.a._arrayTest.copyArray;\n\nclass ModeOfOperationIGE {\n  constructor(key, iv) {\n    this.description = 'Infinite Garble Extension';\n    this.name = 'ige';\n\n    this._aes = new AES(key);\n    this._iv = iv;\n    this._ivp = null;\n  }\n\n  encrypt(plaintext) {\n    if (plaintext.length % 16 !== 0) {\n      throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n    }\n\n    const ciphertext = createArray(plaintext.length);\n    let block = createArray(16);\n\n    if (this._ivp === null) {\n      this._ivp = this._iv.slice(0, 16);\n      this._iv2p = this._iv.slice(16, 32);\n    }\n\n    for (let i = 0; i < plaintext.length; i += 16) {\n      const nextIv2p = plaintext.slice(i, i + 16);\n\n      copyArray(plaintext, block, 0, i, i + 16);\n      block = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"xorBytes\"])(block, this._ivp);\n      block = this._aes.encrypt(block);\n      block = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"xorBytes\"])(block, this._iv2p);\n      copyArray(block, ciphertext, i);\n\n      this._ivp = ciphertext.slice(i, i + 16);\n      this._iv2p = nextIv2p;\n    }\n\n    return ciphertext;\n  }\n\n  decrypt(ciphertext) {\n    if (ciphertext.length % 16 !== 0) {\n      throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n    }\n\n    const plaintext = createArray(ciphertext.length);\n    let block = createArray(16);\n\n    if (this._ivp === null) {\n      this._ivp = this._iv.slice(0, 16);\n      this._iv2p = this._iv.slice(16, 32);\n    }\n\n    for (let i = 0; i < ciphertext.length; i += 16) {\n      const nextIvp = ciphertext.slice(i, i + 16);\n\n      copyArray(ciphertext, block, 0, i, i + 16);\n      block = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"xorBytes\"])(block, this._iv2p);\n      block = this._aes.decrypt(block);\n      block = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"xorBytes\"])(block, this._ivp);\n      copyArray(block, plaintext, i);\n\n      this._ivp = nextIvp;\n      this._iv2p = plaintext.slice(i, i + 16);\n    }\n    return plaintext;\n  }\n}\n\nAES.IGE = ModeOfOperationIGE;\n\nclass RSA {\n  constructor(publicKey) {\n    this.exponent = publicKey.exponent;\n    this.modulus = publicKey.modulus;\n  }\n\n  encrypt(bytes) {\n    const encryptedBigInt = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"bytesToBigInt\"])(bytes).modPow(\n      big_integer__WEBPACK_IMPORTED_MODULE_1___default()(this.exponent, 16),\n      big_integer__WEBPACK_IMPORTED_MODULE_1___default()(this.modulus, 16)\n    );\n\n    return Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"bigIntToBytes\"])(encryptedBigInt, 256);\n  }\n}\n\nasync function getSRPParams({ g, p, salt1, salt2, gB, password }) {\n  const H = _sha256_index_js__WEBPACK_IMPORTED_MODULE_4__[\"SHA256\"];\n  const SH = (data, salt) => {\n    return Object(_sha256_index_js__WEBPACK_IMPORTED_MODULE_4__[\"SHA256\"])(Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"concatBytes\"])(salt, data, salt));\n  };\n  const PH1 = async (password, salt1, salt2) => {\n    return await SH(await SH(password, salt1), salt2);\n  };\n  const PH2 = async (password, salt1, salt2) => {\n    return await SH(\n      await Object(_pbkdf2_index_js__WEBPACK_IMPORTED_MODULE_5__[\"PBKDF2\"])(await PH1(password, salt1, salt2), salt1, 100000),\n      salt2\n    );\n  };\n\n  const encoder = new TextEncoder();\n\n  const gBigInt = big_integer__WEBPACK_IMPORTED_MODULE_1___default()(g);\n  const gBytes = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"bigIntToBytes\"])(gBigInt, 256);\n  const pBigInt = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"bytesToBigInt\"])(p);\n  const aBigInt = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"bytesToBigInt\"])(Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"getRandomBytes\"])(256));\n  const gABigInt = gBigInt.modPow(aBigInt, pBigInt);\n  const gABytes = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"bigIntToBytes\"])(gABigInt);\n  const gBBytes = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"bytesToBigInt\"])(gB);\n  const [k, u, x] = await Promise.all([\n    H(Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"concatBytes\"])(p, gBytes)),\n    H(Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"concatBytes\"])(gABytes, gB)),\n    PH2(encoder.encode(password), salt1, salt2),\n  ]);\n  const kBigInt = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"bytesToBigInt\"])(k);\n  const uBigInt = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"bytesToBigInt\"])(u);\n  const xBigInt = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"bytesToBigInt\"])(x);\n  const vBigInt = gBigInt.modPow(xBigInt, pBigInt);\n  const kVBigInt = kBigInt.multiply(vBigInt).mod(pBigInt);\n  let tBigInt = gBBytes.subtract(kVBigInt).mod(pBigInt);\n  if (tBigInt.isNegative()) {\n    tBigInt = tBigInt.add(pBigInt);\n  }\n  const sABigInt = tBigInt.modPow(\n    aBigInt.add(uBigInt.multiply(xBigInt)),\n    pBigInt\n  );\n  const sABytes = Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"bigIntToBytes\"])(sABigInt);\n  const kA = await H(sABytes);\n  const M1 = await H(\n    Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"concatBytes\"])(\n      Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_2__[\"xorBytes\"])(await H(p), await H(gBytes)),\n      await H(salt1),\n      await H(salt2),\n      gABytes,\n      gB,\n      kA\n    )\n  );\n\n  return { A: gABytes, M1 };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvdXRpbHMvY3J5cHRvL2luZGV4LmpzPzgxNjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBMkI7QUFDTTtBQU9JO0FBQ0U7QUFDSTtBQUNBOztBQUUzQyxZQUFZLDZDQUFLO0FBQ2pCLGNBQWMsNkNBQUs7QUFDbkIsVUFBVSw2Q0FBSzs7QUFFZixvQkFBb0IsNkNBQUs7QUFDekIsa0JBQWtCLDZDQUFLOztBQUV2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixzQkFBc0I7QUFDekM7O0FBRUE7QUFDQSxjQUFjLHVFQUFRO0FBQ3RCO0FBQ0EsY0FBYyx1RUFBUTtBQUN0Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQix1QkFBdUI7QUFDMUM7O0FBRUE7QUFDQSxjQUFjLHVFQUFRO0FBQ3RCO0FBQ0EsY0FBYyx1RUFBUTtBQUN0Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRCQUE0Qiw0RUFBYTtBQUN6QyxNQUFNLGtEQUFNO0FBQ1osTUFBTSxrREFBTTtBQUNaOztBQUVBLFdBQVcsNEVBQWE7QUFDeEI7QUFDQTs7QUFFQSw2QkFBNkIsbUNBQW1DO0FBQ2hFLFlBQVksdURBQU07QUFDbEI7QUFDQSxXQUFXLCtEQUFNLENBQUMsMEVBQVc7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwrREFBTTtBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsa0JBQWtCLGtEQUFNO0FBQ3hCLGlCQUFpQiw0RUFBYTtBQUM5QixrQkFBa0IsNEVBQWE7QUFDL0Isa0JBQWtCLDRFQUFhLENBQUMsNkVBQWM7QUFDOUM7QUFDQSxrQkFBa0IsNEVBQWE7QUFDL0Isa0JBQWtCLDRFQUFhO0FBQy9CO0FBQ0EsTUFBTSwwRUFBVztBQUNqQixNQUFNLDBFQUFXO0FBQ2pCO0FBQ0E7QUFDQSxrQkFBa0IsNEVBQWE7QUFDL0Isa0JBQWtCLDRFQUFhO0FBQy9CLGtCQUFrQiw0RUFBYTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiw0RUFBYTtBQUMvQjtBQUNBO0FBQ0EsSUFBSSwwRUFBVztBQUNmLE1BQU0sdUVBQVE7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVO0FBQ1Y7O0FBRWdEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BtdHByb3RvL2NvcmUvc3JjL3V0aWxzL2NyeXB0by9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhZXNqcyBmcm9tICdhZXMtanMnO1xuaW1wb3J0IGJpZ0ludCBmcm9tICdiaWctaW50ZWdlcic7XG5pbXBvcnQge1xuICBiaWdJbnRUb0J5dGVzLFxuICBieXRlc1RvQmlnSW50LFxuICBnZXRSYW5kb21CeXRlcyxcbiAgY29uY2F0Qnl0ZXMsXG4gIHhvckJ5dGVzLFxufSBmcm9tICcuLi8uLi91dGlscy9jb21tb24vaW5kZXguanMnO1xuaW1wb3J0IHsgU0hBMSB9IGZyb20gJy4vc2hhMS9pbmRleC5qcyc7XG5pbXBvcnQgeyBTSEEyNTYgfSBmcm9tICcuL3NoYTI1Ni9pbmRleC5qcyc7XG5pbXBvcnQgeyBQQktERjIgfSBmcm9tICcuL3Bia2RmMi9pbmRleC5qcyc7XG5cbmNvbnN0IEFFUyA9IGFlc2pzLkFFUztcbkFFUy5Db3VudGVyID0gYWVzanMuQ291bnRlcjtcbkFFUy5DVFIgPSBhZXNqcy5Nb2RlT2ZPcGVyYXRpb24uY3RyO1xuXG5jb25zdCBjcmVhdGVBcnJheSA9IGFlc2pzLl9hcnJheVRlc3QuY3JlYXRlQXJyYXk7XG5jb25zdCBjb3B5QXJyYXkgPSBhZXNqcy5fYXJyYXlUZXN0LmNvcHlBcnJheTtcblxuY2xhc3MgTW9kZU9mT3BlcmF0aW9uSUdFIHtcbiAgY29uc3RydWN0b3Ioa2V5LCBpdikge1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSAnSW5maW5pdGUgR2FyYmxlIEV4dGVuc2lvbic7XG4gICAgdGhpcy5uYW1lID0gJ2lnZSc7XG5cbiAgICB0aGlzLl9hZXMgPSBuZXcgQUVTKGtleSk7XG4gICAgdGhpcy5faXYgPSBpdjtcbiAgICB0aGlzLl9pdnAgPSBudWxsO1xuICB9XG5cbiAgZW5jcnlwdChwbGFpbnRleHQpIHtcbiAgICBpZiAocGxhaW50ZXh0Lmxlbmd0aCAlIDE2ICE9PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcGxhaW50ZXh0IHNpemUgKG11c3QgYmUgbXVsdGlwbGUgb2YgMTYgYnl0ZXMpJyk7XG4gICAgfVxuXG4gICAgY29uc3QgY2lwaGVydGV4dCA9IGNyZWF0ZUFycmF5KHBsYWludGV4dC5sZW5ndGgpO1xuICAgIGxldCBibG9jayA9IGNyZWF0ZUFycmF5KDE2KTtcblxuICAgIGlmICh0aGlzLl9pdnAgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuX2l2cCA9IHRoaXMuX2l2LnNsaWNlKDAsIDE2KTtcbiAgICAgIHRoaXMuX2l2MnAgPSB0aGlzLl9pdi5zbGljZSgxNiwgMzIpO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGxhaW50ZXh0Lmxlbmd0aDsgaSArPSAxNikge1xuICAgICAgY29uc3QgbmV4dEl2MnAgPSBwbGFpbnRleHQuc2xpY2UoaSwgaSArIDE2KTtcblxuICAgICAgY29weUFycmF5KHBsYWludGV4dCwgYmxvY2ssIDAsIGksIGkgKyAxNik7XG4gICAgICBibG9jayA9IHhvckJ5dGVzKGJsb2NrLCB0aGlzLl9pdnApO1xuICAgICAgYmxvY2sgPSB0aGlzLl9hZXMuZW5jcnlwdChibG9jayk7XG4gICAgICBibG9jayA9IHhvckJ5dGVzKGJsb2NrLCB0aGlzLl9pdjJwKTtcbiAgICAgIGNvcHlBcnJheShibG9jaywgY2lwaGVydGV4dCwgaSk7XG5cbiAgICAgIHRoaXMuX2l2cCA9IGNpcGhlcnRleHQuc2xpY2UoaSwgaSArIDE2KTtcbiAgICAgIHRoaXMuX2l2MnAgPSBuZXh0SXYycDtcbiAgICB9XG5cbiAgICByZXR1cm4gY2lwaGVydGV4dDtcbiAgfVxuXG4gIGRlY3J5cHQoY2lwaGVydGV4dCkge1xuICAgIGlmIChjaXBoZXJ0ZXh0Lmxlbmd0aCAlIDE2ICE9PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgY2lwaGVydGV4dCBzaXplIChtdXN0IGJlIG11bHRpcGxlIG9mIDE2IGJ5dGVzKScpO1xuICAgIH1cblxuICAgIGNvbnN0IHBsYWludGV4dCA9IGNyZWF0ZUFycmF5KGNpcGhlcnRleHQubGVuZ3RoKTtcbiAgICBsZXQgYmxvY2sgPSBjcmVhdGVBcnJheSgxNik7XG5cbiAgICBpZiAodGhpcy5faXZwID09PSBudWxsKSB7XG4gICAgICB0aGlzLl9pdnAgPSB0aGlzLl9pdi5zbGljZSgwLCAxNik7XG4gICAgICB0aGlzLl9pdjJwID0gdGhpcy5faXYuc2xpY2UoMTYsIDMyKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNpcGhlcnRleHQubGVuZ3RoOyBpICs9IDE2KSB7XG4gICAgICBjb25zdCBuZXh0SXZwID0gY2lwaGVydGV4dC5zbGljZShpLCBpICsgMTYpO1xuXG4gICAgICBjb3B5QXJyYXkoY2lwaGVydGV4dCwgYmxvY2ssIDAsIGksIGkgKyAxNik7XG4gICAgICBibG9jayA9IHhvckJ5dGVzKGJsb2NrLCB0aGlzLl9pdjJwKTtcbiAgICAgIGJsb2NrID0gdGhpcy5fYWVzLmRlY3J5cHQoYmxvY2spO1xuICAgICAgYmxvY2sgPSB4b3JCeXRlcyhibG9jaywgdGhpcy5faXZwKTtcbiAgICAgIGNvcHlBcnJheShibG9jaywgcGxhaW50ZXh0LCBpKTtcblxuICAgICAgdGhpcy5faXZwID0gbmV4dEl2cDtcbiAgICAgIHRoaXMuX2l2MnAgPSBwbGFpbnRleHQuc2xpY2UoaSwgaSArIDE2KTtcbiAgICB9XG4gICAgcmV0dXJuIHBsYWludGV4dDtcbiAgfVxufVxuXG5BRVMuSUdFID0gTW9kZU9mT3BlcmF0aW9uSUdFO1xuXG5jbGFzcyBSU0Ege1xuICBjb25zdHJ1Y3RvcihwdWJsaWNLZXkpIHtcbiAgICB0aGlzLmV4cG9uZW50ID0gcHVibGljS2V5LmV4cG9uZW50O1xuICAgIHRoaXMubW9kdWx1cyA9IHB1YmxpY0tleS5tb2R1bHVzO1xuICB9XG5cbiAgZW5jcnlwdChieXRlcykge1xuICAgIGNvbnN0IGVuY3J5cHRlZEJpZ0ludCA9IGJ5dGVzVG9CaWdJbnQoYnl0ZXMpLm1vZFBvdyhcbiAgICAgIGJpZ0ludCh0aGlzLmV4cG9uZW50LCAxNiksXG4gICAgICBiaWdJbnQodGhpcy5tb2R1bHVzLCAxNilcbiAgICApO1xuXG4gICAgcmV0dXJuIGJpZ0ludFRvQnl0ZXMoZW5jcnlwdGVkQmlnSW50LCAyNTYpO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFNSUFBhcmFtcyh7IGcsIHAsIHNhbHQxLCBzYWx0MiwgZ0IsIHBhc3N3b3JkIH0pIHtcbiAgY29uc3QgSCA9IFNIQTI1NjtcbiAgY29uc3QgU0ggPSAoZGF0YSwgc2FsdCkgPT4ge1xuICAgIHJldHVybiBTSEEyNTYoY29uY2F0Qnl0ZXMoc2FsdCwgZGF0YSwgc2FsdCkpO1xuICB9O1xuICBjb25zdCBQSDEgPSBhc3luYyAocGFzc3dvcmQsIHNhbHQxLCBzYWx0MikgPT4ge1xuICAgIHJldHVybiBhd2FpdCBTSChhd2FpdCBTSChwYXNzd29yZCwgc2FsdDEpLCBzYWx0Mik7XG4gIH07XG4gIGNvbnN0IFBIMiA9IGFzeW5jIChwYXNzd29yZCwgc2FsdDEsIHNhbHQyKSA9PiB7XG4gICAgcmV0dXJuIGF3YWl0IFNIKFxuICAgICAgYXdhaXQgUEJLREYyKGF3YWl0IFBIMShwYXNzd29yZCwgc2FsdDEsIHNhbHQyKSwgc2FsdDEsIDEwMDAwMCksXG4gICAgICBzYWx0MlxuICAgICk7XG4gIH07XG5cbiAgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuXG4gIGNvbnN0IGdCaWdJbnQgPSBiaWdJbnQoZyk7XG4gIGNvbnN0IGdCeXRlcyA9IGJpZ0ludFRvQnl0ZXMoZ0JpZ0ludCwgMjU2KTtcbiAgY29uc3QgcEJpZ0ludCA9IGJ5dGVzVG9CaWdJbnQocCk7XG4gIGNvbnN0IGFCaWdJbnQgPSBieXRlc1RvQmlnSW50KGdldFJhbmRvbUJ5dGVzKDI1NikpO1xuICBjb25zdCBnQUJpZ0ludCA9IGdCaWdJbnQubW9kUG93KGFCaWdJbnQsIHBCaWdJbnQpO1xuICBjb25zdCBnQUJ5dGVzID0gYmlnSW50VG9CeXRlcyhnQUJpZ0ludCk7XG4gIGNvbnN0IGdCQnl0ZXMgPSBieXRlc1RvQmlnSW50KGdCKTtcbiAgY29uc3QgW2ssIHUsIHhdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgIEgoY29uY2F0Qnl0ZXMocCwgZ0J5dGVzKSksXG4gICAgSChjb25jYXRCeXRlcyhnQUJ5dGVzLCBnQikpLFxuICAgIFBIMihlbmNvZGVyLmVuY29kZShwYXNzd29yZCksIHNhbHQxLCBzYWx0MiksXG4gIF0pO1xuICBjb25zdCBrQmlnSW50ID0gYnl0ZXNUb0JpZ0ludChrKTtcbiAgY29uc3QgdUJpZ0ludCA9IGJ5dGVzVG9CaWdJbnQodSk7XG4gIGNvbnN0IHhCaWdJbnQgPSBieXRlc1RvQmlnSW50KHgpO1xuICBjb25zdCB2QmlnSW50ID0gZ0JpZ0ludC5tb2RQb3coeEJpZ0ludCwgcEJpZ0ludCk7XG4gIGNvbnN0IGtWQmlnSW50ID0ga0JpZ0ludC5tdWx0aXBseSh2QmlnSW50KS5tb2QocEJpZ0ludCk7XG4gIGxldCB0QmlnSW50ID0gZ0JCeXRlcy5zdWJ0cmFjdChrVkJpZ0ludCkubW9kKHBCaWdJbnQpO1xuICBpZiAodEJpZ0ludC5pc05lZ2F0aXZlKCkpIHtcbiAgICB0QmlnSW50ID0gdEJpZ0ludC5hZGQocEJpZ0ludCk7XG4gIH1cbiAgY29uc3Qgc0FCaWdJbnQgPSB0QmlnSW50Lm1vZFBvdyhcbiAgICBhQmlnSW50LmFkZCh1QmlnSW50Lm11bHRpcGx5KHhCaWdJbnQpKSxcbiAgICBwQmlnSW50XG4gICk7XG4gIGNvbnN0IHNBQnl0ZXMgPSBiaWdJbnRUb0J5dGVzKHNBQmlnSW50KTtcbiAgY29uc3Qga0EgPSBhd2FpdCBIKHNBQnl0ZXMpO1xuICBjb25zdCBNMSA9IGF3YWl0IEgoXG4gICAgY29uY2F0Qnl0ZXMoXG4gICAgICB4b3JCeXRlcyhhd2FpdCBIKHApLCBhd2FpdCBIKGdCeXRlcykpLFxuICAgICAgYXdhaXQgSChzYWx0MSksXG4gICAgICBhd2FpdCBIKHNhbHQyKSxcbiAgICAgIGdBQnl0ZXMsXG4gICAgICBnQixcbiAgICAgIGtBXG4gICAgKVxuICApO1xuXG4gIHJldHVybiB7IEE6IGdBQnl0ZXMsIE0xIH07XG59XG5cbmV4cG9ydCB7IEFFUywgUlNBLCBTSEExLCBTSEEyNTYsIGdldFNSUFBhcmFtcyB9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@mtproto/core/src/utils/crypto/index.js\n");

/***/ }),

/***/ "./node_modules/@mtproto/core/src/utils/crypto/pbkdf2/index.browser.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@mtproto/core/src/utils/crypto/pbkdf2/index.browser.js ***!
  \*****************************************************************************/
/*! exports provided: PBKDF2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PBKDF2\", function() { return PBKDF2; });\nasync function PBKDF2(password, salt, iterations) {\n  return new Uint8Array(\n    await crypto.subtle.deriveBits(\n      {\n        name: 'PBKDF2',\n        hash: 'SHA-512',\n        salt,\n        iterations,\n      },\n      await crypto.subtle.importKey(\n        'raw',\n        password,\n        { name: 'PBKDF2' },\n        false,\n        ['deriveBits']\n      ),\n      512\n    )\n  );\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvdXRpbHMvY3J5cHRvL3Bia2RmMi9pbmRleC5icm93c2VyLmpzPzI5YjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsU0FBUyxpQkFBaUI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWtCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BtdHByb3RvL2NvcmUvc3JjL3V0aWxzL2NyeXB0by9wYmtkZjIvaW5kZXguYnJvd3Nlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImFzeW5jIGZ1bmN0aW9uIFBCS0RGMihwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucykge1xuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoXG4gICAgYXdhaXQgY3J5cHRvLnN1YnRsZS5kZXJpdmVCaXRzKFxuICAgICAge1xuICAgICAgICBuYW1lOiAnUEJLREYyJyxcbiAgICAgICAgaGFzaDogJ1NIQS01MTInLFxuICAgICAgICBzYWx0LFxuICAgICAgICBpdGVyYXRpb25zLFxuICAgICAgfSxcbiAgICAgIGF3YWl0IGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFxuICAgICAgICAncmF3JyxcbiAgICAgICAgcGFzc3dvcmQsXG4gICAgICAgIHsgbmFtZTogJ1BCS0RGMicgfSxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIFsnZGVyaXZlQml0cyddXG4gICAgICApLFxuICAgICAgNTEyXG4gICAgKVxuICApO1xufVxuXG5leHBvcnQgeyBQQktERjIgfTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mtproto/core/src/utils/crypto/pbkdf2/index.browser.js\n");

/***/ }),

/***/ "./node_modules/@mtproto/core/src/utils/crypto/sha1/index.browser.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@mtproto/core/src/utils/crypto/sha1/index.browser.js ***!
  \***************************************************************************/
/*! exports provided: SHA1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SHA1\", function() { return SHA1; });\nasync function SHA1(data) {\n  return new Uint8Array(await crypto.subtle.digest('SHA-1', data));\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvdXRpbHMvY3J5cHRvL3NoYTEvaW5kZXguYnJvd3Nlci5qcz83ODU4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7O0FBRWdCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BtdHByb3RvL2NvcmUvc3JjL3V0aWxzL2NyeXB0by9zaGExL2luZGV4LmJyb3dzZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhc3luYyBmdW5jdGlvbiBTSEExKGRhdGEpIHtcbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGF3YWl0IGNyeXB0by5zdWJ0bGUuZGlnZXN0KCdTSEEtMScsIGRhdGEpKTtcbn1cblxuZXhwb3J0IHsgU0hBMSB9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@mtproto/core/src/utils/crypto/sha1/index.browser.js\n");

/***/ }),

/***/ "./node_modules/@mtproto/core/src/utils/crypto/sha256/index.browser.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@mtproto/core/src/utils/crypto/sha256/index.browser.js ***!
  \*****************************************************************************/
/*! exports provided: SHA256 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SHA256\", function() { return SHA256; });\nasync function SHA256(data) {\n  return new Uint8Array(await crypto.subtle.digest('SHA-256', data));\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvdXRpbHMvY3J5cHRvL3NoYTI1Ni9pbmRleC5icm93c2VyLmpzPzhiOWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTs7QUFFa0IiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvdXRpbHMvY3J5cHRvL3NoYTI1Ni9pbmRleC5icm93c2VyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYXN5bmMgZnVuY3Rpb24gU0hBMjU2KGRhdGEpIHtcbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGF3YWl0IGNyeXB0by5zdWJ0bGUuZGlnZXN0KCdTSEEtMjU2JywgZGF0YSkpO1xufVxuXG5leHBvcnQgeyBTSEEyNTYgfTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mtproto/core/src/utils/crypto/sha256/index.browser.js\n");

/***/ }),

/***/ "./node_modules/@mtproto/core/src/utils/pq/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@mtproto/core/src/utils/pq/index.js ***!
  \**********************************************************/
/*! exports provided: pqPrimeFactorization */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pqPrimeFactorization\", function() { return pqPrimeFactorization; });\n/* harmony import */ var leemon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! leemon */ \"./node_modules/leemon/es/index.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/index.js */ \"./node_modules/@mtproto/core/src/utils/common/index.js\");\n\n\n\nfunction bytesFromLeemonBigInt(bigInt, len) {\n  var str = Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"bigInt2str\"])(bigInt, 16);\n  return Object(_common_index_js__WEBPACK_IMPORTED_MODULE_1__[\"hexToBytes\"])(str);\n}\n\nfunction pqPrimeFactorization(pqBytes) {\n  const pq = Object(_common_index_js__WEBPACK_IMPORTED_MODULE_1__[\"bytesToBigInt\"])(pqBytes);\n  let result = null;\n\n  try {\n    result = pqPrimeLeemon(\n      Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"str2bigInt\"])(pq.toString(16), 16, Math.ceil(64 / leemon__WEBPACK_IMPORTED_MODULE_0__[\"bpe\"]) + 1)\n    );\n  } catch (error) {\n    console.error(`PQ leemon factorization: ${error}`);\n  }\n\n  return result;\n}\n\nfunction pqPrimeLeemon(what) {\n  var minBits = 64;\n  var minLen = Math.ceil(minBits / leemon__WEBPACK_IMPORTED_MODULE_0__[\"bpe\"]) + 1;\n  var it = 0;\n  var i, q;\n  var j, lim;\n  var g, P;\n  var Q;\n  var a = new Array(minLen);\n  var b = new Array(minLen);\n  var c = new Array(minLen);\n  var g = new Array(minLen);\n  var z = new Array(minLen);\n  var x = new Array(minLen);\n  var y = new Array(minLen);\n\n  for (i = 0; i < 3; i++) {\n    q = (Object(_common_index_js__WEBPACK_IMPORTED_MODULE_1__[\"getRandomInt\"])(128) & 15) + 17;\n    Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"copyInt_\"])(x, Object(_common_index_js__WEBPACK_IMPORTED_MODULE_1__[\"getRandomInt\"])(1000000000) + 1);\n    Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"copy_\"])(y, x);\n    lim = 1 << (i + 18);\n\n    for (j = 1; j < lim; j++) {\n      ++it;\n      Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"copy_\"])(a, x);\n      Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"copy_\"])(b, x);\n      Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"copyInt_\"])(c, q);\n\n      while (!Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"isZero\"])(b)) {\n        if (b[0] & 1) {\n          Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"add_\"])(c, a);\n          if (Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"greater\"])(c, what)) {\n            Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"sub_\"])(c, what);\n          }\n        }\n        Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"add_\"])(a, a);\n        if (Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"greater\"])(a, what)) {\n          Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"sub_\"])(a, what);\n        }\n        Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"rightShift_\"])(b, 1);\n      }\n\n      Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"copy_\"])(x, c);\n      if (Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"greater\"])(x, y)) {\n        Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"copy_\"])(z, x);\n        Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"sub_\"])(z, y);\n      } else {\n        Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"copy_\"])(z, y);\n        Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"sub_\"])(z, x);\n      }\n      Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"eGCD_\"])(z, what, g, a, b);\n      if (!Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"equalsInt\"])(g, 1)) {\n        break;\n      }\n      if ((j & (j - 1)) == 0) {\n        Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"copy_\"])(y, x);\n      }\n    }\n    if (Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"greater\"])(g, leemon__WEBPACK_IMPORTED_MODULE_0__[\"one\"])) {\n      break;\n    }\n  }\n\n  Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"divide_\"])(what, g, x, y);\n\n  if (Object(leemon__WEBPACK_IMPORTED_MODULE_0__[\"greater\"])(g, x)) {\n    P = x;\n    Q = g;\n  } else {\n    P = g;\n    Q = x;\n  }\n\n  // console.log(dT(), 'done', bigInt2str(what, 10), bigInt2str(P, 10), bigInt2str(Q, 10))\n\n  return [bytesFromLeemonBigInt(P), bytesFromLeemonBigInt(Q), it];\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvdXRpbHMvcHEvaW5kZXguanM/YmU5ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQWVnQjtBQUM2RDs7QUFFN0U7QUFDQSxZQUFZLHlEQUFVO0FBQ3RCLFNBQVMsbUVBQVU7QUFDbkI7O0FBRUE7QUFDQSxhQUFhLHNFQUFhO0FBQzFCOztBQUVBO0FBQ0E7QUFDQSxNQUFNLHlEQUFVLHFDQUFxQywwQ0FBRztBQUN4RDtBQUNBLEdBQUc7QUFDSCw4Q0FBOEMsTUFBTTtBQUNwRDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQ0FBbUMsMENBQUc7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGFBQWEsT0FBTztBQUNwQixTQUFTLHFFQUFZO0FBQ3JCLElBQUksdURBQVEsSUFBSSxxRUFBWTtBQUM1QixJQUFJLG9EQUFLO0FBQ1Q7O0FBRUEsZUFBZSxTQUFTO0FBQ3hCO0FBQ0EsTUFBTSxvREFBSztBQUNYLE1BQU0sb0RBQUs7QUFDWCxNQUFNLHVEQUFROztBQUVkLGNBQWMscURBQU07QUFDcEI7QUFDQSxVQUFVLG1EQUFJO0FBQ2QsY0FBYyxzREFBTztBQUNyQixZQUFZLG1EQUFJO0FBQ2hCO0FBQ0E7QUFDQSxRQUFRLG1EQUFJO0FBQ1osWUFBWSxzREFBTztBQUNuQixVQUFVLG1EQUFJO0FBQ2Q7QUFDQSxRQUFRLDBEQUFXO0FBQ25COztBQUVBLE1BQU0sb0RBQUs7QUFDWCxVQUFVLHNEQUFPO0FBQ2pCLFFBQVEsb0RBQUs7QUFDYixRQUFRLG1EQUFJO0FBQ1osT0FBTztBQUNQLFFBQVEsb0RBQUs7QUFDYixRQUFRLG1EQUFJO0FBQ1o7QUFDQSxNQUFNLG9EQUFLO0FBQ1gsV0FBVyx3REFBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQSxRQUFRLG9EQUFLO0FBQ2I7QUFDQTtBQUNBLFFBQVEsc0RBQU8sSUFBSSwwQ0FBRztBQUN0QjtBQUNBO0FBQ0E7O0FBRUEsRUFBRSxzREFBTzs7QUFFVCxNQUFNLHNEQUFPO0FBQ2I7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFJRSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AbXRwcm90by9jb3JlL3NyYy91dGlscy9wcS9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGVHQ0RfLFxuICBncmVhdGVyLFxuICBkaXZpZGVfLFxuICBzdHIyYmlnSW50LFxuICBlcXVhbHNJbnQsXG4gIGlzWmVybyxcbiAgYmlnSW50MnN0cixcbiAgY29weV8sXG4gIGNvcHlJbnRfLFxuICByaWdodFNoaWZ0XyxcbiAgc3ViXyxcbiAgYWRkXyxcbiAgb25lLFxuICBicGUsXG59IGZyb20gJ2xlZW1vbic7XG5pbXBvcnQgeyBoZXhUb0J5dGVzLCBieXRlc1RvQmlnSW50LCBnZXRSYW5kb21JbnQgfSBmcm9tICcuLi9jb21tb24vaW5kZXguanMnO1xuXG5mdW5jdGlvbiBieXRlc0Zyb21MZWVtb25CaWdJbnQoYmlnSW50LCBsZW4pIHtcbiAgdmFyIHN0ciA9IGJpZ0ludDJzdHIoYmlnSW50LCAxNik7XG4gIHJldHVybiBoZXhUb0J5dGVzKHN0cik7XG59XG5cbmZ1bmN0aW9uIHBxUHJpbWVGYWN0b3JpemF0aW9uKHBxQnl0ZXMpIHtcbiAgY29uc3QgcHEgPSBieXRlc1RvQmlnSW50KHBxQnl0ZXMpO1xuICBsZXQgcmVzdWx0ID0gbnVsbDtcblxuICB0cnkge1xuICAgIHJlc3VsdCA9IHBxUHJpbWVMZWVtb24oXG4gICAgICBzdHIyYmlnSW50KHBxLnRvU3RyaW5nKDE2KSwgMTYsIE1hdGguY2VpbCg2NCAvIGJwZSkgKyAxKVxuICAgICk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihgUFEgbGVlbW9uIGZhY3Rvcml6YXRpb246ICR7ZXJyb3J9YCk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBwcVByaW1lTGVlbW9uKHdoYXQpIHtcbiAgdmFyIG1pbkJpdHMgPSA2NDtcbiAgdmFyIG1pbkxlbiA9IE1hdGguY2VpbChtaW5CaXRzIC8gYnBlKSArIDE7XG4gIHZhciBpdCA9IDA7XG4gIHZhciBpLCBxO1xuICB2YXIgaiwgbGltO1xuICB2YXIgZywgUDtcbiAgdmFyIFE7XG4gIHZhciBhID0gbmV3IEFycmF5KG1pbkxlbik7XG4gIHZhciBiID0gbmV3IEFycmF5KG1pbkxlbik7XG4gIHZhciBjID0gbmV3IEFycmF5KG1pbkxlbik7XG4gIHZhciBnID0gbmV3IEFycmF5KG1pbkxlbik7XG4gIHZhciB6ID0gbmV3IEFycmF5KG1pbkxlbik7XG4gIHZhciB4ID0gbmV3IEFycmF5KG1pbkxlbik7XG4gIHZhciB5ID0gbmV3IEFycmF5KG1pbkxlbik7XG5cbiAgZm9yIChpID0gMDsgaSA8IDM7IGkrKykge1xuICAgIHEgPSAoZ2V0UmFuZG9tSW50KDEyOCkgJiAxNSkgKyAxNztcbiAgICBjb3B5SW50Xyh4LCBnZXRSYW5kb21JbnQoMTAwMDAwMDAwMCkgKyAxKTtcbiAgICBjb3B5Xyh5LCB4KTtcbiAgICBsaW0gPSAxIDw8IChpICsgMTgpO1xuXG4gICAgZm9yIChqID0gMTsgaiA8IGxpbTsgaisrKSB7XG4gICAgICArK2l0O1xuICAgICAgY29weV8oYSwgeCk7XG4gICAgICBjb3B5XyhiLCB4KTtcbiAgICAgIGNvcHlJbnRfKGMsIHEpO1xuXG4gICAgICB3aGlsZSAoIWlzWmVybyhiKSkge1xuICAgICAgICBpZiAoYlswXSAmIDEpIHtcbiAgICAgICAgICBhZGRfKGMsIGEpO1xuICAgICAgICAgIGlmIChncmVhdGVyKGMsIHdoYXQpKSB7XG4gICAgICAgICAgICBzdWJfKGMsIHdoYXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhZGRfKGEsIGEpO1xuICAgICAgICBpZiAoZ3JlYXRlcihhLCB3aGF0KSkge1xuICAgICAgICAgIHN1Yl8oYSwgd2hhdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmlnaHRTaGlmdF8oYiwgMSk7XG4gICAgICB9XG5cbiAgICAgIGNvcHlfKHgsIGMpO1xuICAgICAgaWYgKGdyZWF0ZXIoeCwgeSkpIHtcbiAgICAgICAgY29weV8oeiwgeCk7XG4gICAgICAgIHN1Yl8oeiwgeSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb3B5Xyh6LCB5KTtcbiAgICAgICAgc3ViXyh6LCB4KTtcbiAgICAgIH1cbiAgICAgIGVHQ0RfKHosIHdoYXQsIGcsIGEsIGIpO1xuICAgICAgaWYgKCFlcXVhbHNJbnQoZywgMSkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoKGogJiAoaiAtIDEpKSA9PSAwKSB7XG4gICAgICAgIGNvcHlfKHksIHgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZ3JlYXRlcihnLCBvbmUpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBkaXZpZGVfKHdoYXQsIGcsIHgsIHkpO1xuXG4gIGlmIChncmVhdGVyKGcsIHgpKSB7XG4gICAgUCA9IHg7XG4gICAgUSA9IGc7XG4gIH0gZWxzZSB7XG4gICAgUCA9IGc7XG4gICAgUSA9IHg7XG4gIH1cblxuICAvLyBjb25zb2xlLmxvZyhkVCgpLCAnZG9uZScsIGJpZ0ludDJzdHIod2hhdCwgMTApLCBiaWdJbnQyc3RyKFAsIDEwKSwgYmlnSW50MnN0cihRLCAxMCkpXG5cbiAgcmV0dXJuIFtieXRlc0Zyb21MZWVtb25CaWdJbnQoUCksIGJ5dGVzRnJvbUxlZW1vbkJpZ0ludChRKSwgaXRdO1xufVxuXG5leHBvcnQge1xuICBwcVByaW1lRmFjdG9yaXphdGlvbixcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mtproto/core/src/utils/pq/index.js\n");

/***/ }),

/***/ "./node_modules/@mtproto/core/src/utils/rsa/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@mtproto/core/src/utils/rsa/index.js ***!
  \***********************************************************/
/*! exports provided: getRsaKeyByFingerprints */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getRsaKeyByFingerprints\", function() { return getRsaKeyByFingerprints; });\n/* harmony import */ var big_integer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! big-integer */ \"./node_modules/big-integer/BigInteger.js\");\n/* harmony import */ var big_integer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(big_integer__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/crypto/index.js */ \"./node_modules/@mtproto/core/src/utils/crypto/index.js\");\n/* harmony import */ var _tl_serializer_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../tl/serializer/index.js */ \"./node_modules/@mtproto/core/src/tl/serializer/index.js\");\n/* harmony import */ var _utils_common_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/common/index.js */ \"./node_modules/@mtproto/core/src/utils/common/index.js\");\n\n\n\n\n\nconst publisKeys = [\n  {\n    modulus:\n      'c150023e2f70db7985ded064759cfecf0af328e69a41daf4d6f01b538135a6f91f8f8b2a0ec9ba9720ce352efcf6c5680ffc424bd634864902de0b4bd6d49f4e580230e3ae97d95c8b19442b3c0a10d8f5633fecedd6926a7f6dab0ddb7d457f9ea81b8465fcd6fffeed114011df91c059caedaf97625f6c96ecc74725556934ef781d866b34f011fce4d835a090196e9a5f0e4449af7eb697ddb9076494ca5f81104a305b6dd27665722c46b60e5df680fb16b210607ef217652e60236c255f6a28315f4083a96791d7214bf64c1df4fd0db1944fb26a2a57031b32eee64ad15a8ba68885cde74a5bfc920f6abf59ba5c75506373e7130f9042da922179251f',\n    exponent: '010001',\n  },\n  {\n    modulus:\n      'aeec36c8ffc109cb099624685b97815415657bd76d8c9c3e398103d7ad16c9bba6f525ed0412d7ae2c2de2b44e77d72cbf4b7438709a4e646a05c43427c7f184debf72947519680e651500890c6832796dd11f772c25ff8f576755afe055b0a3752c696eb7d8da0d8be1faf38c9bdd97ce0a77d3916230c4032167100edd0f9e7a3a9b602d04367b689536af0d64b613ccba7962939d3b57682beb6dae5b608130b2e52aca78ba023cf6ce806b1dc49c72cf928a7199d22e3d7ac84e47bc9427d0236945d10dbd15177bab413fbf0edfda09f014c7a7da088dde9759702ca760af2b8e4e97cc055c617bd74c3d97008635b98dc4d621b4891da9fb0473047927',\n    exponent: '010001',\n  },\n  {\n    modulus:\n      'bdf2c77d81f6afd47bd30f29ac76e55adfe70e487e5e48297e5a9055c9c07d2b93b4ed3994d3eca5098bf18d978d54f8b7c713eb10247607e69af9ef44f38e28f8b439f257a11572945cc0406fe3f37bb92b79112db69eedf2dc71584a661638ea5becb9e23585074b80d57d9f5710dd30d2da940e0ada2f1b878397dc1a72b5ce2531b6f7dd158e09c828d03450ca0ff8a174deacebcaa22dde84ef66ad370f259d18af806638012da0ca4a70baa83d9c158f3552bc9158e69bf332a45809e1c36905a5caa12348dd57941a482131be7b2355a5f4635374f3bd3ddf5ff925bf4809ee27c1e67d9120c5fe08a9de458b1b4a3c5d0a428437f2beca81f4e2d5ff',\n    exponent: '010001',\n  },\n  {\n    modulus:\n      'b3f762b739be98f343eb1921cf0148cfa27ff7af02b6471213fed9daa0098976e667750324f1abcea4c31e43b7d11f1579133f2b3d9fe27474e462058884e5e1b123be9cbbc6a443b2925c08520e7325e6f1a6d50e117eb61ea49d2534c8bb4d2ae4153fabe832b9edf4c5755fdd8b19940b81d1d96cf433d19e6a22968a85dc80f0312f596bd2530c1cfb28b5fe019ac9bc25cd9c2a5d8a0f3a1c0c79bcca524d315b5e21b5c26b46babe3d75d06d1cd33329ec782a0f22891ed1db42a1d6c0dea431428bc4d7aabdcf3e0eb6fda4e23eb7733e7727e9a1915580796c55188d2596d2665ad1182ba7abf15aaa5a8b779ea996317a20ae044b820bff35b6e8a1',\n    exponent: '010001',\n  },\n  {\n    modulus:\n      'be6a71558ee577ff03023cfa17aab4e6c86383cff8a7ad38edb9fafe6f323f2d5106cbc8cafb83b869cffd1ccf121cd743d509e589e68765c96601e813dc5b9dfc4be415c7a6526132d0035ca33d6d6075d4f535122a1cdfe017041f1088d1419f65c8e5490ee613e16dbf662698c0f54870f0475fa893fc41eb55b08ff1ac211bc045ded31be27d12c96d8d3cfc6a7ae8aa50bf2ee0f30ed507cc2581e3dec56de94f5dc0a7abee0be990b893f2887bd2c6310a1e0a9e3e38bd34fded2541508dc102a9c9b4c95effd9dd2dfe96c29be647d6c69d66ca500843cfaed6e440196f1dbe0e2e22163c61ca48c79116fa77216726749a976a1c4b0944b5121e8c01',\n    exponent: '010001',\n  },\n];\n\nasync function getPublisKeysByHex() {\n  const publisKeysByHex = {};\n\n  for (const publisKey of publisKeys) {\n    const RSAPublicKey = new _tl_serializer_index_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n    RSAPublicKey.bytes(Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_3__[\"hexToBytes\"])(publisKey.modulus), 'n');\n    RSAPublicKey.bytes(Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_3__[\"hexToBytes\"])(publisKey.exponent), 'e');\n\n    const buffer = RSAPublicKey.getBuffer();\n\n    const fingerprintBytes = (await Object(_utils_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__[\"SHA1\"])(buffer)).slice(-8);\n    fingerprintBytes.reverse();\n\n    publisKeysByHex[Object(_utils_common_index_js__WEBPACK_IMPORTED_MODULE_3__[\"bytesToHex\"])(fingerprintBytes)] = {\n      modulus: publisKey.modulus,\n      exponent: publisKey.exponent,\n    };\n  }\n\n  return publisKeysByHex;\n}\n\nasync function getRsaKeyByFingerprints(fingerprints) {\n  let resultKey = null;\n  const publisKeysByHex = await getPublisKeysByHex();\n\n  fingerprints.forEach(fingerprint => {\n    if (!!resultKey) {\n      return;\n    }\n\n    const fingerprintHex = big_integer__WEBPACK_IMPORTED_MODULE_0___default()(fingerprint).toString(16);\n\n    const foundKey = publisKeysByHex[fingerprintHex];\n\n    if (foundKey) {\n      resultKey = {\n        fingerprint,\n        ...foundKey,\n      };\n    }\n  });\n\n  return resultKey;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvdXRpbHMvcnNhL2luZGV4LmpzPzE3ZmQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBaUM7QUFDa0I7QUFDRztBQUNlOztBQUVyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSw2QkFBNkIsK0RBQVU7QUFDdkMsdUJBQXVCLHlFQUFVO0FBQ2pDLHVCQUF1Qix5RUFBVTs7QUFFakM7O0FBRUEsb0NBQW9DLG1FQUFJO0FBQ3hDOztBQUVBLG9CQUFvQix5RUFBVTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwyQkFBMkIsa0RBQU07O0FBRWpDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFbUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG10cHJvdG8vY29yZS9zcmMvdXRpbHMvcnNhL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGJpZ0ludCBmcm9tICdiaWctaW50ZWdlcic7XG5pbXBvcnQgeyBTSEExIH0gZnJvbSAnLi4vLi4vdXRpbHMvY3J5cHRvL2luZGV4LmpzJztcbmltcG9ydCBTZXJpYWxpemVyIGZyb20gJy4uLy4uL3RsL3NlcmlhbGl6ZXIvaW5kZXguanMnO1xuaW1wb3J0IHsgYnl0ZXNUb0hleCwgaGV4VG9CeXRlcyB9IGZyb20gJy4uLy4uL3V0aWxzL2NvbW1vbi9pbmRleC5qcyc7XG5cbmNvbnN0IHB1Ymxpc0tleXMgPSBbXG4gIHtcbiAgICBtb2R1bHVzOlxuICAgICAgJ2MxNTAwMjNlMmY3MGRiNzk4NWRlZDA2NDc1OWNmZWNmMGFmMzI4ZTY5YTQxZGFmNGQ2ZjAxYjUzODEzNWE2ZjkxZjhmOGIyYTBlYzliYTk3MjBjZTM1MmVmY2Y2YzU2ODBmZmM0MjRiZDYzNDg2NDkwMmRlMGI0YmQ2ZDQ5ZjRlNTgwMjMwZTNhZTk3ZDk1YzhiMTk0NDJiM2MwYTEwZDhmNTYzM2ZlY2VkZDY5MjZhN2Y2ZGFiMGRkYjdkNDU3ZjllYTgxYjg0NjVmY2Q2ZmZmZWVkMTE0MDExZGY5MWMwNTljYWVkYWY5NzYyNWY2Yzk2ZWNjNzQ3MjU1NTY5MzRlZjc4MWQ4NjZiMzRmMDExZmNlNGQ4MzVhMDkwMTk2ZTlhNWYwZTQ0NDlhZjdlYjY5N2RkYjkwNzY0OTRjYTVmODExMDRhMzA1YjZkZDI3NjY1NzIyYzQ2YjYwZTVkZjY4MGZiMTZiMjEwNjA3ZWYyMTc2NTJlNjAyMzZjMjU1ZjZhMjgzMTVmNDA4M2E5Njc5MWQ3MjE0YmY2NGMxZGY0ZmQwZGIxOTQ0ZmIyNmEyYTU3MDMxYjMyZWVlNjRhZDE1YThiYTY4ODg1Y2RlNzRhNWJmYzkyMGY2YWJmNTliYTVjNzU1MDYzNzNlNzEzMGY5MDQyZGE5MjIxNzkyNTFmJyxcbiAgICBleHBvbmVudDogJzAxMDAwMScsXG4gIH0sXG4gIHtcbiAgICBtb2R1bHVzOlxuICAgICAgJ2FlZWMzNmM4ZmZjMTA5Y2IwOTk2MjQ2ODViOTc4MTU0MTU2NTdiZDc2ZDhjOWMzZTM5ODEwM2Q3YWQxNmM5YmJhNmY1MjVlZDA0MTJkN2FlMmMyZGUyYjQ0ZTc3ZDcyY2JmNGI3NDM4NzA5YTRlNjQ2YTA1YzQzNDI3YzdmMTg0ZGViZjcyOTQ3NTE5NjgwZTY1MTUwMDg5MGM2ODMyNzk2ZGQxMWY3NzJjMjVmZjhmNTc2NzU1YWZlMDU1YjBhMzc1MmM2OTZlYjdkOGRhMGQ4YmUxZmFmMzhjOWJkZDk3Y2UwYTc3ZDM5MTYyMzBjNDAzMjE2NzEwMGVkZDBmOWU3YTNhOWI2MDJkMDQzNjdiNjg5NTM2YWYwZDY0YjYxM2NjYmE3OTYyOTM5ZDNiNTc2ODJiZWI2ZGFlNWI2MDgxMzBiMmU1MmFjYTc4YmEwMjNjZjZjZTgwNmIxZGM0OWM3MmNmOTI4YTcxOTlkMjJlM2Q3YWM4NGU0N2JjOTQyN2QwMjM2OTQ1ZDEwZGJkMTUxNzdiYWI0MTNmYmYwZWRmZGEwOWYwMTRjN2E3ZGEwODhkZGU5NzU5NzAyY2E3NjBhZjJiOGU0ZTk3Y2MwNTVjNjE3YmQ3NGMzZDk3MDA4NjM1Yjk4ZGM0ZDYyMWI0ODkxZGE5ZmIwNDczMDQ3OTI3JyxcbiAgICBleHBvbmVudDogJzAxMDAwMScsXG4gIH0sXG4gIHtcbiAgICBtb2R1bHVzOlxuICAgICAgJ2JkZjJjNzdkODFmNmFmZDQ3YmQzMGYyOWFjNzZlNTVhZGZlNzBlNDg3ZTVlNDgyOTdlNWE5MDU1YzljMDdkMmI5M2I0ZWQzOTk0ZDNlY2E1MDk4YmYxOGQ5NzhkNTRmOGI3YzcxM2ViMTAyNDc2MDdlNjlhZjllZjQ0ZjM4ZTI4ZjhiNDM5ZjI1N2ExMTU3Mjk0NWNjMDQwNmZlM2YzN2JiOTJiNzkxMTJkYjY5ZWVkZjJkYzcxNTg0YTY2MTYzOGVhNWJlY2I5ZTIzNTg1MDc0YjgwZDU3ZDlmNTcxMGRkMzBkMmRhOTQwZTBhZGEyZjFiODc4Mzk3ZGMxYTcyYjVjZTI1MzFiNmY3ZGQxNThlMDljODI4ZDAzNDUwY2EwZmY4YTE3NGRlYWNlYmNhYTIyZGRlODRlZjY2YWQzNzBmMjU5ZDE4YWY4MDY2MzgwMTJkYTBjYTRhNzBiYWE4M2Q5YzE1OGYzNTUyYmM5MTU4ZTY5YmYzMzJhNDU4MDllMWMzNjkwNWE1Y2FhMTIzNDhkZDU3OTQxYTQ4MjEzMWJlN2IyMzU1YTVmNDYzNTM3NGYzYmQzZGRmNWZmOTI1YmY0ODA5ZWUyN2MxZTY3ZDkxMjBjNWZlMDhhOWRlNDU4YjFiNGEzYzVkMGE0Mjg0MzdmMmJlY2E4MWY0ZTJkNWZmJyxcbiAgICBleHBvbmVudDogJzAxMDAwMScsXG4gIH0sXG4gIHtcbiAgICBtb2R1bHVzOlxuICAgICAgJ2IzZjc2MmI3MzliZTk4ZjM0M2ViMTkyMWNmMDE0OGNmYTI3ZmY3YWYwMmI2NDcxMjEzZmVkOWRhYTAwOTg5NzZlNjY3NzUwMzI0ZjFhYmNlYTRjMzFlNDNiN2QxMWYxNTc5MTMzZjJiM2Q5ZmUyNzQ3NGU0NjIwNTg4ODRlNWUxYjEyM2JlOWNiYmM2YTQ0M2IyOTI1YzA4NTIwZTczMjVlNmYxYTZkNTBlMTE3ZWI2MWVhNDlkMjUzNGM4YmI0ZDJhZTQxNTNmYWJlODMyYjllZGY0YzU3NTVmZGQ4YjE5OTQwYjgxZDFkOTZjZjQzM2QxOWU2YTIyOTY4YTg1ZGM4MGYwMzEyZjU5NmJkMjUzMGMxY2ZiMjhiNWZlMDE5YWM5YmMyNWNkOWMyYTVkOGEwZjNhMWMwYzc5YmNjYTUyNGQzMTViNWUyMWI1YzI2YjQ2YmFiZTNkNzVkMDZkMWNkMzMzMjllYzc4MmEwZjIyODkxZWQxZGI0MmExZDZjMGRlYTQzMTQyOGJjNGQ3YWFiZGNmM2UwZWI2ZmRhNGUyM2ViNzczM2U3NzI3ZTlhMTkxNTU4MDc5NmM1NTE4OGQyNTk2ZDI2NjVhZDExODJiYTdhYmYxNWFhYTVhOGI3NzllYTk5NjMxN2EyMGFlMDQ0YjgyMGJmZjM1YjZlOGExJyxcbiAgICBleHBvbmVudDogJzAxMDAwMScsXG4gIH0sXG4gIHtcbiAgICBtb2R1bHVzOlxuICAgICAgJ2JlNmE3MTU1OGVlNTc3ZmYwMzAyM2NmYTE3YWFiNGU2Yzg2MzgzY2ZmOGE3YWQzOGVkYjlmYWZlNmYzMjNmMmQ1MTA2Y2JjOGNhZmI4M2I4NjljZmZkMWNjZjEyMWNkNzQzZDUwOWU1ODllNjg3NjVjOTY2MDFlODEzZGM1YjlkZmM0YmU0MTVjN2E2NTI2MTMyZDAwMzVjYTMzZDZkNjA3NWQ0ZjUzNTEyMmExY2RmZTAxNzA0MWYxMDg4ZDE0MTlmNjVjOGU1NDkwZWU2MTNlMTZkYmY2NjI2OThjMGY1NDg3MGYwNDc1ZmE4OTNmYzQxZWI1NWIwOGZmMWFjMjExYmMwNDVkZWQzMWJlMjdkMTJjOTZkOGQzY2ZjNmE3YWU4YWE1MGJmMmVlMGYzMGVkNTA3Y2MyNTgxZTNkZWM1NmRlOTRmNWRjMGE3YWJlZTBiZTk5MGI4OTNmMjg4N2JkMmM2MzEwYTFlMGE5ZTNlMzhiZDM0ZmRlZDI1NDE1MDhkYzEwMmE5YzliNGM5NWVmZmQ5ZGQyZGZlOTZjMjliZTY0N2Q2YzY5ZDY2Y2E1MDA4NDNjZmFlZDZlNDQwMTk2ZjFkYmUwZTJlMjIxNjNjNjFjYTQ4Yzc5MTE2ZmE3NzIxNjcyNjc0OWE5NzZhMWM0YjA5NDRiNTEyMWU4YzAxJyxcbiAgICBleHBvbmVudDogJzAxMDAwMScsXG4gIH0sXG5dO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRQdWJsaXNLZXlzQnlIZXgoKSB7XG4gIGNvbnN0IHB1Ymxpc0tleXNCeUhleCA9IHt9O1xuXG4gIGZvciAoY29uc3QgcHVibGlzS2V5IG9mIHB1Ymxpc0tleXMpIHtcbiAgICBjb25zdCBSU0FQdWJsaWNLZXkgPSBuZXcgU2VyaWFsaXplcigpO1xuICAgIFJTQVB1YmxpY0tleS5ieXRlcyhoZXhUb0J5dGVzKHB1Ymxpc0tleS5tb2R1bHVzKSwgJ24nKTtcbiAgICBSU0FQdWJsaWNLZXkuYnl0ZXMoaGV4VG9CeXRlcyhwdWJsaXNLZXkuZXhwb25lbnQpLCAnZScpO1xuXG4gICAgY29uc3QgYnVmZmVyID0gUlNBUHVibGljS2V5LmdldEJ1ZmZlcigpO1xuXG4gICAgY29uc3QgZmluZ2VycHJpbnRCeXRlcyA9IChhd2FpdCBTSEExKGJ1ZmZlcikpLnNsaWNlKC04KTtcbiAgICBmaW5nZXJwcmludEJ5dGVzLnJldmVyc2UoKTtcblxuICAgIHB1Ymxpc0tleXNCeUhleFtieXRlc1RvSGV4KGZpbmdlcnByaW50Qnl0ZXMpXSA9IHtcbiAgICAgIG1vZHVsdXM6IHB1Ymxpc0tleS5tb2R1bHVzLFxuICAgICAgZXhwb25lbnQ6IHB1Ymxpc0tleS5leHBvbmVudCxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHB1Ymxpc0tleXNCeUhleDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0UnNhS2V5QnlGaW5nZXJwcmludHMoZmluZ2VycHJpbnRzKSB7XG4gIGxldCByZXN1bHRLZXkgPSBudWxsO1xuICBjb25zdCBwdWJsaXNLZXlzQnlIZXggPSBhd2FpdCBnZXRQdWJsaXNLZXlzQnlIZXgoKTtcblxuICBmaW5nZXJwcmludHMuZm9yRWFjaChmaW5nZXJwcmludCA9PiB7XG4gICAgaWYgKCEhcmVzdWx0S2V5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZmluZ2VycHJpbnRIZXggPSBiaWdJbnQoZmluZ2VycHJpbnQpLnRvU3RyaW5nKDE2KTtcblxuICAgIGNvbnN0IGZvdW5kS2V5ID0gcHVibGlzS2V5c0J5SGV4W2ZpbmdlcnByaW50SGV4XTtcblxuICAgIGlmIChmb3VuZEtleSkge1xuICAgICAgcmVzdWx0S2V5ID0ge1xuICAgICAgICBmaW5nZXJwcmludCxcbiAgICAgICAgLi4uZm91bmRLZXksXG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdEtleTtcbn1cblxuZXhwb3J0IHsgZ2V0UnNhS2V5QnlGaW5nZXJwcmludHMgfTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mtproto/core/src/utils/rsa/index.js\n");

/***/ }),

/***/ "./node_modules/aes-js/index.js":
/*!**************************************!*\
  !*** ./node_modules/aes-js/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*! MIT License. Copyright 2015-2018 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */\n(function(root) {\n    \"use strict\";\n\n    function checkInt(value) {\n        return (parseInt(value) === value);\n    }\n\n    function checkInts(arrayish) {\n        if (!checkInt(arrayish.length)) { return false; }\n\n        for (var i = 0; i < arrayish.length; i++) {\n            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function coerceArray(arg, copy) {\n\n        // ArrayBuffer view\n        if (arg.buffer && arg.name === 'Uint8Array') {\n\n            if (copy) {\n                if (arg.slice) {\n                    arg = arg.slice();\n                } else {\n                    arg = Array.prototype.slice.call(arg);\n                }\n            }\n\n            return arg;\n        }\n\n        // It's an array; check it is a valid representation of a byte\n        if (Array.isArray(arg)) {\n            if (!checkInts(arg)) {\n                throw new Error('Array contains invalid value: ' + arg);\n            }\n\n            return new Uint8Array(arg);\n        }\n\n        // Something else, but behaves like an array (maybe a Buffer? Arguments?)\n        if (checkInt(arg.length) && checkInts(arg)) {\n            return new Uint8Array(arg);\n        }\n\n        throw new Error('unsupported array-like object');\n    }\n\n    function createArray(length) {\n        return new Uint8Array(length);\n    }\n\n    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {\n        if (sourceStart != null || sourceEnd != null) {\n            if (sourceArray.slice) {\n                sourceArray = sourceArray.slice(sourceStart, sourceEnd);\n            } else {\n                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);\n            }\n        }\n        targetArray.set(sourceArray, targetStart);\n    }\n\n\n\n    var convertUtf8 = (function() {\n        function toBytes(text) {\n            var result = [], i = 0;\n            text = encodeURI(text);\n            while (i < text.length) {\n                var c = text.charCodeAt(i++);\n\n                // if it is a % sign, encode the following 2 bytes as a hex value\n                if (c === 37) {\n                    result.push(parseInt(text.substr(i, 2), 16))\n                    i += 2;\n\n                // otherwise, just the actual byte\n                } else {\n                    result.push(c)\n                }\n            }\n\n            return coerceArray(result);\n        }\n\n        function fromBytes(bytes) {\n            var result = [], i = 0;\n\n            while (i < bytes.length) {\n                var c = bytes[i];\n\n                if (c < 128) {\n                    result.push(String.fromCharCode(c));\n                    i++;\n                } else if (c > 191 && c < 224) {\n                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));\n                    i += 2;\n                } else {\n                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));\n                    i += 3;\n                }\n            }\n\n            return result.join('');\n        }\n\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes,\n        }\n    })();\n\n    var convertHex = (function() {\n        function toBytes(text) {\n            var result = [];\n            for (var i = 0; i < text.length; i += 2) {\n                result.push(parseInt(text.substr(i, 2), 16));\n            }\n\n            return result;\n        }\n\n        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html\n        var Hex = '0123456789abcdef';\n\n        function fromBytes(bytes) {\n                var result = [];\n                for (var i = 0; i < bytes.length; i++) {\n                    var v = bytes[i];\n                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);\n                }\n                return result.join('');\n        }\n\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes,\n        }\n    })();\n\n\n    // Number of rounds by keysize\n    var numberOfRounds = {16: 10, 24: 12, 32: 14}\n\n    // Round constant words\n    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];\n\n    // S-box and Inverse S-box (S is for Substitution)\n    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];\n    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];\n\n    // Transformations for encryption\n    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];\n    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];\n    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];\n    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];\n\n    // Transformations for decryption\n    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];\n    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];\n    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];\n    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];\n\n    // Transformations for decryption key expansion\n    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];\n    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];\n    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];\n    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];\n\n    function convertToInt32(bytes) {\n        var result = [];\n        for (var i = 0; i < bytes.length; i += 4) {\n            result.push(\n                (bytes[i    ] << 24) |\n                (bytes[i + 1] << 16) |\n                (bytes[i + 2] <<  8) |\n                 bytes[i + 3]\n            );\n        }\n        return result;\n    }\n\n    var AES = function(key) {\n        if (!(this instanceof AES)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        Object.defineProperty(this, 'key', {\n            value: coerceArray(key, true)\n        });\n\n        this._prepare();\n    }\n\n\n    AES.prototype._prepare = function() {\n\n        var rounds = numberOfRounds[this.key.length];\n        if (rounds == null) {\n            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');\n        }\n\n        // encryption round keys\n        this._Ke = [];\n\n        // decryption round keys\n        this._Kd = [];\n\n        for (var i = 0; i <= rounds; i++) {\n            this._Ke.push([0, 0, 0, 0]);\n            this._Kd.push([0, 0, 0, 0]);\n        }\n\n        var roundKeyCount = (rounds + 1) * 4;\n        var KC = this.key.length / 4;\n\n        // convert the key into ints\n        var tk = convertToInt32(this.key);\n\n        // copy values into round key arrays\n        var index;\n        for (var i = 0; i < KC; i++) {\n            index = i >> 2;\n            this._Ke[index][i % 4] = tk[i];\n            this._Kd[rounds - index][i % 4] = tk[i];\n        }\n\n        // key expansion (fips-197 section 5.2)\n        var rconpointer = 0;\n        var t = KC, tt;\n        while (t < roundKeyCount) {\n            tt = tk[KC - 1];\n            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^\n                      (S[(tt >>  8) & 0xFF] << 16) ^\n                      (S[ tt        & 0xFF] <<  8) ^\n                       S[(tt >> 24) & 0xFF]        ^\n                      (rcon[rconpointer] << 24));\n            rconpointer += 1;\n\n            // key expansion (for non-256 bit)\n            if (KC != 8) {\n                for (var i = 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n\n            // key expansion for 256-bit keys is \"slightly different\" (fips-197)\n            } else {\n                for (var i = 1; i < (KC / 2); i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n                tt = tk[(KC / 2) - 1];\n\n                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^\n                              (S[(tt >>  8) & 0xFF] <<  8) ^\n                              (S[(tt >> 16) & 0xFF] << 16) ^\n                              (S[(tt >> 24) & 0xFF] << 24));\n\n                for (var i = (KC / 2) + 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n            }\n\n            // copy values into round key arrays\n            var i = 0, r, c;\n            while (i < KC && t < roundKeyCount) {\n                r = t >> 2;\n                c = t % 4;\n                this._Ke[r][c] = tk[i];\n                this._Kd[rounds - r][c] = tk[i++];\n                t++;\n            }\n        }\n\n        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\n        for (var r = 1; r < rounds; r++) {\n            for (var c = 0; c < 4; c++) {\n                tt = this._Kd[r][c];\n                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^\n                                  U2[(tt >> 16) & 0xFF] ^\n                                  U3[(tt >>  8) & 0xFF] ^\n                                  U4[ tt        & 0xFF]);\n            }\n        }\n    }\n\n    AES.prototype.encrypt = function(plaintext) {\n        if (plaintext.length != 16) {\n            throw new Error('invalid plaintext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Ke.length - 1;\n        var a = [0, 0, 0, 0];\n\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(plaintext);\n        for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Ke[0][i];\n        }\n\n        // apply round transforms\n        for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^\n                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^\n                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                        T4[ t[(i + 3) % 4]        & 0xff] ^\n                        this._Ke[r][i]);\n            }\n            t = a.slice();\n        }\n\n        // the last round is special\n        var result = createArray(16), tt;\n        for (var i = 0; i < 4; i++) {\n            tt = this._Ke[rounds][i];\n            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;\n        }\n\n        return result;\n    }\n\n    AES.prototype.decrypt = function(ciphertext) {\n        if (ciphertext.length != 16) {\n            throw new Error('invalid ciphertext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Kd.length - 1;\n        var a = [0, 0, 0, 0];\n\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(ciphertext);\n        for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Kd[0][i];\n        }\n\n        // apply round transforms\n        for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^\n                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^\n                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                        T8[ t[(i + 1) % 4]        & 0xff] ^\n                        this._Kd[r][i]);\n            }\n            t = a.slice();\n        }\n\n        // the last round is special\n        var result = createArray(16), tt;\n        for (var i = 0; i < 4; i++) {\n            tt = this._Kd[rounds][i];\n            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;\n        }\n\n        return result;\n    }\n\n\n    /**\n     *  Mode Of Operation - Electonic Codebook (ECB)\n     */\n    var ModeOfOperationECB = function(key) {\n        if (!(this instanceof ModeOfOperationECB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Electronic Code Block\";\n        this.name = \"ecb\";\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationECB.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if ((plaintext.length % 16) !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n            block = this._aes.encrypt(block);\n            copyArray(block, ciphertext, i);\n        }\n\n        return ciphertext;\n    }\n\n    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if ((ciphertext.length % 16) !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n            copyArray(block, plaintext, i);\n        }\n\n        return plaintext;\n    }\n\n\n    /**\n     *  Mode Of Operation - Cipher Block Chaining (CBC)\n     */\n    var ModeOfOperationCBC = function(key, iv) {\n        if (!(this instanceof ModeOfOperationCBC)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Block Chaining\";\n        this.name = \"cbc\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastCipherblock = coerceArray(iv, true);\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if ((plaintext.length % 16) !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n\n            for (var j = 0; j < 16; j++) {\n                block[j] ^= this._lastCipherblock[j];\n            }\n\n            this._lastCipherblock = this._aes.encrypt(block);\n            copyArray(this._lastCipherblock, ciphertext, i);\n        }\n\n        return ciphertext;\n    }\n\n    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if ((ciphertext.length % 16) !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n\n            for (var j = 0; j < 16; j++) {\n                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];\n            }\n\n            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);\n        }\n\n        return plaintext;\n    }\n\n\n    /**\n     *  Mode Of Operation - Cipher Feedback (CFB)\n     */\n    var ModeOfOperationCFB = function(key, iv, segmentSize) {\n        if (!(this instanceof ModeOfOperationCFB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Feedback\";\n        this.name = \"cfb\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 size)');\n        }\n\n        if (!segmentSize) { segmentSize = 1; }\n\n        this.segmentSize = segmentSize;\n\n        this._shiftRegister = coerceArray(iv, true);\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {\n        if ((plaintext.length % this.segmentSize) != 0) {\n            throw new Error('invalid plaintext size (must be segmentSize bytes)');\n        }\n\n        var encrypted = coerceArray(plaintext, true);\n\n        var xorSegment;\n        for (var i = 0; i < encrypted.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n            for (var j = 0; j < this.segmentSize; j++) {\n                encrypted[i + j] ^= xorSegment[j];\n            }\n\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return encrypted;\n    }\n\n    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {\n        if ((ciphertext.length % this.segmentSize) != 0) {\n            throw new Error('invalid ciphertext size (must be segmentSize bytes)');\n        }\n\n        var plaintext = coerceArray(ciphertext, true);\n\n        var xorSegment;\n        for (var i = 0; i < plaintext.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n\n            for (var j = 0; j < this.segmentSize; j++) {\n                plaintext[i + j] ^= xorSegment[j];\n            }\n\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return plaintext;\n    }\n\n    /**\n     *  Mode Of Operation - Output Feedback (OFB)\n     */\n    var ModeOfOperationOFB = function(key, iv) {\n        if (!(this instanceof ModeOfOperationOFB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Output Feedback\";\n        this.name = \"ofb\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastPrecipher = coerceArray(iv, true);\n        this._lastPrecipherIndex = 16;\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n            if (this._lastPrecipherIndex === 16) {\n                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);\n                this._lastPrecipherIndex = 0;\n            }\n            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];\n        }\n\n        return encrypted;\n    }\n\n    // Decryption is symetric\n    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;\n\n\n    /**\n     *  Counter object for CTR common mode of operation\n     */\n    var Counter = function(initialValue) {\n        if (!(this instanceof Counter)) {\n            throw Error('Counter must be instanitated with `new`');\n        }\n\n        // We allow 0, but anything false-ish uses the default 1\n        if (initialValue !== 0 && !initialValue) { initialValue = 1; }\n\n        if (typeof(initialValue) === 'number') {\n            this._counter = createArray(16);\n            this.setValue(initialValue);\n\n        } else {\n            this.setBytes(initialValue);\n        }\n    }\n\n    Counter.prototype.setValue = function(value) {\n        if (typeof(value) !== 'number' || parseInt(value) != value) {\n            throw new Error('invalid counter value (must be an integer)');\n        }\n\n        // We cannot safely handle numbers beyond the safe range for integers\n        if (value > Number.MAX_SAFE_INTEGER) {\n            throw new Error('integer value out of safe range');\n        }\n\n        for (var index = 15; index >= 0; --index) {\n            this._counter[index] = value % 256;\n            value = parseInt(value / 256);\n        }\n    }\n\n    Counter.prototype.setBytes = function(bytes) {\n        bytes = coerceArray(bytes, true);\n\n        if (bytes.length != 16) {\n            throw new Error('invalid counter bytes size (must be 16 bytes)');\n        }\n\n        this._counter = bytes;\n    };\n\n    Counter.prototype.increment = function() {\n        for (var i = 15; i >= 0; i--) {\n            if (this._counter[i] === 255) {\n                this._counter[i] = 0;\n            } else {\n                this._counter[i]++;\n                break;\n            }\n        }\n    }\n\n\n    /**\n     *  Mode Of Operation - Counter (CTR)\n     */\n    var ModeOfOperationCTR = function(key, counter) {\n        if (!(this instanceof ModeOfOperationCTR)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Counter\";\n        this.name = \"ctr\";\n\n        if (!(counter instanceof Counter)) {\n            counter = new Counter(counter)\n        }\n\n        this._counter = counter;\n\n        this._remainingCounter = null;\n        this._remainingCounterIndex = 16;\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n            if (this._remainingCounterIndex === 16) {\n                this._remainingCounter = this._aes.encrypt(this._counter._counter);\n                this._remainingCounterIndex = 0;\n                this._counter.increment();\n            }\n            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];\n        }\n\n        return encrypted;\n    }\n\n    // Decryption is symetric\n    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;\n\n\n    ///////////////////////\n    // Padding\n\n    // See:https://tools.ietf.org/html/rfc2315\n    function pkcs7pad(data) {\n        data = coerceArray(data, true);\n        var padder = 16 - (data.length % 16);\n        var result = createArray(data.length + padder);\n        copyArray(data, result);\n        for (var i = data.length; i < result.length; i++) {\n            result[i] = padder;\n        }\n        return result;\n    }\n\n    function pkcs7strip(data) {\n        data = coerceArray(data, true);\n        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }\n\n        var padder = data[data.length - 1];\n        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }\n\n        var length = data.length - padder;\n        for (var i = 0; i < padder; i++) {\n            if (data[length + i] !== padder) {\n                throw new Error('PKCS#7 invalid padding byte');\n            }\n        }\n\n        var result = createArray(length);\n        copyArray(data, result, 0, 0, length);\n        return result;\n    }\n\n    ///////////////////////\n    // Exporting\n\n\n    // The block cipher\n    var aesjs = {\n        AES: AES,\n        Counter: Counter,\n\n        ModeOfOperation: {\n            ecb: ModeOfOperationECB,\n            cbc: ModeOfOperationCBC,\n            cfb: ModeOfOperationCFB,\n            ofb: ModeOfOperationOFB,\n            ctr: ModeOfOperationCTR\n        },\n\n        utils: {\n            hex: convertHex,\n            utf8: convertUtf8\n        },\n\n        padding: {\n            pkcs7: {\n                pad: pkcs7pad,\n                strip: pkcs7strip\n            }\n        },\n\n        _arrayTest: {\n            coerceArray: coerceArray,\n            createArray: createArray,\n            copyArray: copyArray,\n        }\n    };\n\n\n    // node.js\n    if (true) {\n        module.exports = aesjs\n\n    // RequireJS/AMD\n    // http://www.requirejs.org/docs/api.html\n    // https://github.com/amdjs/amdjs-api/wiki/AMD\n    } else {}\n\n\n})(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWVzLWpzL2luZGV4LmpzPzcyNDciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlDQUF5QyxjQUFjOztBQUV2RCx1QkFBdUIscUJBQXFCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGlCQUFpQjtBQUM1QztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCLGtCQUFrQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7O0FBR0w7QUFDQSwwQkFBMEI7O0FBRTFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBdUIsa0JBQWtCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsdUJBQXVCLGFBQWE7QUFDcEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQXVCLFFBQVE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCLFFBQVE7QUFDdkM7QUFDQTs7QUFFQTtBQUNBLGFBQWE7QUFDYiwrQkFBK0IsY0FBYztBQUM3QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMENBQTBDLFFBQVE7QUFDbEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUJBQXVCLFlBQVk7QUFDbkMsMkJBQTJCLE9BQU87QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBdUIsT0FBTztBQUM5QjtBQUNBOztBQUVBO0FBQ0EsdUJBQXVCLFlBQVk7QUFDbkMsMkJBQTJCLE9BQU87QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQXVCLE9BQU87QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQXVCLE9BQU87QUFDOUI7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QixZQUFZO0FBQ25DLDJCQUEyQixPQUFPO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUF1QixPQUFPO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx1QkFBdUIsdUJBQXVCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsdUJBQXVCLHNCQUFzQjtBQUM3Qzs7QUFFQSwyQkFBMkIsUUFBUTtBQUNuQztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsdUJBQXVCLHVCQUF1QjtBQUM5QztBQUNBOztBQUVBLDJCQUEyQixRQUFRO0FBQ25DO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsU0FBUztBQUNUO0FBQ0E7O0FBRUEsMkJBQTJCLGlCQUFpQjs7QUFFNUM7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQSwyQkFBMkIsc0JBQXNCO0FBQ2pEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7O0FBRUEsMkJBQTJCLHNCQUFzQjtBQUNqRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrREFBa0Qsa0JBQWtCOztBQUVwRTtBQUNBO0FBQ0E7O0FBRUEsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEIsWUFBWTtBQUN4QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsbUJBQW1CO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0IsMENBQTBDOztBQUV6RTtBQUNBLDBCQUEwQixxREFBcUQ7O0FBRS9FO0FBQ0EsdUJBQXVCLFlBQVk7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQSxRQUFRLElBQThCO0FBQ3RDOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUssTUFBTSxFQVlOOzs7QUFHTCxDQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2Flcy1qcy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qISBNSVQgTGljZW5zZS4gQ29weXJpZ2h0IDIwMTUtMjAxOCBSaWNoYXJkIE1vb3JlIDxtZUByaWNtb28uY29tPi4gU2VlIExJQ0VOU0UudHh0LiAqL1xuKGZ1bmN0aW9uKHJvb3QpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGZ1bmN0aW9uIGNoZWNrSW50KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAocGFyc2VJbnQodmFsdWUpID09PSB2YWx1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tJbnRzKGFycmF5aXNoKSB7XG4gICAgICAgIGlmICghY2hlY2tJbnQoYXJyYXlpc2gubGVuZ3RoKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5aXNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoIWNoZWNrSW50KGFycmF5aXNoW2ldKSB8fCBhcnJheWlzaFtpXSA8IDAgfHwgYXJyYXlpc2hbaV0gPiAyNTUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb2VyY2VBcnJheShhcmcsIGNvcHkpIHtcblxuICAgICAgICAvLyBBcnJheUJ1ZmZlciB2aWV3XG4gICAgICAgIGlmIChhcmcuYnVmZmVyICYmIGFyZy5uYW1lID09PSAnVWludDhBcnJheScpIHtcblxuICAgICAgICAgICAgaWYgKGNvcHkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXJnLnNsaWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZy5zbGljZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSXQncyBhbiBhcnJheTsgY2hlY2sgaXQgaXMgYSB2YWxpZCByZXByZXNlbnRhdGlvbiBvZiBhIGJ5dGVcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgaWYgKCFjaGVja0ludHMoYXJnKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQXJyYXkgY29udGFpbnMgaW52YWxpZCB2YWx1ZTogJyArIGFyZyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShhcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU29tZXRoaW5nIGVsc2UsIGJ1dCBiZWhhdmVzIGxpa2UgYW4gYXJyYXkgKG1heWJlIGEgQnVmZmVyPyBBcmd1bWVudHM/KVxuICAgICAgICBpZiAoY2hlY2tJbnQoYXJnLmxlbmd0aCkgJiYgY2hlY2tJbnRzKGFyZykpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShhcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnN1cHBvcnRlZCBhcnJheS1saWtlIG9iamVjdCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFycmF5KGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlQXJyYXksIHRhcmdldEFycmF5LCB0YXJnZXRTdGFydCwgc291cmNlU3RhcnQsIHNvdXJjZUVuZCkge1xuICAgICAgICBpZiAoc291cmNlU3RhcnQgIT0gbnVsbCB8fCBzb3VyY2VFbmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHNvdXJjZUFycmF5LnNsaWNlKSB7XG4gICAgICAgICAgICAgICAgc291cmNlQXJyYXkgPSBzb3VyY2VBcnJheS5zbGljZShzb3VyY2VTdGFydCwgc291cmNlRW5kKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc291cmNlQXJyYXkgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzb3VyY2VBcnJheSwgc291cmNlU3RhcnQsIHNvdXJjZUVuZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0QXJyYXkuc2V0KHNvdXJjZUFycmF5LCB0YXJnZXRTdGFydCk7XG4gICAgfVxuXG5cblxuICAgIHZhciBjb252ZXJ0VXRmOCA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgZnVuY3Rpb24gdG9CeXRlcyh0ZXh0KSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW10sIGkgPSAwO1xuICAgICAgICAgICAgdGV4dCA9IGVuY29kZVVSSSh0ZXh0KTtcbiAgICAgICAgICAgIHdoaWxlIChpIDwgdGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYyA9IHRleHQuY2hhckNvZGVBdChpKyspO1xuXG4gICAgICAgICAgICAgICAgLy8gaWYgaXQgaXMgYSAlIHNpZ24sIGVuY29kZSB0aGUgZm9sbG93aW5nIDIgYnl0ZXMgYXMgYSBoZXggdmFsdWVcbiAgICAgICAgICAgICAgICBpZiAoYyA9PT0gMzcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocGFyc2VJbnQodGV4dC5zdWJzdHIoaSwgMiksIDE2KSlcbiAgICAgICAgICAgICAgICAgICAgaSArPSAyO1xuXG4gICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlLCBqdXN0IHRoZSBhY3R1YWwgYnl0ZVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGMpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY29lcmNlQXJyYXkocmVzdWx0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGZyb21CeXRlcyhieXRlcykge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdLCBpID0gMDtcblxuICAgICAgICAgICAgd2hpbGUgKGkgPCBieXRlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYyA9IGJ5dGVzW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKGMgPCAxMjgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjKSk7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMgPiAxOTEgJiYgYyA8IDIyNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYyAmIDB4MWYpIDw8IDYpIHwgKGJ5dGVzW2kgKyAxXSAmIDB4M2YpKSk7XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYyAmIDB4MGYpIDw8IDEyKSB8ICgoYnl0ZXNbaSArIDFdICYgMHgzZikgPDwgNikgfCAoYnl0ZXNbaSArIDJdICYgMHgzZikpKTtcbiAgICAgICAgICAgICAgICAgICAgaSArPSAzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKCcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b0J5dGVzOiB0b0J5dGVzLFxuICAgICAgICAgICAgZnJvbUJ5dGVzOiBmcm9tQnl0ZXMsXG4gICAgICAgIH1cbiAgICB9KSgpO1xuXG4gICAgdmFyIGNvbnZlcnRIZXggPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgIGZ1bmN0aW9uIHRvQnl0ZXModGV4dCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocGFyc2VJbnQodGV4dC5zdWJzdHIoaSwgMiksIDE2KSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBodHRwOi8vaXh0aS5uZXQvZGV2ZWxvcG1lbnQvamF2YXNjcmlwdC8yMDExLzExLzExL2Jhc2U2NC1lbmNvZGVkZWNvZGUtb2YtdXRmOC1pbi1icm93c2VyLXdpdGgtanMuaHRtbFxuICAgICAgICB2YXIgSGV4ID0gJzAxMjM0NTY3ODlhYmNkZWYnO1xuXG4gICAgICAgIGZ1bmN0aW9uIGZyb21CeXRlcyhieXRlcykge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2ID0gYnl0ZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKEhleFsodiAmIDB4ZjApID4+IDRdICsgSGV4W3YgJiAweDBmXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG9CeXRlczogdG9CeXRlcyxcbiAgICAgICAgICAgIGZyb21CeXRlczogZnJvbUJ5dGVzLFxuICAgICAgICB9XG4gICAgfSkoKTtcblxuXG4gICAgLy8gTnVtYmVyIG9mIHJvdW5kcyBieSBrZXlzaXplXG4gICAgdmFyIG51bWJlck9mUm91bmRzID0gezE2OiAxMCwgMjQ6IDEyLCAzMjogMTR9XG5cbiAgICAvLyBSb3VuZCBjb25zdGFudCB3b3Jkc1xuICAgIHZhciByY29uID0gWzB4MDEsIDB4MDIsIDB4MDQsIDB4MDgsIDB4MTAsIDB4MjAsIDB4NDAsIDB4ODAsIDB4MWIsIDB4MzYsIDB4NmMsIDB4ZDgsIDB4YWIsIDB4NGQsIDB4OWEsIDB4MmYsIDB4NWUsIDB4YmMsIDB4NjMsIDB4YzYsIDB4OTcsIDB4MzUsIDB4NmEsIDB4ZDQsIDB4YjMsIDB4N2QsIDB4ZmEsIDB4ZWYsIDB4YzUsIDB4OTFdO1xuXG4gICAgLy8gUy1ib3ggYW5kIEludmVyc2UgUy1ib3ggKFMgaXMgZm9yIFN1YnN0aXR1dGlvbilcbiAgICB2YXIgUyA9IFsweDYzLCAweDdjLCAweDc3LCAweDdiLCAweGYyLCAweDZiLCAweDZmLCAweGM1LCAweDMwLCAweDAxLCAweDY3LCAweDJiLCAweGZlLCAweGQ3LCAweGFiLCAweDc2LCAweGNhLCAweDgyLCAweGM5LCAweDdkLCAweGZhLCAweDU5LCAweDQ3LCAweGYwLCAweGFkLCAweGQ0LCAweGEyLCAweGFmLCAweDljLCAweGE0LCAweDcyLCAweGMwLCAweGI3LCAweGZkLCAweDkzLCAweDI2LCAweDM2LCAweDNmLCAweGY3LCAweGNjLCAweDM0LCAweGE1LCAweGU1LCAweGYxLCAweDcxLCAweGQ4LCAweDMxLCAweDE1LCAweDA0LCAweGM3LCAweDIzLCAweGMzLCAweDE4LCAweDk2LCAweDA1LCAweDlhLCAweDA3LCAweDEyLCAweDgwLCAweGUyLCAweGViLCAweDI3LCAweGIyLCAweDc1LCAweDA5LCAweDgzLCAweDJjLCAweDFhLCAweDFiLCAweDZlLCAweDVhLCAweGEwLCAweDUyLCAweDNiLCAweGQ2LCAweGIzLCAweDI5LCAweGUzLCAweDJmLCAweDg0LCAweDUzLCAweGQxLCAweDAwLCAweGVkLCAweDIwLCAweGZjLCAweGIxLCAweDViLCAweDZhLCAweGNiLCAweGJlLCAweDM5LCAweDRhLCAweDRjLCAweDU4LCAweGNmLCAweGQwLCAweGVmLCAweGFhLCAweGZiLCAweDQzLCAweDRkLCAweDMzLCAweDg1LCAweDQ1LCAweGY5LCAweDAyLCAweDdmLCAweDUwLCAweDNjLCAweDlmLCAweGE4LCAweDUxLCAweGEzLCAweDQwLCAweDhmLCAweDkyLCAweDlkLCAweDM4LCAweGY1LCAweGJjLCAweGI2LCAweGRhLCAweDIxLCAweDEwLCAweGZmLCAweGYzLCAweGQyLCAweGNkLCAweDBjLCAweDEzLCAweGVjLCAweDVmLCAweDk3LCAweDQ0LCAweDE3LCAweGM0LCAweGE3LCAweDdlLCAweDNkLCAweDY0LCAweDVkLCAweDE5LCAweDczLCAweDYwLCAweDgxLCAweDRmLCAweGRjLCAweDIyLCAweDJhLCAweDkwLCAweDg4LCAweDQ2LCAweGVlLCAweGI4LCAweDE0LCAweGRlLCAweDVlLCAweDBiLCAweGRiLCAweGUwLCAweDMyLCAweDNhLCAweDBhLCAweDQ5LCAweDA2LCAweDI0LCAweDVjLCAweGMyLCAweGQzLCAweGFjLCAweDYyLCAweDkxLCAweDk1LCAweGU0LCAweDc5LCAweGU3LCAweGM4LCAweDM3LCAweDZkLCAweDhkLCAweGQ1LCAweDRlLCAweGE5LCAweDZjLCAweDU2LCAweGY0LCAweGVhLCAweDY1LCAweDdhLCAweGFlLCAweDA4LCAweGJhLCAweDc4LCAweDI1LCAweDJlLCAweDFjLCAweGE2LCAweGI0LCAweGM2LCAweGU4LCAweGRkLCAweDc0LCAweDFmLCAweDRiLCAweGJkLCAweDhiLCAweDhhLCAweDcwLCAweDNlLCAweGI1LCAweDY2LCAweDQ4LCAweDAzLCAweGY2LCAweDBlLCAweDYxLCAweDM1LCAweDU3LCAweGI5LCAweDg2LCAweGMxLCAweDFkLCAweDllLCAweGUxLCAweGY4LCAweDk4LCAweDExLCAweDY5LCAweGQ5LCAweDhlLCAweDk0LCAweDliLCAweDFlLCAweDg3LCAweGU5LCAweGNlLCAweDU1LCAweDI4LCAweGRmLCAweDhjLCAweGExLCAweDg5LCAweDBkLCAweGJmLCAweGU2LCAweDQyLCAweDY4LCAweDQxLCAweDk5LCAweDJkLCAweDBmLCAweGIwLCAweDU0LCAweGJiLCAweDE2XTtcbiAgICB2YXIgU2kgPVsweDUyLCAweDA5LCAweDZhLCAweGQ1LCAweDMwLCAweDM2LCAweGE1LCAweDM4LCAweGJmLCAweDQwLCAweGEzLCAweDllLCAweDgxLCAweGYzLCAweGQ3LCAweGZiLCAweDdjLCAweGUzLCAweDM5LCAweDgyLCAweDliLCAweDJmLCAweGZmLCAweDg3LCAweDM0LCAweDhlLCAweDQzLCAweDQ0LCAweGM0LCAweGRlLCAweGU5LCAweGNiLCAweDU0LCAweDdiLCAweDk0LCAweDMyLCAweGE2LCAweGMyLCAweDIzLCAweDNkLCAweGVlLCAweDRjLCAweDk1LCAweDBiLCAweDQyLCAweGZhLCAweGMzLCAweDRlLCAweDA4LCAweDJlLCAweGExLCAweDY2LCAweDI4LCAweGQ5LCAweDI0LCAweGIyLCAweDc2LCAweDViLCAweGEyLCAweDQ5LCAweDZkLCAweDhiLCAweGQxLCAweDI1LCAweDcyLCAweGY4LCAweGY2LCAweDY0LCAweDg2LCAweDY4LCAweDk4LCAweDE2LCAweGQ0LCAweGE0LCAweDVjLCAweGNjLCAweDVkLCAweDY1LCAweGI2LCAweDkyLCAweDZjLCAweDcwLCAweDQ4LCAweDUwLCAweGZkLCAweGVkLCAweGI5LCAweGRhLCAweDVlLCAweDE1LCAweDQ2LCAweDU3LCAweGE3LCAweDhkLCAweDlkLCAweDg0LCAweDkwLCAweGQ4LCAweGFiLCAweDAwLCAweDhjLCAweGJjLCAweGQzLCAweDBhLCAweGY3LCAweGU0LCAweDU4LCAweDA1LCAweGI4LCAweGIzLCAweDQ1LCAweDA2LCAweGQwLCAweDJjLCAweDFlLCAweDhmLCAweGNhLCAweDNmLCAweDBmLCAweDAyLCAweGMxLCAweGFmLCAweGJkLCAweDAzLCAweDAxLCAweDEzLCAweDhhLCAweDZiLCAweDNhLCAweDkxLCAweDExLCAweDQxLCAweDRmLCAweDY3LCAweGRjLCAweGVhLCAweDk3LCAweGYyLCAweGNmLCAweGNlLCAweGYwLCAweGI0LCAweGU2LCAweDczLCAweDk2LCAweGFjLCAweDc0LCAweDIyLCAweGU3LCAweGFkLCAweDM1LCAweDg1LCAweGUyLCAweGY5LCAweDM3LCAweGU4LCAweDFjLCAweDc1LCAweGRmLCAweDZlLCAweDQ3LCAweGYxLCAweDFhLCAweDcxLCAweDFkLCAweDI5LCAweGM1LCAweDg5LCAweDZmLCAweGI3LCAweDYyLCAweDBlLCAweGFhLCAweDE4LCAweGJlLCAweDFiLCAweGZjLCAweDU2LCAweDNlLCAweDRiLCAweGM2LCAweGQyLCAweDc5LCAweDIwLCAweDlhLCAweGRiLCAweGMwLCAweGZlLCAweDc4LCAweGNkLCAweDVhLCAweGY0LCAweDFmLCAweGRkLCAweGE4LCAweDMzLCAweDg4LCAweDA3LCAweGM3LCAweDMxLCAweGIxLCAweDEyLCAweDEwLCAweDU5LCAweDI3LCAweDgwLCAweGVjLCAweDVmLCAweDYwLCAweDUxLCAweDdmLCAweGE5LCAweDE5LCAweGI1LCAweDRhLCAweDBkLCAweDJkLCAweGU1LCAweDdhLCAweDlmLCAweDkzLCAweGM5LCAweDljLCAweGVmLCAweGEwLCAweGUwLCAweDNiLCAweDRkLCAweGFlLCAweDJhLCAweGY1LCAweGIwLCAweGM4LCAweGViLCAweGJiLCAweDNjLCAweDgzLCAweDUzLCAweDk5LCAweDYxLCAweDE3LCAweDJiLCAweDA0LCAweDdlLCAweGJhLCAweDc3LCAweGQ2LCAweDI2LCAweGUxLCAweDY5LCAweDE0LCAweDYzLCAweDU1LCAweDIxLCAweDBjLCAweDdkXTtcblxuICAgIC8vIFRyYW5zZm9ybWF0aW9ucyBmb3IgZW5jcnlwdGlvblxuICAgIHZhciBUMSA9IFsweGM2NjM2M2E1LCAweGY4N2M3Yzg0LCAweGVlNzc3Nzk5LCAweGY2N2I3YjhkLCAweGZmZjJmMjBkLCAweGQ2NmI2YmJkLCAweGRlNmY2ZmIxLCAweDkxYzVjNTU0LCAweDYwMzAzMDUwLCAweDAyMDEwMTAzLCAweGNlNjc2N2E5LCAweDU2MmIyYjdkLCAweGU3ZmVmZTE5LCAweGI1ZDdkNzYyLCAweDRkYWJhYmU2LCAweGVjNzY3NjlhLCAweDhmY2FjYTQ1LCAweDFmODI4MjlkLCAweDg5YzljOTQwLCAweGZhN2Q3ZDg3LCAweGVmZmFmYTE1LCAweGIyNTk1OWViLCAweDhlNDc0N2M5LCAweGZiZjBmMDBiLCAweDQxYWRhZGVjLCAweGIzZDRkNDY3LCAweDVmYTJhMmZkLCAweDQ1YWZhZmVhLCAweDIzOWM5Y2JmLCAweDUzYTRhNGY3LCAweGU0NzI3Mjk2LCAweDliYzBjMDViLCAweDc1YjdiN2MyLCAweGUxZmRmZDFjLCAweDNkOTM5M2FlLCAweDRjMjYyNjZhLCAweDZjMzYzNjVhLCAweDdlM2YzZjQxLCAweGY1ZjdmNzAyLCAweDgzY2NjYzRmLCAweDY4MzQzNDVjLCAweDUxYTVhNWY0LCAweGQxZTVlNTM0LCAweGY5ZjFmMTA4LCAweGUyNzE3MTkzLCAweGFiZDhkODczLCAweDYyMzEzMTUzLCAweDJhMTUxNTNmLCAweDA4MDQwNDBjLCAweDk1YzdjNzUyLCAweDQ2MjMyMzY1LCAweDlkYzNjMzVlLCAweDMwMTgxODI4LCAweDM3OTY5NmExLCAweDBhMDUwNTBmLCAweDJmOWE5YWI1LCAweDBlMDcwNzA5LCAweDI0MTIxMjM2LCAweDFiODA4MDliLCAweGRmZTJlMjNkLCAweGNkZWJlYjI2LCAweDRlMjcyNzY5LCAweDdmYjJiMmNkLCAweGVhNzU3NTlmLCAweDEyMDkwOTFiLCAweDFkODM4MzllLCAweDU4MmMyYzc0LCAweDM0MWExYTJlLCAweDM2MWIxYjJkLCAweGRjNmU2ZWIyLCAweGI0NWE1YWVlLCAweDViYTBhMGZiLCAweGE0NTI1MmY2LCAweDc2M2IzYjRkLCAweGI3ZDZkNjYxLCAweDdkYjNiM2NlLCAweDUyMjkyOTdiLCAweGRkZTNlMzNlLCAweDVlMmYyZjcxLCAweDEzODQ4NDk3LCAweGE2NTM1M2Y1LCAweGI5ZDFkMTY4LCAweDAwMDAwMDAwLCAweGMxZWRlZDJjLCAweDQwMjAyMDYwLCAweGUzZmNmYzFmLCAweDc5YjFiMWM4LCAweGI2NWI1YmVkLCAweGQ0NmE2YWJlLCAweDhkY2JjYjQ2LCAweDY3YmViZWQ5LCAweDcyMzkzOTRiLCAweDk0NGE0YWRlLCAweDk4NGM0Y2Q0LCAweGIwNTg1OGU4LCAweDg1Y2ZjZjRhLCAweGJiZDBkMDZiLCAweGM1ZWZlZjJhLCAweDRmYWFhYWU1LCAweGVkZmJmYjE2LCAweDg2NDM0M2M1LCAweDlhNGQ0ZGQ3LCAweDY2MzMzMzU1LCAweDExODU4NTk0LCAweDhhNDU0NWNmLCAweGU5ZjlmOTEwLCAweDA0MDIwMjA2LCAweGZlN2Y3ZjgxLCAweGEwNTA1MGYwLCAweDc4M2MzYzQ0LCAweDI1OWY5ZmJhLCAweDRiYThhOGUzLCAweGEyNTE1MWYzLCAweDVkYTNhM2ZlLCAweDgwNDA0MGMwLCAweDA1OGY4ZjhhLCAweDNmOTI5MmFkLCAweDIxOWQ5ZGJjLCAweDcwMzgzODQ4LCAweGYxZjVmNTA0LCAweDYzYmNiY2RmLCAweDc3YjZiNmMxLCAweGFmZGFkYTc1LCAweDQyMjEyMTYzLCAweDIwMTAxMDMwLCAweGU1ZmZmZjFhLCAweGZkZjNmMzBlLCAweGJmZDJkMjZkLCAweDgxY2RjZDRjLCAweDE4MGMwYzE0LCAweDI2MTMxMzM1LCAweGMzZWNlYzJmLCAweGJlNWY1ZmUxLCAweDM1OTc5N2EyLCAweDg4NDQ0NGNjLCAweDJlMTcxNzM5LCAweDkzYzRjNDU3LCAweDU1YTdhN2YyLCAweGZjN2U3ZTgyLCAweDdhM2QzZDQ3LCAweGM4NjQ2NGFjLCAweGJhNWQ1ZGU3LCAweDMyMTkxOTJiLCAweGU2NzM3Mzk1LCAweGMwNjA2MGEwLCAweDE5ODE4MTk4LCAweDllNGY0ZmQxLCAweGEzZGNkYzdmLCAweDQ0MjIyMjY2LCAweDU0MmEyYTdlLCAweDNiOTA5MGFiLCAweDBiODg4ODgzLCAweDhjNDY0NmNhLCAweGM3ZWVlZTI5LCAweDZiYjhiOGQzLCAweDI4MTQxNDNjLCAweGE3ZGVkZTc5LCAweGJjNWU1ZWUyLCAweDE2MGIwYjFkLCAweGFkZGJkYjc2LCAweGRiZTBlMDNiLCAweDY0MzIzMjU2LCAweDc0M2EzYTRlLCAweDE0MGEwYTFlLCAweDkyNDk0OWRiLCAweDBjMDYwNjBhLCAweDQ4MjQyNDZjLCAweGI4NWM1Y2U0LCAweDlmYzJjMjVkLCAweGJkZDNkMzZlLCAweDQzYWNhY2VmLCAweGM0NjI2MmE2LCAweDM5OTE5MWE4LCAweDMxOTU5NWE0LCAweGQzZTRlNDM3LCAweGYyNzk3OThiLCAweGQ1ZTdlNzMyLCAweDhiYzhjODQzLCAweDZlMzczNzU5LCAweGRhNmQ2ZGI3LCAweDAxOGQ4ZDhjLCAweGIxZDVkNTY0LCAweDljNGU0ZWQyLCAweDQ5YTlhOWUwLCAweGQ4NmM2Y2I0LCAweGFjNTY1NmZhLCAweGYzZjRmNDA3LCAweGNmZWFlYTI1LCAweGNhNjU2NWFmLCAweGY0N2E3YThlLCAweDQ3YWVhZWU5LCAweDEwMDgwODE4LCAweDZmYmFiYWQ1LCAweGYwNzg3ODg4LCAweDRhMjUyNTZmLCAweDVjMmUyZTcyLCAweDM4MWMxYzI0LCAweDU3YTZhNmYxLCAweDczYjRiNGM3LCAweDk3YzZjNjUxLCAweGNiZThlODIzLCAweGExZGRkZDdjLCAweGU4NzQ3NDljLCAweDNlMWYxZjIxLCAweDk2NGI0YmRkLCAweDYxYmRiZGRjLCAweDBkOGI4Yjg2LCAweDBmOGE4YTg1LCAweGUwNzA3MDkwLCAweDdjM2UzZTQyLCAweDcxYjViNWM0LCAweGNjNjY2NmFhLCAweDkwNDg0OGQ4LCAweDA2MDMwMzA1LCAweGY3ZjZmNjAxLCAweDFjMGUwZTEyLCAweGMyNjE2MWEzLCAweDZhMzUzNTVmLCAweGFlNTc1N2Y5LCAweDY5YjliOWQwLCAweDE3ODY4NjkxLCAweDk5YzFjMTU4LCAweDNhMWQxZDI3LCAweDI3OWU5ZWI5LCAweGQ5ZTFlMTM4LCAweGViZjhmODEzLCAweDJiOTg5OGIzLCAweDIyMTExMTMzLCAweGQyNjk2OWJiLCAweGE5ZDlkOTcwLCAweDA3OGU4ZTg5LCAweDMzOTQ5NGE3LCAweDJkOWI5YmI2LCAweDNjMWUxZTIyLCAweDE1ODc4NzkyLCAweGM5ZTllOTIwLCAweDg3Y2VjZTQ5LCAweGFhNTU1NWZmLCAweDUwMjgyODc4LCAweGE1ZGZkZjdhLCAweDAzOGM4YzhmLCAweDU5YTFhMWY4LCAweDA5ODk4OTgwLCAweDFhMGQwZDE3LCAweDY1YmZiZmRhLCAweGQ3ZTZlNjMxLCAweDg0NDI0MmM2LCAweGQwNjg2OGI4LCAweDgyNDE0MWMzLCAweDI5OTk5OWIwLCAweDVhMmQyZDc3LCAweDFlMGYwZjExLCAweDdiYjBiMGNiLCAweGE4NTQ1NGZjLCAweDZkYmJiYmQ2LCAweDJjMTYxNjNhXTtcbiAgICB2YXIgVDIgPSBbMHhhNWM2NjM2MywgMHg4NGY4N2M3YywgMHg5OWVlNzc3NywgMHg4ZGY2N2I3YiwgMHgwZGZmZjJmMiwgMHhiZGQ2NmI2YiwgMHhiMWRlNmY2ZiwgMHg1NDkxYzVjNSwgMHg1MDYwMzAzMCwgMHgwMzAyMDEwMSwgMHhhOWNlNjc2NywgMHg3ZDU2MmIyYiwgMHgxOWU3ZmVmZSwgMHg2MmI1ZDdkNywgMHhlNjRkYWJhYiwgMHg5YWVjNzY3NiwgMHg0NThmY2FjYSwgMHg5ZDFmODI4MiwgMHg0MDg5YzljOSwgMHg4N2ZhN2Q3ZCwgMHgxNWVmZmFmYSwgMHhlYmIyNTk1OSwgMHhjOThlNDc0NywgMHgwYmZiZjBmMCwgMHhlYzQxYWRhZCwgMHg2N2IzZDRkNCwgMHhmZDVmYTJhMiwgMHhlYTQ1YWZhZiwgMHhiZjIzOWM5YywgMHhmNzUzYTRhNCwgMHg5NmU0NzI3MiwgMHg1YjliYzBjMCwgMHhjMjc1YjdiNywgMHgxY2UxZmRmZCwgMHhhZTNkOTM5MywgMHg2YTRjMjYyNiwgMHg1YTZjMzYzNiwgMHg0MTdlM2YzZiwgMHgwMmY1ZjdmNywgMHg0ZjgzY2NjYywgMHg1YzY4MzQzNCwgMHhmNDUxYTVhNSwgMHgzNGQxZTVlNSwgMHgwOGY5ZjFmMSwgMHg5M2UyNzE3MSwgMHg3M2FiZDhkOCwgMHg1MzYyMzEzMSwgMHgzZjJhMTUxNSwgMHgwYzA4MDQwNCwgMHg1Mjk1YzdjNywgMHg2NTQ2MjMyMywgMHg1ZTlkYzNjMywgMHgyODMwMTgxOCwgMHhhMTM3OTY5NiwgMHgwZjBhMDUwNSwgMHhiNTJmOWE5YSwgMHgwOTBlMDcwNywgMHgzNjI0MTIxMiwgMHg5YjFiODA4MCwgMHgzZGRmZTJlMiwgMHgyNmNkZWJlYiwgMHg2OTRlMjcyNywgMHhjZDdmYjJiMiwgMHg5ZmVhNzU3NSwgMHgxYjEyMDkwOSwgMHg5ZTFkODM4MywgMHg3NDU4MmMyYywgMHgyZTM0MWExYSwgMHgyZDM2MWIxYiwgMHhiMmRjNmU2ZSwgMHhlZWI0NWE1YSwgMHhmYjViYTBhMCwgMHhmNmE0NTI1MiwgMHg0ZDc2M2IzYiwgMHg2MWI3ZDZkNiwgMHhjZTdkYjNiMywgMHg3YjUyMjkyOSwgMHgzZWRkZTNlMywgMHg3MTVlMmYyZiwgMHg5NzEzODQ4NCwgMHhmNWE2NTM1MywgMHg2OGI5ZDFkMSwgMHgwMDAwMDAwMCwgMHgyY2MxZWRlZCwgMHg2MDQwMjAyMCwgMHgxZmUzZmNmYywgMHhjODc5YjFiMSwgMHhlZGI2NWI1YiwgMHhiZWQ0NmE2YSwgMHg0NjhkY2JjYiwgMHhkOTY3YmViZSwgMHg0YjcyMzkzOSwgMHhkZTk0NGE0YSwgMHhkNDk4NGM0YywgMHhlOGIwNTg1OCwgMHg0YTg1Y2ZjZiwgMHg2YmJiZDBkMCwgMHgyYWM1ZWZlZiwgMHhlNTRmYWFhYSwgMHgxNmVkZmJmYiwgMHhjNTg2NDM0MywgMHhkNzlhNGQ0ZCwgMHg1NTY2MzMzMywgMHg5NDExODU4NSwgMHhjZjhhNDU0NSwgMHgxMGU5ZjlmOSwgMHgwNjA0MDIwMiwgMHg4MWZlN2Y3ZiwgMHhmMGEwNTA1MCwgMHg0NDc4M2MzYywgMHhiYTI1OWY5ZiwgMHhlMzRiYThhOCwgMHhmM2EyNTE1MSwgMHhmZTVkYTNhMywgMHhjMDgwNDA0MCwgMHg4YTA1OGY4ZiwgMHhhZDNmOTI5MiwgMHhiYzIxOWQ5ZCwgMHg0ODcwMzgzOCwgMHgwNGYxZjVmNSwgMHhkZjYzYmNiYywgMHhjMTc3YjZiNiwgMHg3NWFmZGFkYSwgMHg2MzQyMjEyMSwgMHgzMDIwMTAxMCwgMHgxYWU1ZmZmZiwgMHgwZWZkZjNmMywgMHg2ZGJmZDJkMiwgMHg0YzgxY2RjZCwgMHgxNDE4MGMwYywgMHgzNTI2MTMxMywgMHgyZmMzZWNlYywgMHhlMWJlNWY1ZiwgMHhhMjM1OTc5NywgMHhjYzg4NDQ0NCwgMHgzOTJlMTcxNywgMHg1NzkzYzRjNCwgMHhmMjU1YTdhNywgMHg4MmZjN2U3ZSwgMHg0NzdhM2QzZCwgMHhhY2M4NjQ2NCwgMHhlN2JhNWQ1ZCwgMHgyYjMyMTkxOSwgMHg5NWU2NzM3MywgMHhhMGMwNjA2MCwgMHg5ODE5ODE4MSwgMHhkMTllNGY0ZiwgMHg3ZmEzZGNkYywgMHg2NjQ0MjIyMiwgMHg3ZTU0MmEyYSwgMHhhYjNiOTA5MCwgMHg4MzBiODg4OCwgMHhjYThjNDY0NiwgMHgyOWM3ZWVlZSwgMHhkMzZiYjhiOCwgMHgzYzI4MTQxNCwgMHg3OWE3ZGVkZSwgMHhlMmJjNWU1ZSwgMHgxZDE2MGIwYiwgMHg3NmFkZGJkYiwgMHgzYmRiZTBlMCwgMHg1NjY0MzIzMiwgMHg0ZTc0M2EzYSwgMHgxZTE0MGEwYSwgMHhkYjkyNDk0OSwgMHgwYTBjMDYwNiwgMHg2YzQ4MjQyNCwgMHhlNGI4NWM1YywgMHg1ZDlmYzJjMiwgMHg2ZWJkZDNkMywgMHhlZjQzYWNhYywgMHhhNmM0NjI2MiwgMHhhODM5OTE5MSwgMHhhNDMxOTU5NSwgMHgzN2QzZTRlNCwgMHg4YmYyNzk3OSwgMHgzMmQ1ZTdlNywgMHg0MzhiYzhjOCwgMHg1OTZlMzczNywgMHhiN2RhNmQ2ZCwgMHg4YzAxOGQ4ZCwgMHg2NGIxZDVkNSwgMHhkMjljNGU0ZSwgMHhlMDQ5YTlhOSwgMHhiNGQ4NmM2YywgMHhmYWFjNTY1NiwgMHgwN2YzZjRmNCwgMHgyNWNmZWFlYSwgMHhhZmNhNjU2NSwgMHg4ZWY0N2E3YSwgMHhlOTQ3YWVhZSwgMHgxODEwMDgwOCwgMHhkNTZmYmFiYSwgMHg4OGYwNzg3OCwgMHg2ZjRhMjUyNSwgMHg3MjVjMmUyZSwgMHgyNDM4MWMxYywgMHhmMTU3YTZhNiwgMHhjNzczYjRiNCwgMHg1MTk3YzZjNiwgMHgyM2NiZThlOCwgMHg3Y2ExZGRkZCwgMHg5Y2U4NzQ3NCwgMHgyMTNlMWYxZiwgMHhkZDk2NGI0YiwgMHhkYzYxYmRiZCwgMHg4NjBkOGI4YiwgMHg4NTBmOGE4YSwgMHg5MGUwNzA3MCwgMHg0MjdjM2UzZSwgMHhjNDcxYjViNSwgMHhhYWNjNjY2NiwgMHhkODkwNDg0OCwgMHgwNTA2MDMwMywgMHgwMWY3ZjZmNiwgMHgxMjFjMGUwZSwgMHhhM2MyNjE2MSwgMHg1ZjZhMzUzNSwgMHhmOWFlNTc1NywgMHhkMDY5YjliOSwgMHg5MTE3ODY4NiwgMHg1ODk5YzFjMSwgMHgyNzNhMWQxZCwgMHhiOTI3OWU5ZSwgMHgzOGQ5ZTFlMSwgMHgxM2ViZjhmOCwgMHhiMzJiOTg5OCwgMHgzMzIyMTExMSwgMHhiYmQyNjk2OSwgMHg3MGE5ZDlkOSwgMHg4OTA3OGU4ZSwgMHhhNzMzOTQ5NCwgMHhiNjJkOWI5YiwgMHgyMjNjMWUxZSwgMHg5MjE1ODc4NywgMHgyMGM5ZTllOSwgMHg0OTg3Y2VjZSwgMHhmZmFhNTU1NSwgMHg3ODUwMjgyOCwgMHg3YWE1ZGZkZiwgMHg4ZjAzOGM4YywgMHhmODU5YTFhMSwgMHg4MDA5ODk4OSwgMHgxNzFhMGQwZCwgMHhkYTY1YmZiZiwgMHgzMWQ3ZTZlNiwgMHhjNjg0NDI0MiwgMHhiOGQwNjg2OCwgMHhjMzgyNDE0MSwgMHhiMDI5OTk5OSwgMHg3NzVhMmQyZCwgMHgxMTFlMGYwZiwgMHhjYjdiYjBiMCwgMHhmY2E4NTQ1NCwgMHhkNjZkYmJiYiwgMHgzYTJjMTYxNl07XG4gICAgdmFyIFQzID0gWzB4NjNhNWM2NjMsIDB4N2M4NGY4N2MsIDB4Nzc5OWVlNzcsIDB4N2I4ZGY2N2IsIDB4ZjIwZGZmZjIsIDB4NmJiZGQ2NmIsIDB4NmZiMWRlNmYsIDB4YzU1NDkxYzUsIDB4MzA1MDYwMzAsIDB4MDEwMzAyMDEsIDB4NjdhOWNlNjcsIDB4MmI3ZDU2MmIsIDB4ZmUxOWU3ZmUsIDB4ZDc2MmI1ZDcsIDB4YWJlNjRkYWIsIDB4NzY5YWVjNzYsIDB4Y2E0NThmY2EsIDB4ODI5ZDFmODIsIDB4Yzk0MDg5YzksIDB4N2Q4N2ZhN2QsIDB4ZmExNWVmZmEsIDB4NTllYmIyNTksIDB4NDdjOThlNDcsIDB4ZjAwYmZiZjAsIDB4YWRlYzQxYWQsIDB4ZDQ2N2IzZDQsIDB4YTJmZDVmYTIsIDB4YWZlYTQ1YWYsIDB4OWNiZjIzOWMsIDB4YTRmNzUzYTQsIDB4NzI5NmU0NzIsIDB4YzA1YjliYzAsIDB4YjdjMjc1YjcsIDB4ZmQxY2UxZmQsIDB4OTNhZTNkOTMsIDB4MjY2YTRjMjYsIDB4MzY1YTZjMzYsIDB4M2Y0MTdlM2YsIDB4ZjcwMmY1ZjcsIDB4Y2M0ZjgzY2MsIDB4MzQ1YzY4MzQsIDB4YTVmNDUxYTUsIDB4ZTUzNGQxZTUsIDB4ZjEwOGY5ZjEsIDB4NzE5M2UyNzEsIDB4ZDg3M2FiZDgsIDB4MzE1MzYyMzEsIDB4MTUzZjJhMTUsIDB4MDQwYzA4MDQsIDB4Yzc1Mjk1YzcsIDB4MjM2NTQ2MjMsIDB4YzM1ZTlkYzMsIDB4MTgyODMwMTgsIDB4OTZhMTM3OTYsIDB4MDUwZjBhMDUsIDB4OWFiNTJmOWEsIDB4MDcwOTBlMDcsIDB4MTIzNjI0MTIsIDB4ODA5YjFiODAsIDB4ZTIzZGRmZTIsIDB4ZWIyNmNkZWIsIDB4Mjc2OTRlMjcsIDB4YjJjZDdmYjIsIDB4NzU5ZmVhNzUsIDB4MDkxYjEyMDksIDB4ODM5ZTFkODMsIDB4MmM3NDU4MmMsIDB4MWEyZTM0MWEsIDB4MWIyZDM2MWIsIDB4NmViMmRjNmUsIDB4NWFlZWI0NWEsIDB4YTBmYjViYTAsIDB4NTJmNmE0NTIsIDB4M2I0ZDc2M2IsIDB4ZDY2MWI3ZDYsIDB4YjNjZTdkYjMsIDB4Mjk3YjUyMjksIDB4ZTMzZWRkZTMsIDB4MmY3MTVlMmYsIDB4ODQ5NzEzODQsIDB4NTNmNWE2NTMsIDB4ZDE2OGI5ZDEsIDB4MDAwMDAwMDAsIDB4ZWQyY2MxZWQsIDB4MjA2MDQwMjAsIDB4ZmMxZmUzZmMsIDB4YjFjODc5YjEsIDB4NWJlZGI2NWIsIDB4NmFiZWQ0NmEsIDB4Y2I0NjhkY2IsIDB4YmVkOTY3YmUsIDB4Mzk0YjcyMzksIDB4NGFkZTk0NGEsIDB4NGNkNDk4NGMsIDB4NThlOGIwNTgsIDB4Y2Y0YTg1Y2YsIDB4ZDA2YmJiZDAsIDB4ZWYyYWM1ZWYsIDB4YWFlNTRmYWEsIDB4ZmIxNmVkZmIsIDB4NDNjNTg2NDMsIDB4NGRkNzlhNGQsIDB4MzM1NTY2MzMsIDB4ODU5NDExODUsIDB4NDVjZjhhNDUsIDB4ZjkxMGU5ZjksIDB4MDIwNjA0MDIsIDB4N2Y4MWZlN2YsIDB4NTBmMGEwNTAsIDB4M2M0NDc4M2MsIDB4OWZiYTI1OWYsIDB4YThlMzRiYTgsIDB4NTFmM2EyNTEsIDB4YTNmZTVkYTMsIDB4NDBjMDgwNDAsIDB4OGY4YTA1OGYsIDB4OTJhZDNmOTIsIDB4OWRiYzIxOWQsIDB4Mzg0ODcwMzgsIDB4ZjUwNGYxZjUsIDB4YmNkZjYzYmMsIDB4YjZjMTc3YjYsIDB4ZGE3NWFmZGEsIDB4MjE2MzQyMjEsIDB4MTAzMDIwMTAsIDB4ZmYxYWU1ZmYsIDB4ZjMwZWZkZjMsIDB4ZDI2ZGJmZDIsIDB4Y2Q0YzgxY2QsIDB4MGMxNDE4MGMsIDB4MTMzNTI2MTMsIDB4ZWMyZmMzZWMsIDB4NWZlMWJlNWYsIDB4OTdhMjM1OTcsIDB4NDRjYzg4NDQsIDB4MTczOTJlMTcsIDB4YzQ1NzkzYzQsIDB4YTdmMjU1YTcsIDB4N2U4MmZjN2UsIDB4M2Q0NzdhM2QsIDB4NjRhY2M4NjQsIDB4NWRlN2JhNWQsIDB4MTkyYjMyMTksIDB4NzM5NWU2NzMsIDB4NjBhMGMwNjAsIDB4ODE5ODE5ODEsIDB4NGZkMTllNGYsIDB4ZGM3ZmEzZGMsIDB4MjI2NjQ0MjIsIDB4MmE3ZTU0MmEsIDB4OTBhYjNiOTAsIDB4ODg4MzBiODgsIDB4NDZjYThjNDYsIDB4ZWUyOWM3ZWUsIDB4YjhkMzZiYjgsIDB4MTQzYzI4MTQsIDB4ZGU3OWE3ZGUsIDB4NWVlMmJjNWUsIDB4MGIxZDE2MGIsIDB4ZGI3NmFkZGIsIDB4ZTAzYmRiZTAsIDB4MzI1NjY0MzIsIDB4M2E0ZTc0M2EsIDB4MGExZTE0MGEsIDB4NDlkYjkyNDksIDB4MDYwYTBjMDYsIDB4MjQ2YzQ4MjQsIDB4NWNlNGI4NWMsIDB4YzI1ZDlmYzIsIDB4ZDM2ZWJkZDMsIDB4YWNlZjQzYWMsIDB4NjJhNmM0NjIsIDB4OTFhODM5OTEsIDB4OTVhNDMxOTUsIDB4ZTQzN2QzZTQsIDB4Nzk4YmYyNzksIDB4ZTczMmQ1ZTcsIDB4Yzg0MzhiYzgsIDB4Mzc1OTZlMzcsIDB4NmRiN2RhNmQsIDB4OGQ4YzAxOGQsIDB4ZDU2NGIxZDUsIDB4NGVkMjljNGUsIDB4YTllMDQ5YTksIDB4NmNiNGQ4NmMsIDB4NTZmYWFjNTYsIDB4ZjQwN2YzZjQsIDB4ZWEyNWNmZWEsIDB4NjVhZmNhNjUsIDB4N2E4ZWY0N2EsIDB4YWVlOTQ3YWUsIDB4MDgxODEwMDgsIDB4YmFkNTZmYmEsIDB4Nzg4OGYwNzgsIDB4MjU2ZjRhMjUsIDB4MmU3MjVjMmUsIDB4MWMyNDM4MWMsIDB4YTZmMTU3YTYsIDB4YjRjNzczYjQsIDB4YzY1MTk3YzYsIDB4ZTgyM2NiZTgsIDB4ZGQ3Y2ExZGQsIDB4NzQ5Y2U4NzQsIDB4MWYyMTNlMWYsIDB4NGJkZDk2NGIsIDB4YmRkYzYxYmQsIDB4OGI4NjBkOGIsIDB4OGE4NTBmOGEsIDB4NzA5MGUwNzAsIDB4M2U0MjdjM2UsIDB4YjVjNDcxYjUsIDB4NjZhYWNjNjYsIDB4NDhkODkwNDgsIDB4MDMwNTA2MDMsIDB4ZjYwMWY3ZjYsIDB4MGUxMjFjMGUsIDB4NjFhM2MyNjEsIDB4MzU1ZjZhMzUsIDB4NTdmOWFlNTcsIDB4YjlkMDY5YjksIDB4ODY5MTE3ODYsIDB4YzE1ODk5YzEsIDB4MWQyNzNhMWQsIDB4OWViOTI3OWUsIDB4ZTEzOGQ5ZTEsIDB4ZjgxM2ViZjgsIDB4OThiMzJiOTgsIDB4MTEzMzIyMTEsIDB4NjliYmQyNjksIDB4ZDk3MGE5ZDksIDB4OGU4OTA3OGUsIDB4OTRhNzMzOTQsIDB4OWJiNjJkOWIsIDB4MWUyMjNjMWUsIDB4ODc5MjE1ODcsIDB4ZTkyMGM5ZTksIDB4Y2U0OTg3Y2UsIDB4NTVmZmFhNTUsIDB4Mjg3ODUwMjgsIDB4ZGY3YWE1ZGYsIDB4OGM4ZjAzOGMsIDB4YTFmODU5YTEsIDB4ODk4MDA5ODksIDB4MGQxNzFhMGQsIDB4YmZkYTY1YmYsIDB4ZTYzMWQ3ZTYsIDB4NDJjNjg0NDIsIDB4NjhiOGQwNjgsIDB4NDFjMzgyNDEsIDB4OTliMDI5OTksIDB4MmQ3NzVhMmQsIDB4MGYxMTFlMGYsIDB4YjBjYjdiYjAsIDB4NTRmY2E4NTQsIDB4YmJkNjZkYmIsIDB4MTYzYTJjMTZdO1xuICAgIHZhciBUNCA9IFsweDYzNjNhNWM2LCAweDdjN2M4NGY4LCAweDc3Nzc5OWVlLCAweDdiN2I4ZGY2LCAweGYyZjIwZGZmLCAweDZiNmJiZGQ2LCAweDZmNmZiMWRlLCAweGM1YzU1NDkxLCAweDMwMzA1MDYwLCAweDAxMDEwMzAyLCAweDY3NjdhOWNlLCAweDJiMmI3ZDU2LCAweGZlZmUxOWU3LCAweGQ3ZDc2MmI1LCAweGFiYWJlNjRkLCAweDc2NzY5YWVjLCAweGNhY2E0NThmLCAweDgyODI5ZDFmLCAweGM5Yzk0MDg5LCAweDdkN2Q4N2ZhLCAweGZhZmExNWVmLCAweDU5NTllYmIyLCAweDQ3NDdjOThlLCAweGYwZjAwYmZiLCAweGFkYWRlYzQxLCAweGQ0ZDQ2N2IzLCAweGEyYTJmZDVmLCAweGFmYWZlYTQ1LCAweDljOWNiZjIzLCAweGE0YTRmNzUzLCAweDcyNzI5NmU0LCAweGMwYzA1YjliLCAweGI3YjdjMjc1LCAweGZkZmQxY2UxLCAweDkzOTNhZTNkLCAweDI2MjY2YTRjLCAweDM2MzY1YTZjLCAweDNmM2Y0MTdlLCAweGY3ZjcwMmY1LCAweGNjY2M0ZjgzLCAweDM0MzQ1YzY4LCAweGE1YTVmNDUxLCAweGU1ZTUzNGQxLCAweGYxZjEwOGY5LCAweDcxNzE5M2UyLCAweGQ4ZDg3M2FiLCAweDMxMzE1MzYyLCAweDE1MTUzZjJhLCAweDA0MDQwYzA4LCAweGM3Yzc1Mjk1LCAweDIzMjM2NTQ2LCAweGMzYzM1ZTlkLCAweDE4MTgyODMwLCAweDk2OTZhMTM3LCAweDA1MDUwZjBhLCAweDlhOWFiNTJmLCAweDA3MDcwOTBlLCAweDEyMTIzNjI0LCAweDgwODA5YjFiLCAweGUyZTIzZGRmLCAweGViZWIyNmNkLCAweDI3Mjc2OTRlLCAweGIyYjJjZDdmLCAweDc1NzU5ZmVhLCAweDA5MDkxYjEyLCAweDgzODM5ZTFkLCAweDJjMmM3NDU4LCAweDFhMWEyZTM0LCAweDFiMWIyZDM2LCAweDZlNmViMmRjLCAweDVhNWFlZWI0LCAweGEwYTBmYjViLCAweDUyNTJmNmE0LCAweDNiM2I0ZDc2LCAweGQ2ZDY2MWI3LCAweGIzYjNjZTdkLCAweDI5Mjk3YjUyLCAweGUzZTMzZWRkLCAweDJmMmY3MTVlLCAweDg0ODQ5NzEzLCAweDUzNTNmNWE2LCAweGQxZDE2OGI5LCAweDAwMDAwMDAwLCAweGVkZWQyY2MxLCAweDIwMjA2MDQwLCAweGZjZmMxZmUzLCAweGIxYjFjODc5LCAweDViNWJlZGI2LCAweDZhNmFiZWQ0LCAweGNiY2I0NjhkLCAweGJlYmVkOTY3LCAweDM5Mzk0YjcyLCAweDRhNGFkZTk0LCAweDRjNGNkNDk4LCAweDU4NThlOGIwLCAweGNmY2Y0YTg1LCAweGQwZDA2YmJiLCAweGVmZWYyYWM1LCAweGFhYWFlNTRmLCAweGZiZmIxNmVkLCAweDQzNDNjNTg2LCAweDRkNGRkNzlhLCAweDMzMzM1NTY2LCAweDg1ODU5NDExLCAweDQ1NDVjZjhhLCAweGY5ZjkxMGU5LCAweDAyMDIwNjA0LCAweDdmN2Y4MWZlLCAweDUwNTBmMGEwLCAweDNjM2M0NDc4LCAweDlmOWZiYTI1LCAweGE4YThlMzRiLCAweDUxNTFmM2EyLCAweGEzYTNmZTVkLCAweDQwNDBjMDgwLCAweDhmOGY4YTA1LCAweDkyOTJhZDNmLCAweDlkOWRiYzIxLCAweDM4Mzg0ODcwLCAweGY1ZjUwNGYxLCAweGJjYmNkZjYzLCAweGI2YjZjMTc3LCAweGRhZGE3NWFmLCAweDIxMjE2MzQyLCAweDEwMTAzMDIwLCAweGZmZmYxYWU1LCAweGYzZjMwZWZkLCAweGQyZDI2ZGJmLCAweGNkY2Q0YzgxLCAweDBjMGMxNDE4LCAweDEzMTMzNTI2LCAweGVjZWMyZmMzLCAweDVmNWZlMWJlLCAweDk3OTdhMjM1LCAweDQ0NDRjYzg4LCAweDE3MTczOTJlLCAweGM0YzQ1NzkzLCAweGE3YTdmMjU1LCAweDdlN2U4MmZjLCAweDNkM2Q0NzdhLCAweDY0NjRhY2M4LCAweDVkNWRlN2JhLCAweDE5MTkyYjMyLCAweDczNzM5NWU2LCAweDYwNjBhMGMwLCAweDgxODE5ODE5LCAweDRmNGZkMTllLCAweGRjZGM3ZmEzLCAweDIyMjI2NjQ0LCAweDJhMmE3ZTU0LCAweDkwOTBhYjNiLCAweDg4ODg4MzBiLCAweDQ2NDZjYThjLCAweGVlZWUyOWM3LCAweGI4YjhkMzZiLCAweDE0MTQzYzI4LCAweGRlZGU3OWE3LCAweDVlNWVlMmJjLCAweDBiMGIxZDE2LCAweGRiZGI3NmFkLCAweGUwZTAzYmRiLCAweDMyMzI1NjY0LCAweDNhM2E0ZTc0LCAweDBhMGExZTE0LCAweDQ5NDlkYjkyLCAweDA2MDYwYTBjLCAweDI0MjQ2YzQ4LCAweDVjNWNlNGI4LCAweGMyYzI1ZDlmLCAweGQzZDM2ZWJkLCAweGFjYWNlZjQzLCAweDYyNjJhNmM0LCAweDkxOTFhODM5LCAweDk1OTVhNDMxLCAweGU0ZTQzN2QzLCAweDc5Nzk4YmYyLCAweGU3ZTczMmQ1LCAweGM4Yzg0MzhiLCAweDM3Mzc1OTZlLCAweDZkNmRiN2RhLCAweDhkOGQ4YzAxLCAweGQ1ZDU2NGIxLCAweDRlNGVkMjljLCAweGE5YTllMDQ5LCAweDZjNmNiNGQ4LCAweDU2NTZmYWFjLCAweGY0ZjQwN2YzLCAweGVhZWEyNWNmLCAweDY1NjVhZmNhLCAweDdhN2E4ZWY0LCAweGFlYWVlOTQ3LCAweDA4MDgxODEwLCAweGJhYmFkNTZmLCAweDc4Nzg4OGYwLCAweDI1MjU2ZjRhLCAweDJlMmU3MjVjLCAweDFjMWMyNDM4LCAweGE2YTZmMTU3LCAweGI0YjRjNzczLCAweGM2YzY1MTk3LCAweGU4ZTgyM2NiLCAweGRkZGQ3Y2ExLCAweDc0NzQ5Y2U4LCAweDFmMWYyMTNlLCAweDRiNGJkZDk2LCAweGJkYmRkYzYxLCAweDhiOGI4NjBkLCAweDhhOGE4NTBmLCAweDcwNzA5MGUwLCAweDNlM2U0MjdjLCAweGI1YjVjNDcxLCAweDY2NjZhYWNjLCAweDQ4NDhkODkwLCAweDAzMDMwNTA2LCAweGY2ZjYwMWY3LCAweDBlMGUxMjFjLCAweDYxNjFhM2MyLCAweDM1MzU1ZjZhLCAweDU3NTdmOWFlLCAweGI5YjlkMDY5LCAweDg2ODY5MTE3LCAweGMxYzE1ODk5LCAweDFkMWQyNzNhLCAweDllOWViOTI3LCAweGUxZTEzOGQ5LCAweGY4ZjgxM2ViLCAweDk4OThiMzJiLCAweDExMTEzMzIyLCAweDY5NjliYmQyLCAweGQ5ZDk3MGE5LCAweDhlOGU4OTA3LCAweDk0OTRhNzMzLCAweDliOWJiNjJkLCAweDFlMWUyMjNjLCAweDg3ODc5MjE1LCAweGU5ZTkyMGM5LCAweGNlY2U0OTg3LCAweDU1NTVmZmFhLCAweDI4Mjg3ODUwLCAweGRmZGY3YWE1LCAweDhjOGM4ZjAzLCAweGExYTFmODU5LCAweDg5ODk4MDA5LCAweDBkMGQxNzFhLCAweGJmYmZkYTY1LCAweGU2ZTYzMWQ3LCAweDQyNDJjNjg0LCAweDY4NjhiOGQwLCAweDQxNDFjMzgyLCAweDk5OTliMDI5LCAweDJkMmQ3NzVhLCAweDBmMGYxMTFlLCAweGIwYjBjYjdiLCAweDU0NTRmY2E4LCAweGJiYmJkNjZkLCAweDE2MTYzYTJjXTtcblxuICAgIC8vIFRyYW5zZm9ybWF0aW9ucyBmb3IgZGVjcnlwdGlvblxuICAgIHZhciBUNSA9IFsweDUxZjRhNzUwLCAweDdlNDE2NTUzLCAweDFhMTdhNGMzLCAweDNhMjc1ZTk2LCAweDNiYWI2YmNiLCAweDFmOWQ0NWYxLCAweGFjZmE1OGFiLCAweDRiZTMwMzkzLCAweDIwMzBmYTU1LCAweGFkNzY2ZGY2LCAweDg4Y2M3NjkxLCAweGY1MDI0YzI1LCAweDRmZTVkN2ZjLCAweGM1MmFjYmQ3LCAweDI2MzU0NDgwLCAweGI1NjJhMzhmLCAweGRlYjE1YTQ5LCAweDI1YmExYjY3LCAweDQ1ZWEwZTk4LCAweDVkZmVjMGUxLCAweGMzMmY3NTAyLCAweDgxNGNmMDEyLCAweDhkNDY5N2EzLCAweDZiZDNmOWM2LCAweDAzOGY1ZmU3LCAweDE1OTI5Yzk1LCAweGJmNmQ3YWViLCAweDk1NTI1OWRhLCAweGQ0YmU4MzJkLCAweDU4NzQyMWQzLCAweDQ5ZTA2OTI5LCAweDhlYzljODQ0LCAweDc1YzI4OTZhLCAweGY0OGU3OTc4LCAweDk5NTgzZTZiLCAweDI3Yjk3MWRkLCAweGJlZTE0ZmI2LCAweGYwODhhZDE3LCAweGM5MjBhYzY2LCAweDdkY2UzYWI0LCAweDYzZGY0YTE4LCAweGU1MWEzMTgyLCAweDk3NTEzMzYwLCAweDYyNTM3ZjQ1LCAweGIxNjQ3N2UwLCAweGJiNmJhZTg0LCAweGZlODFhMDFjLCAweGY5MDgyYjk0LCAweDcwNDg2ODU4LCAweDhmNDVmZDE5LCAweDk0ZGU2Yzg3LCAweDUyN2JmOGI3LCAweGFiNzNkMzIzLCAweDcyNGIwMmUyLCAweGUzMWY4ZjU3LCAweDY2NTVhYjJhLCAweGIyZWIyODA3LCAweDJmYjVjMjAzLCAweDg2YzU3YjlhLCAweGQzMzcwOGE1LCAweDMwMjg4N2YyLCAweDIzYmZhNWIyLCAweDAyMDM2YWJhLCAweGVkMTY4MjVjLCAweDhhY2YxYzJiLCAweGE3NzliNDkyLCAweGYzMDdmMmYwLCAweDRlNjllMmExLCAweDY1ZGFmNGNkLCAweDA2MDViZWQ1LCAweGQxMzQ2MjFmLCAweGM0YTZmZThhLCAweDM0MmU1MzlkLCAweGEyZjM1NWEwLCAweDA1OGFlMTMyLCAweGE0ZjZlYjc1LCAweDBiODNlYzM5LCAweDQwNjBlZmFhLCAweDVlNzE5ZjA2LCAweGJkNmUxMDUxLCAweDNlMjE4YWY5LCAweDk2ZGQwNjNkLCAweGRkM2UwNWFlLCAweDRkZTZiZDQ2LCAweDkxNTQ4ZGI1LCAweDcxYzQ1ZDA1LCAweDA0MDZkNDZmLCAweDYwNTAxNWZmLCAweDE5OThmYjI0LCAweGQ2YmRlOTk3LCAweDg5NDA0M2NjLCAweDY3ZDk5ZTc3LCAweGIwZTg0MmJkLCAweDA3ODk4Yjg4LCAweGU3MTk1YjM4LCAweDc5YzhlZWRiLCAweGExN2MwYTQ3LCAweDdjNDIwZmU5LCAweGY4ODQxZWM5LCAweDAwMDAwMDAwLCAweDA5ODA4NjgzLCAweDMyMmJlZDQ4LCAweDFlMTE3MGFjLCAweDZjNWE3MjRlLCAweGZkMGVmZmZiLCAweDBmODUzODU2LCAweDNkYWVkNTFlLCAweDM2MmQzOTI3LCAweDBhMGZkOTY0LCAweDY4NWNhNjIxLCAweDliNWI1NGQxLCAweDI0MzYyZTNhLCAweDBjMGE2N2IxLCAweDkzNTdlNzBmLCAweGI0ZWU5NmQyLCAweDFiOWI5MTllLCAweDgwYzBjNTRmLCAweDYxZGMyMGEyLCAweDVhNzc0YjY5LCAweDFjMTIxYTE2LCAweGUyOTNiYTBhLCAweGMwYTAyYWU1LCAweDNjMjJlMDQzLCAweDEyMWIxNzFkLCAweDBlMDkwZDBiLCAweGYyOGJjN2FkLCAweDJkYjZhOGI5LCAweDE0MWVhOWM4LCAweDU3ZjExOTg1LCAweGFmNzUwNzRjLCAweGVlOTlkZGJiLCAweGEzN2Y2MGZkLCAweGY3MDEyNjlmLCAweDVjNzJmNWJjLCAweDQ0NjYzYmM1LCAweDViZmI3ZTM0LCAweDhiNDMyOTc2LCAweGNiMjNjNmRjLCAweGI2ZWRmYzY4LCAweGI4ZTRmMTYzLCAweGQ3MzFkY2NhLCAweDQyNjM4NTEwLCAweDEzOTcyMjQwLCAweDg0YzYxMTIwLCAweDg1NGEyNDdkLCAweGQyYmIzZGY4LCAweGFlZjkzMjExLCAweGM3MjlhMTZkLCAweDFkOWUyZjRiLCAweGRjYjIzMGYzLCAweDBkODY1MmVjLCAweDc3YzFlM2QwLCAweDJiYjMxNjZjLCAweGE5NzBiOTk5LCAweDExOTQ0OGZhLCAweDQ3ZTk2NDIyLCAweGE4ZmM4Y2M0LCAweGEwZjAzZjFhLCAweDU2N2QyY2Q4LCAweDIyMzM5MGVmLCAweDg3NDk0ZWM3LCAweGQ5MzhkMWMxLCAweDhjY2FhMmZlLCAweDk4ZDQwYjM2LCAweGE2ZjU4MWNmLCAweGE1N2FkZTI4LCAweGRhYjc4ZTI2LCAweDNmYWRiZmE0LCAweDJjM2E5ZGU0LCAweDUwNzg5MjBkLCAweDZhNWZjYzliLCAweDU0N2U0NjYyLCAweGY2OGQxM2MyLCAweDkwZDhiOGU4LCAweDJlMzlmNzVlLCAweDgyYzNhZmY1LCAweDlmNWQ4MGJlLCAweDY5ZDA5MzdjLCAweDZmZDUyZGE5LCAweGNmMjUxMmIzLCAweGM4YWM5OTNiLCAweDEwMTg3ZGE3LCAweGU4OWM2MzZlLCAweGRiM2JiYjdiLCAweGNkMjY3ODA5LCAweDZlNTkxOGY0LCAweGVjOWFiNzAxLCAweDgzNGY5YWE4LCAweGU2OTU2ZTY1LCAweGFhZmZlNjdlLCAweDIxYmNjZjA4LCAweGVmMTVlOGU2LCAweGJhZTc5YmQ5LCAweDRhNmYzNmNlLCAweGVhOWYwOWQ0LCAweDI5YjA3Y2Q2LCAweDMxYTRiMmFmLCAweDJhM2YyMzMxLCAweGM2YTU5NDMwLCAweDM1YTI2NmMwLCAweDc0NGViYzM3LCAweGZjODJjYWE2LCAweGUwOTBkMGIwLCAweDMzYTdkODE1LCAweGYxMDQ5ODRhLCAweDQxZWNkYWY3LCAweDdmY2Q1MDBlLCAweDE3OTFmNjJmLCAweDc2NGRkNjhkLCAweDQzZWZiMDRkLCAweGNjYWE0ZDU0LCAweGU0OTYwNGRmLCAweDllZDFiNWUzLCAweDRjNmE4ODFiLCAweGMxMmMxZmI4LCAweDQ2NjU1MTdmLCAweDlkNWVlYTA0LCAweDAxOGMzNTVkLCAweGZhODc3NDczLCAweGZiMGI0MTJlLCAweGIzNjcxZDVhLCAweDkyZGJkMjUyLCAweGU5MTA1NjMzLCAweDZkZDY0NzEzLCAweDlhZDc2MThjLCAweDM3YTEwYzdhLCAweDU5ZjgxNDhlLCAweGViMTMzYzg5LCAweGNlYTkyN2VlLCAweGI3NjFjOTM1LCAweGUxMWNlNWVkLCAweDdhNDdiMTNjLCAweDljZDJkZjU5LCAweDU1ZjI3MzNmLCAweDE4MTRjZTc5LCAweDczYzczN2JmLCAweDUzZjdjZGVhLCAweDVmZmRhYTViLCAweGRmM2Q2ZjE0LCAweDc4NDRkYjg2LCAweGNhYWZmMzgxLCAweGI5NjhjNDNlLCAweDM4MjQzNDJjLCAweGMyYTM0MDVmLCAweDE2MWRjMzcyLCAweGJjZTIyNTBjLCAweDI4M2M0OThiLCAweGZmMGQ5NTQxLCAweDM5YTgwMTcxLCAweDA4MGNiM2RlLCAweGQ4YjRlNDljLCAweDY0NTZjMTkwLCAweDdiY2I4NDYxLCAweGQ1MzJiNjcwLCAweDQ4NmM1Yzc0LCAweGQwYjg1NzQyXTtcbiAgICB2YXIgVDYgPSBbMHg1MDUxZjRhNywgMHg1MzdlNDE2NSwgMHhjMzFhMTdhNCwgMHg5NjNhMjc1ZSwgMHhjYjNiYWI2YiwgMHhmMTFmOWQ0NSwgMHhhYmFjZmE1OCwgMHg5MzRiZTMwMywgMHg1NTIwMzBmYSwgMHhmNmFkNzY2ZCwgMHg5MTg4Y2M3NiwgMHgyNWY1MDI0YywgMHhmYzRmZTVkNywgMHhkN2M1MmFjYiwgMHg4MDI2MzU0NCwgMHg4ZmI1NjJhMywgMHg0OWRlYjE1YSwgMHg2NzI1YmExYiwgMHg5ODQ1ZWEwZSwgMHhlMTVkZmVjMCwgMHgwMmMzMmY3NSwgMHgxMjgxNGNmMCwgMHhhMzhkNDY5NywgMHhjNjZiZDNmOSwgMHhlNzAzOGY1ZiwgMHg5NTE1OTI5YywgMHhlYmJmNmQ3YSwgMHhkYTk1NTI1OSwgMHgyZGQ0YmU4MywgMHhkMzU4NzQyMSwgMHgyOTQ5ZTA2OSwgMHg0NDhlYzljOCwgMHg2YTc1YzI4OSwgMHg3OGY0OGU3OSwgMHg2Yjk5NTgzZSwgMHhkZDI3Yjk3MSwgMHhiNmJlZTE0ZiwgMHgxN2YwODhhZCwgMHg2NmM5MjBhYywgMHhiNDdkY2UzYSwgMHgxODYzZGY0YSwgMHg4MmU1MWEzMSwgMHg2MDk3NTEzMywgMHg0NTYyNTM3ZiwgMHhlMGIxNjQ3NywgMHg4NGJiNmJhZSwgMHgxY2ZlODFhMCwgMHg5NGY5MDgyYiwgMHg1ODcwNDg2OCwgMHgxOThmNDVmZCwgMHg4Nzk0ZGU2YywgMHhiNzUyN2JmOCwgMHgyM2FiNzNkMywgMHhlMjcyNGIwMiwgMHg1N2UzMWY4ZiwgMHgyYTY2NTVhYiwgMHgwN2IyZWIyOCwgMHgwMzJmYjVjMiwgMHg5YTg2YzU3YiwgMHhhNWQzMzcwOCwgMHhmMjMwMjg4NywgMHhiMjIzYmZhNSwgMHhiYTAyMDM2YSwgMHg1Y2VkMTY4MiwgMHgyYjhhY2YxYywgMHg5MmE3NzliNCwgMHhmMGYzMDdmMiwgMHhhMTRlNjllMiwgMHhjZDY1ZGFmNCwgMHhkNTA2MDViZSwgMHgxZmQxMzQ2MiwgMHg4YWM0YTZmZSwgMHg5ZDM0MmU1MywgMHhhMGEyZjM1NSwgMHgzMjA1OGFlMSwgMHg3NWE0ZjZlYiwgMHgzOTBiODNlYywgMHhhYTQwNjBlZiwgMHgwNjVlNzE5ZiwgMHg1MWJkNmUxMCwgMHhmOTNlMjE4YSwgMHgzZDk2ZGQwNiwgMHhhZWRkM2UwNSwgMHg0NjRkZTZiZCwgMHhiNTkxNTQ4ZCwgMHgwNTcxYzQ1ZCwgMHg2ZjA0MDZkNCwgMHhmZjYwNTAxNSwgMHgyNDE5OThmYiwgMHg5N2Q2YmRlOSwgMHhjYzg5NDA0MywgMHg3NzY3ZDk5ZSwgMHhiZGIwZTg0MiwgMHg4ODA3ODk4YiwgMHgzOGU3MTk1YiwgMHhkYjc5YzhlZSwgMHg0N2ExN2MwYSwgMHhlOTdjNDIwZiwgMHhjOWY4ODQxZSwgMHgwMDAwMDAwMCwgMHg4MzA5ODA4NiwgMHg0ODMyMmJlZCwgMHhhYzFlMTE3MCwgMHg0ZTZjNWE3MiwgMHhmYmZkMGVmZiwgMHg1NjBmODUzOCwgMHgxZTNkYWVkNSwgMHgyNzM2MmQzOSwgMHg2NDBhMGZkOSwgMHgyMTY4NWNhNiwgMHhkMTliNWI1NCwgMHgzYTI0MzYyZSwgMHhiMTBjMGE2NywgMHgwZjkzNTdlNywgMHhkMmI0ZWU5NiwgMHg5ZTFiOWI5MSwgMHg0ZjgwYzBjNSwgMHhhMjYxZGMyMCwgMHg2OTVhNzc0YiwgMHgxNjFjMTIxYSwgMHgwYWUyOTNiYSwgMHhlNWMwYTAyYSwgMHg0MzNjMjJlMCwgMHgxZDEyMWIxNywgMHgwYjBlMDkwZCwgMHhhZGYyOGJjNywgMHhiOTJkYjZhOCwgMHhjODE0MWVhOSwgMHg4NTU3ZjExOSwgMHg0Y2FmNzUwNywgMHhiYmVlOTlkZCwgMHhmZGEzN2Y2MCwgMHg5ZmY3MDEyNiwgMHhiYzVjNzJmNSwgMHhjNTQ0NjYzYiwgMHgzNDViZmI3ZSwgMHg3NjhiNDMyOSwgMHhkY2NiMjNjNiwgMHg2OGI2ZWRmYywgMHg2M2I4ZTRmMSwgMHhjYWQ3MzFkYywgMHgxMDQyNjM4NSwgMHg0MDEzOTcyMiwgMHgyMDg0YzYxMSwgMHg3ZDg1NGEyNCwgMHhmOGQyYmIzZCwgMHgxMWFlZjkzMiwgMHg2ZGM3MjlhMSwgMHg0YjFkOWUyZiwgMHhmM2RjYjIzMCwgMHhlYzBkODY1MiwgMHhkMDc3YzFlMywgMHg2YzJiYjMxNiwgMHg5OWE5NzBiOSwgMHhmYTExOTQ0OCwgMHgyMjQ3ZTk2NCwgMHhjNGE4ZmM4YywgMHgxYWEwZjAzZiwgMHhkODU2N2QyYywgMHhlZjIyMzM5MCwgMHhjNzg3NDk0ZSwgMHhjMWQ5MzhkMSwgMHhmZThjY2FhMiwgMHgzNjk4ZDQwYiwgMHhjZmE2ZjU4MSwgMHgyOGE1N2FkZSwgMHgyNmRhYjc4ZSwgMHhhNDNmYWRiZiwgMHhlNDJjM2E5ZCwgMHgwZDUwNzg5MiwgMHg5YjZhNWZjYywgMHg2MjU0N2U0NiwgMHhjMmY2OGQxMywgMHhlODkwZDhiOCwgMHg1ZTJlMzlmNywgMHhmNTgyYzNhZiwgMHhiZTlmNWQ4MCwgMHg3YzY5ZDA5MywgMHhhOTZmZDUyZCwgMHhiM2NmMjUxMiwgMHgzYmM4YWM5OSwgMHhhNzEwMTg3ZCwgMHg2ZWU4OWM2MywgMHg3YmRiM2JiYiwgMHgwOWNkMjY3OCwgMHhmNDZlNTkxOCwgMHgwMWVjOWFiNywgMHhhODgzNGY5YSwgMHg2NWU2OTU2ZSwgMHg3ZWFhZmZlNiwgMHgwODIxYmNjZiwgMHhlNmVmMTVlOCwgMHhkOWJhZTc5YiwgMHhjZTRhNmYzNiwgMHhkNGVhOWYwOSwgMHhkNjI5YjA3YywgMHhhZjMxYTRiMiwgMHgzMTJhM2YyMywgMHgzMGM2YTU5NCwgMHhjMDM1YTI2NiwgMHgzNzc0NGViYywgMHhhNmZjODJjYSwgMHhiMGUwOTBkMCwgMHgxNTMzYTdkOCwgMHg0YWYxMDQ5OCwgMHhmNzQxZWNkYSwgMHgwZTdmY2Q1MCwgMHgyZjE3OTFmNiwgMHg4ZDc2NGRkNiwgMHg0ZDQzZWZiMCwgMHg1NGNjYWE0ZCwgMHhkZmU0OTYwNCwgMHhlMzllZDFiNSwgMHgxYjRjNmE4OCwgMHhiOGMxMmMxZiwgMHg3ZjQ2NjU1MSwgMHgwNDlkNWVlYSwgMHg1ZDAxOGMzNSwgMHg3M2ZhODc3NCwgMHgyZWZiMGI0MSwgMHg1YWIzNjcxZCwgMHg1MjkyZGJkMiwgMHgzM2U5MTA1NiwgMHgxMzZkZDY0NywgMHg4YzlhZDc2MSwgMHg3YTM3YTEwYywgMHg4ZTU5ZjgxNCwgMHg4OWViMTMzYywgMHhlZWNlYTkyNywgMHgzNWI3NjFjOSwgMHhlZGUxMWNlNSwgMHgzYzdhNDdiMSwgMHg1OTljZDJkZiwgMHgzZjU1ZjI3MywgMHg3OTE4MTRjZSwgMHhiZjczYzczNywgMHhlYTUzZjdjZCwgMHg1YjVmZmRhYSwgMHgxNGRmM2Q2ZiwgMHg4Njc4NDRkYiwgMHg4MWNhYWZmMywgMHgzZWI5NjhjNCwgMHgyYzM4MjQzNCwgMHg1ZmMyYTM0MCwgMHg3MjE2MWRjMywgMHgwY2JjZTIyNSwgMHg4YjI4M2M0OSwgMHg0MWZmMGQ5NSwgMHg3MTM5YTgwMSwgMHhkZTA4MGNiMywgMHg5Y2Q4YjRlNCwgMHg5MDY0NTZjMSwgMHg2MTdiY2I4NCwgMHg3MGQ1MzJiNiwgMHg3NDQ4NmM1YywgMHg0MmQwYjg1N107XG4gICAgdmFyIFQ3ID0gWzB4YTc1MDUxZjQsIDB4NjU1MzdlNDEsIDB4YTRjMzFhMTcsIDB4NWU5NjNhMjcsIDB4NmJjYjNiYWIsIDB4NDVmMTFmOWQsIDB4NThhYmFjZmEsIDB4MDM5MzRiZTMsIDB4ZmE1NTIwMzAsIDB4NmRmNmFkNzYsIDB4NzY5MTg4Y2MsIDB4NGMyNWY1MDIsIDB4ZDdmYzRmZTUsIDB4Y2JkN2M1MmEsIDB4NDQ4MDI2MzUsIDB4YTM4ZmI1NjIsIDB4NWE0OWRlYjEsIDB4MWI2NzI1YmEsIDB4MGU5ODQ1ZWEsIDB4YzBlMTVkZmUsIDB4NzUwMmMzMmYsIDB4ZjAxMjgxNGMsIDB4OTdhMzhkNDYsIDB4ZjljNjZiZDMsIDB4NWZlNzAzOGYsIDB4OWM5NTE1OTIsIDB4N2FlYmJmNmQsIDB4NTlkYTk1NTIsIDB4ODMyZGQ0YmUsIDB4MjFkMzU4NzQsIDB4NjkyOTQ5ZTAsIDB4Yzg0NDhlYzksIDB4ODk2YTc1YzIsIDB4Nzk3OGY0OGUsIDB4M2U2Yjk5NTgsIDB4NzFkZDI3YjksIDB4NGZiNmJlZTEsIDB4YWQxN2YwODgsIDB4YWM2NmM5MjAsIDB4M2FiNDdkY2UsIDB4NGExODYzZGYsIDB4MzE4MmU1MWEsIDB4MzM2MDk3NTEsIDB4N2Y0NTYyNTMsIDB4NzdlMGIxNjQsIDB4YWU4NGJiNmIsIDB4YTAxY2ZlODEsIDB4MmI5NGY5MDgsIDB4Njg1ODcwNDgsIDB4ZmQxOThmNDUsIDB4NmM4Nzk0ZGUsIDB4ZjhiNzUyN2IsIDB4ZDMyM2FiNzMsIDB4MDJlMjcyNGIsIDB4OGY1N2UzMWYsIDB4YWIyYTY2NTUsIDB4MjgwN2IyZWIsIDB4YzIwMzJmYjUsIDB4N2I5YTg2YzUsIDB4MDhhNWQzMzcsIDB4ODdmMjMwMjgsIDB4YTViMjIzYmYsIDB4NmFiYTAyMDMsIDB4ODI1Y2VkMTYsIDB4MWMyYjhhY2YsIDB4YjQ5MmE3NzksIDB4ZjJmMGYzMDcsIDB4ZTJhMTRlNjksIDB4ZjRjZDY1ZGEsIDB4YmVkNTA2MDUsIDB4NjIxZmQxMzQsIDB4ZmU4YWM0YTYsIDB4NTM5ZDM0MmUsIDB4NTVhMGEyZjMsIDB4ZTEzMjA1OGEsIDB4ZWI3NWE0ZjYsIDB4ZWMzOTBiODMsIDB4ZWZhYTQwNjAsIDB4OWYwNjVlNzEsIDB4MTA1MWJkNmUsIDB4OGFmOTNlMjEsIDB4MDYzZDk2ZGQsIDB4MDVhZWRkM2UsIDB4YmQ0NjRkZTYsIDB4OGRiNTkxNTQsIDB4NWQwNTcxYzQsIDB4ZDQ2ZjA0MDYsIDB4MTVmZjYwNTAsIDB4ZmIyNDE5OTgsIDB4ZTk5N2Q2YmQsIDB4NDNjYzg5NDAsIDB4OWU3NzY3ZDksIDB4NDJiZGIwZTgsIDB4OGI4ODA3ODksIDB4NWIzOGU3MTksIDB4ZWVkYjc5YzgsIDB4MGE0N2ExN2MsIDB4MGZlOTdjNDIsIDB4MWVjOWY4ODQsIDB4MDAwMDAwMDAsIDB4ODY4MzA5ODAsIDB4ZWQ0ODMyMmIsIDB4NzBhYzFlMTEsIDB4NzI0ZTZjNWEsIDB4ZmZmYmZkMGUsIDB4Mzg1NjBmODUsIDB4ZDUxZTNkYWUsIDB4MzkyNzM2MmQsIDB4ZDk2NDBhMGYsIDB4YTYyMTY4NWMsIDB4NTRkMTliNWIsIDB4MmUzYTI0MzYsIDB4NjdiMTBjMGEsIDB4ZTcwZjkzNTcsIDB4OTZkMmI0ZWUsIDB4OTE5ZTFiOWIsIDB4YzU0ZjgwYzAsIDB4MjBhMjYxZGMsIDB4NGI2OTVhNzcsIDB4MWExNjFjMTIsIDB4YmEwYWUyOTMsIDB4MmFlNWMwYTAsIDB4ZTA0MzNjMjIsIDB4MTcxZDEyMWIsIDB4MGQwYjBlMDksIDB4YzdhZGYyOGIsIDB4YThiOTJkYjYsIDB4YTljODE0MWUsIDB4MTk4NTU3ZjEsIDB4MDc0Y2FmNzUsIDB4ZGRiYmVlOTksIDB4NjBmZGEzN2YsIDB4MjY5ZmY3MDEsIDB4ZjViYzVjNzIsIDB4M2JjNTQ0NjYsIDB4N2UzNDViZmIsIDB4Mjk3NjhiNDMsIDB4YzZkY2NiMjMsIDB4ZmM2OGI2ZWQsIDB4ZjE2M2I4ZTQsIDB4ZGNjYWQ3MzEsIDB4ODUxMDQyNjMsIDB4MjI0MDEzOTcsIDB4MTEyMDg0YzYsIDB4MjQ3ZDg1NGEsIDB4M2RmOGQyYmIsIDB4MzIxMWFlZjksIDB4YTE2ZGM3MjksIDB4MmY0YjFkOWUsIDB4MzBmM2RjYjIsIDB4NTJlYzBkODYsIDB4ZTNkMDc3YzEsIDB4MTY2YzJiYjMsIDB4Yjk5OWE5NzAsIDB4NDhmYTExOTQsIDB4NjQyMjQ3ZTksIDB4OGNjNGE4ZmMsIDB4M2YxYWEwZjAsIDB4MmNkODU2N2QsIDB4OTBlZjIyMzMsIDB4NGVjNzg3NDksIDB4ZDFjMWQ5MzgsIDB4YTJmZThjY2EsIDB4MGIzNjk4ZDQsIDB4ODFjZmE2ZjUsIDB4ZGUyOGE1N2EsIDB4OGUyNmRhYjcsIDB4YmZhNDNmYWQsIDB4OWRlNDJjM2EsIDB4OTIwZDUwNzgsIDB4Y2M5YjZhNWYsIDB4NDY2MjU0N2UsIDB4MTNjMmY2OGQsIDB4YjhlODkwZDgsIDB4Zjc1ZTJlMzksIDB4YWZmNTgyYzMsIDB4ODBiZTlmNWQsIDB4OTM3YzY5ZDAsIDB4MmRhOTZmZDUsIDB4MTJiM2NmMjUsIDB4OTkzYmM4YWMsIDB4N2RhNzEwMTgsIDB4NjM2ZWU4OWMsIDB4YmI3YmRiM2IsIDB4NzgwOWNkMjYsIDB4MThmNDZlNTksIDB4YjcwMWVjOWEsIDB4OWFhODgzNGYsIDB4NmU2NWU2OTUsIDB4ZTY3ZWFhZmYsIDB4Y2YwODIxYmMsIDB4ZThlNmVmMTUsIDB4OWJkOWJhZTcsIDB4MzZjZTRhNmYsIDB4MDlkNGVhOWYsIDB4N2NkNjI5YjAsIDB4YjJhZjMxYTQsIDB4MjMzMTJhM2YsIDB4OTQzMGM2YTUsIDB4NjZjMDM1YTIsIDB4YmMzNzc0NGUsIDB4Y2FhNmZjODIsIDB4ZDBiMGUwOTAsIDB4ZDgxNTMzYTcsIDB4OTg0YWYxMDQsIDB4ZGFmNzQxZWMsIDB4NTAwZTdmY2QsIDB4ZjYyZjE3OTEsIDB4ZDY4ZDc2NGQsIDB4YjA0ZDQzZWYsIDB4NGQ1NGNjYWEsIDB4MDRkZmU0OTYsIDB4YjVlMzllZDEsIDB4ODgxYjRjNmEsIDB4MWZiOGMxMmMsIDB4NTE3ZjQ2NjUsIDB4ZWEwNDlkNWUsIDB4MzU1ZDAxOGMsIDB4NzQ3M2ZhODcsIDB4NDEyZWZiMGIsIDB4MWQ1YWIzNjcsIDB4ZDI1MjkyZGIsIDB4NTYzM2U5MTAsIDB4NDcxMzZkZDYsIDB4NjE4YzlhZDcsIDB4MGM3YTM3YTEsIDB4MTQ4ZTU5ZjgsIDB4M2M4OWViMTMsIDB4MjdlZWNlYTksIDB4YzkzNWI3NjEsIDB4ZTVlZGUxMWMsIDB4YjEzYzdhNDcsIDB4ZGY1OTljZDIsIDB4NzMzZjU1ZjIsIDB4Y2U3OTE4MTQsIDB4MzdiZjczYzcsIDB4Y2RlYTUzZjcsIDB4YWE1YjVmZmQsIDB4NmYxNGRmM2QsIDB4ZGI4Njc4NDQsIDB4ZjM4MWNhYWYsIDB4YzQzZWI5NjgsIDB4MzQyYzM4MjQsIDB4NDA1ZmMyYTMsIDB4YzM3MjE2MWQsIDB4MjUwY2JjZTIsIDB4NDk4YjI4M2MsIDB4OTU0MWZmMGQsIDB4MDE3MTM5YTgsIDB4YjNkZTA4MGMsIDB4ZTQ5Y2Q4YjQsIDB4YzE5MDY0NTYsIDB4ODQ2MTdiY2IsIDB4YjY3MGQ1MzIsIDB4NWM3NDQ4NmMsIDB4NTc0MmQwYjhdO1xuICAgIHZhciBUOCA9IFsweGY0YTc1MDUxLCAweDQxNjU1MzdlLCAweDE3YTRjMzFhLCAweDI3NWU5NjNhLCAweGFiNmJjYjNiLCAweDlkNDVmMTFmLCAweGZhNThhYmFjLCAweGUzMDM5MzRiLCAweDMwZmE1NTIwLCAweDc2NmRmNmFkLCAweGNjNzY5MTg4LCAweDAyNGMyNWY1LCAweGU1ZDdmYzRmLCAweDJhY2JkN2M1LCAweDM1NDQ4MDI2LCAweDYyYTM4ZmI1LCAweGIxNWE0OWRlLCAweGJhMWI2NzI1LCAweGVhMGU5ODQ1LCAweGZlYzBlMTVkLCAweDJmNzUwMmMzLCAweDRjZjAxMjgxLCAweDQ2OTdhMzhkLCAweGQzZjljNjZiLCAweDhmNWZlNzAzLCAweDkyOWM5NTE1LCAweDZkN2FlYmJmLCAweDUyNTlkYTk1LCAweGJlODMyZGQ0LCAweDc0MjFkMzU4LCAweGUwNjkyOTQ5LCAweGM5Yzg0NDhlLCAweGMyODk2YTc1LCAweDhlNzk3OGY0LCAweDU4M2U2Yjk5LCAweGI5NzFkZDI3LCAweGUxNGZiNmJlLCAweDg4YWQxN2YwLCAweDIwYWM2NmM5LCAweGNlM2FiNDdkLCAweGRmNGExODYzLCAweDFhMzE4MmU1LCAweDUxMzM2MDk3LCAweDUzN2Y0NTYyLCAweDY0NzdlMGIxLCAweDZiYWU4NGJiLCAweDgxYTAxY2ZlLCAweDA4MmI5NGY5LCAweDQ4Njg1ODcwLCAweDQ1ZmQxOThmLCAweGRlNmM4Nzk0LCAweDdiZjhiNzUyLCAweDczZDMyM2FiLCAweDRiMDJlMjcyLCAweDFmOGY1N2UzLCAweDU1YWIyYTY2LCAweGViMjgwN2IyLCAweGI1YzIwMzJmLCAweGM1N2I5YTg2LCAweDM3MDhhNWQzLCAweDI4ODdmMjMwLCAweGJmYTViMjIzLCAweDAzNmFiYTAyLCAweDE2ODI1Y2VkLCAweGNmMWMyYjhhLCAweDc5YjQ5MmE3LCAweDA3ZjJmMGYzLCAweDY5ZTJhMTRlLCAweGRhZjRjZDY1LCAweDA1YmVkNTA2LCAweDM0NjIxZmQxLCAweGE2ZmU4YWM0LCAweDJlNTM5ZDM0LCAweGYzNTVhMGEyLCAweDhhZTEzMjA1LCAweGY2ZWI3NWE0LCAweDgzZWMzOTBiLCAweDYwZWZhYTQwLCAweDcxOWYwNjVlLCAweDZlMTA1MWJkLCAweDIxOGFmOTNlLCAweGRkMDYzZDk2LCAweDNlMDVhZWRkLCAweGU2YmQ0NjRkLCAweDU0OGRiNTkxLCAweGM0NWQwNTcxLCAweDA2ZDQ2ZjA0LCAweDUwMTVmZjYwLCAweDk4ZmIyNDE5LCAweGJkZTk5N2Q2LCAweDQwNDNjYzg5LCAweGQ5OWU3NzY3LCAweGU4NDJiZGIwLCAweDg5OGI4ODA3LCAweDE5NWIzOGU3LCAweGM4ZWVkYjc5LCAweDdjMGE0N2ExLCAweDQyMGZlOTdjLCAweDg0MWVjOWY4LCAweDAwMDAwMDAwLCAweDgwODY4MzA5LCAweDJiZWQ0ODMyLCAweDExNzBhYzFlLCAweDVhNzI0ZTZjLCAweDBlZmZmYmZkLCAweDg1Mzg1NjBmLCAweGFlZDUxZTNkLCAweDJkMzkyNzM2LCAweDBmZDk2NDBhLCAweDVjYTYyMTY4LCAweDViNTRkMTliLCAweDM2MmUzYTI0LCAweDBhNjdiMTBjLCAweDU3ZTcwZjkzLCAweGVlOTZkMmI0LCAweDliOTE5ZTFiLCAweGMwYzU0ZjgwLCAweGRjMjBhMjYxLCAweDc3NGI2OTVhLCAweDEyMWExNjFjLCAweDkzYmEwYWUyLCAweGEwMmFlNWMwLCAweDIyZTA0MzNjLCAweDFiMTcxZDEyLCAweDA5MGQwYjBlLCAweDhiYzdhZGYyLCAweGI2YThiOTJkLCAweDFlYTljODE0LCAweGYxMTk4NTU3LCAweDc1MDc0Y2FmLCAweDk5ZGRiYmVlLCAweDdmNjBmZGEzLCAweDAxMjY5ZmY3LCAweDcyZjViYzVjLCAweDY2M2JjNTQ0LCAweGZiN2UzNDViLCAweDQzMjk3NjhiLCAweDIzYzZkY2NiLCAweGVkZmM2OGI2LCAweGU0ZjE2M2I4LCAweDMxZGNjYWQ3LCAweDYzODUxMDQyLCAweDk3MjI0MDEzLCAweGM2MTEyMDg0LCAweDRhMjQ3ZDg1LCAweGJiM2RmOGQyLCAweGY5MzIxMWFlLCAweDI5YTE2ZGM3LCAweDllMmY0YjFkLCAweGIyMzBmM2RjLCAweDg2NTJlYzBkLCAweGMxZTNkMDc3LCAweGIzMTY2YzJiLCAweDcwYjk5OWE5LCAweDk0NDhmYTExLCAweGU5NjQyMjQ3LCAweGZjOGNjNGE4LCAweGYwM2YxYWEwLCAweDdkMmNkODU2LCAweDMzOTBlZjIyLCAweDQ5NGVjNzg3LCAweDM4ZDFjMWQ5LCAweGNhYTJmZThjLCAweGQ0MGIzNjk4LCAweGY1ODFjZmE2LCAweDdhZGUyOGE1LCAweGI3OGUyNmRhLCAweGFkYmZhNDNmLCAweDNhOWRlNDJjLCAweDc4OTIwZDUwLCAweDVmY2M5YjZhLCAweDdlNDY2MjU0LCAweDhkMTNjMmY2LCAweGQ4YjhlODkwLCAweDM5Zjc1ZTJlLCAweGMzYWZmNTgyLCAweDVkODBiZTlmLCAweGQwOTM3YzY5LCAweGQ1MmRhOTZmLCAweDI1MTJiM2NmLCAweGFjOTkzYmM4LCAweDE4N2RhNzEwLCAweDljNjM2ZWU4LCAweDNiYmI3YmRiLCAweDI2NzgwOWNkLCAweDU5MThmNDZlLCAweDlhYjcwMWVjLCAweDRmOWFhODgzLCAweDk1NmU2NWU2LCAweGZmZTY3ZWFhLCAweGJjY2YwODIxLCAweDE1ZThlNmVmLCAweGU3OWJkOWJhLCAweDZmMzZjZTRhLCAweDlmMDlkNGVhLCAweGIwN2NkNjI5LCAweGE0YjJhZjMxLCAweDNmMjMzMTJhLCAweGE1OTQzMGM2LCAweGEyNjZjMDM1LCAweDRlYmMzNzc0LCAweDgyY2FhNmZjLCAweDkwZDBiMGUwLCAweGE3ZDgxNTMzLCAweDA0OTg0YWYxLCAweGVjZGFmNzQxLCAweGNkNTAwZTdmLCAweDkxZjYyZjE3LCAweDRkZDY4ZDc2LCAweGVmYjA0ZDQzLCAweGFhNGQ1NGNjLCAweDk2MDRkZmU0LCAweGQxYjVlMzllLCAweDZhODgxYjRjLCAweDJjMWZiOGMxLCAweDY1NTE3ZjQ2LCAweDVlZWEwNDlkLCAweDhjMzU1ZDAxLCAweDg3NzQ3M2ZhLCAweDBiNDEyZWZiLCAweDY3MWQ1YWIzLCAweGRiZDI1MjkyLCAweDEwNTYzM2U5LCAweGQ2NDcxMzZkLCAweGQ3NjE4YzlhLCAweGExMGM3YTM3LCAweGY4MTQ4ZTU5LCAweDEzM2M4OWViLCAweGE5MjdlZWNlLCAweDYxYzkzNWI3LCAweDFjZTVlZGUxLCAweDQ3YjEzYzdhLCAweGQyZGY1OTljLCAweGYyNzMzZjU1LCAweDE0Y2U3OTE4LCAweGM3MzdiZjczLCAweGY3Y2RlYTUzLCAweGZkYWE1YjVmLCAweDNkNmYxNGRmLCAweDQ0ZGI4Njc4LCAweGFmZjM4MWNhLCAweDY4YzQzZWI5LCAweDI0MzQyYzM4LCAweGEzNDA1ZmMyLCAweDFkYzM3MjE2LCAweGUyMjUwY2JjLCAweDNjNDk4YjI4LCAweDBkOTU0MWZmLCAweGE4MDE3MTM5LCAweDBjYjNkZTA4LCAweGI0ZTQ5Y2Q4LCAweDU2YzE5MDY0LCAweGNiODQ2MTdiLCAweDMyYjY3MGQ1LCAweDZjNWM3NDQ4LCAweGI4NTc0MmQwXTtcblxuICAgIC8vIFRyYW5zZm9ybWF0aW9ucyBmb3IgZGVjcnlwdGlvbiBrZXkgZXhwYW5zaW9uXG4gICAgdmFyIFUxID0gWzB4MDAwMDAwMDAsIDB4MGUwOTBkMGIsIDB4MWMxMjFhMTYsIDB4MTIxYjE3MWQsIDB4MzgyNDM0MmMsIDB4MzYyZDM5MjcsIDB4MjQzNjJlM2EsIDB4MmEzZjIzMzEsIDB4NzA0ODY4NTgsIDB4N2U0MTY1NTMsIDB4NmM1YTcyNGUsIDB4NjI1MzdmNDUsIDB4NDg2YzVjNzQsIDB4NDY2NTUxN2YsIDB4NTQ3ZTQ2NjIsIDB4NWE3NzRiNjksIDB4ZTA5MGQwYjAsIDB4ZWU5OWRkYmIsIDB4ZmM4MmNhYTYsIDB4ZjI4YmM3YWQsIDB4ZDhiNGU0OWMsIDB4ZDZiZGU5OTcsIDB4YzRhNmZlOGEsIDB4Y2FhZmYzODEsIDB4OTBkOGI4ZTgsIDB4OWVkMWI1ZTMsIDB4OGNjYWEyZmUsIDB4ODJjM2FmZjUsIDB4YThmYzhjYzQsIDB4YTZmNTgxY2YsIDB4YjRlZTk2ZDIsIDB4YmFlNzliZDksIDB4ZGIzYmJiN2IsIDB4ZDUzMmI2NzAsIDB4YzcyOWExNmQsIDB4YzkyMGFjNjYsIDB4ZTMxZjhmNTcsIDB4ZWQxNjgyNWMsIDB4ZmYwZDk1NDEsIDB4ZjEwNDk4NGEsIDB4YWI3M2QzMjMsIDB4YTU3YWRlMjgsIDB4Yjc2MWM5MzUsIDB4Yjk2OGM0M2UsIDB4OTM1N2U3MGYsIDB4OWQ1ZWVhMDQsIDB4OGY0NWZkMTksIDB4ODE0Y2YwMTIsIDB4M2JhYjZiY2IsIDB4MzVhMjY2YzAsIDB4MjdiOTcxZGQsIDB4MjliMDdjZDYsIDB4MDM4ZjVmZTcsIDB4MGQ4NjUyZWMsIDB4MWY5ZDQ1ZjEsIDB4MTE5NDQ4ZmEsIDB4NGJlMzAzOTMsIDB4NDVlYTBlOTgsIDB4NTdmMTE5ODUsIDB4NTlmODE0OGUsIDB4NzNjNzM3YmYsIDB4N2RjZTNhYjQsIDB4NmZkNTJkYTksIDB4NjFkYzIwYTIsIDB4YWQ3NjZkZjYsIDB4YTM3ZjYwZmQsIDB4YjE2NDc3ZTAsIDB4YmY2ZDdhZWIsIDB4OTU1MjU5ZGEsIDB4OWI1YjU0ZDEsIDB4ODk0MDQzY2MsIDB4ODc0OTRlYzcsIDB4ZGQzZTA1YWUsIDB4ZDMzNzA4YTUsIDB4YzEyYzFmYjgsIDB4Y2YyNTEyYjMsIDB4ZTUxYTMxODIsIDB4ZWIxMzNjODksIDB4ZjkwODJiOTQsIDB4ZjcwMTI2OWYsIDB4NGRlNmJkNDYsIDB4NDNlZmIwNGQsIDB4NTFmNGE3NTAsIDB4NWZmZGFhNWIsIDB4NzVjMjg5NmEsIDB4N2JjYjg0NjEsIDB4NjlkMDkzN2MsIDB4NjdkOTllNzcsIDB4M2RhZWQ1MWUsIDB4MzNhN2Q4MTUsIDB4MjFiY2NmMDgsIDB4MmZiNWMyMDMsIDB4MDU4YWUxMzIsIDB4MGI4M2VjMzksIDB4MTk5OGZiMjQsIDB4MTc5MWY2MmYsIDB4NzY0ZGQ2OGQsIDB4Nzg0NGRiODYsIDB4NmE1ZmNjOWIsIDB4NjQ1NmMxOTAsIDB4NGU2OWUyYTEsIDB4NDA2MGVmYWEsIDB4NTI3YmY4YjcsIDB4NWM3MmY1YmMsIDB4MDYwNWJlZDUsIDB4MDgwY2IzZGUsIDB4MWExN2E0YzMsIDB4MTQxZWE5YzgsIDB4M2UyMThhZjksIDB4MzAyODg3ZjIsIDB4MjIzMzkwZWYsIDB4MmMzYTlkZTQsIDB4OTZkZDA2M2QsIDB4OThkNDBiMzYsIDB4OGFjZjFjMmIsIDB4ODRjNjExMjAsIDB4YWVmOTMyMTEsIDB4YTBmMDNmMWEsIDB4YjJlYjI4MDcsIDB4YmNlMjI1MGMsIDB4ZTY5NTZlNjUsIDB4ZTg5YzYzNmUsIDB4ZmE4Nzc0NzMsIDB4ZjQ4ZTc5NzgsIDB4ZGViMTVhNDksIDB4ZDBiODU3NDIsIDB4YzJhMzQwNWYsIDB4Y2NhYTRkNTQsIDB4NDFlY2RhZjcsIDB4NGZlNWQ3ZmMsIDB4NWRmZWMwZTEsIDB4NTNmN2NkZWEsIDB4NzljOGVlZGIsIDB4NzdjMWUzZDAsIDB4NjVkYWY0Y2QsIDB4NmJkM2Y5YzYsIDB4MzFhNGIyYWYsIDB4M2ZhZGJmYTQsIDB4MmRiNmE4YjksIDB4MjNiZmE1YjIsIDB4MDk4MDg2ODMsIDB4MDc4OThiODgsIDB4MTU5MjljOTUsIDB4MWI5YjkxOWUsIDB4YTE3YzBhNDcsIDB4YWY3NTA3NGMsIDB4YmQ2ZTEwNTEsIDB4YjM2NzFkNWEsIDB4OTk1ODNlNmIsIDB4OTc1MTMzNjAsIDB4ODU0YTI0N2QsIDB4OGI0MzI5NzYsIDB4ZDEzNDYyMWYsIDB4ZGYzZDZmMTQsIDB4Y2QyNjc4MDksIDB4YzMyZjc1MDIsIDB4ZTkxMDU2MzMsIDB4ZTcxOTViMzgsIDB4ZjUwMjRjMjUsIDB4ZmIwYjQxMmUsIDB4OWFkNzYxOGMsIDB4OTRkZTZjODcsIDB4ODZjNTdiOWEsIDB4ODhjYzc2OTEsIDB4YTJmMzU1YTAsIDB4YWNmYTU4YWIsIDB4YmVlMTRmYjYsIDB4YjBlODQyYmQsIDB4ZWE5ZjA5ZDQsIDB4ZTQ5NjA0ZGYsIDB4ZjY4ZDEzYzIsIDB4Zjg4NDFlYzksIDB4ZDJiYjNkZjgsIDB4ZGNiMjMwZjMsIDB4Y2VhOTI3ZWUsIDB4YzBhMDJhZTUsIDB4N2E0N2IxM2MsIDB4NzQ0ZWJjMzcsIDB4NjY1NWFiMmEsIDB4Njg1Y2E2MjEsIDB4NDI2Mzg1MTAsIDB4NGM2YTg4MWIsIDB4NWU3MTlmMDYsIDB4NTA3ODkyMGQsIDB4MGEwZmQ5NjQsIDB4MDQwNmQ0NmYsIDB4MTYxZGMzNzIsIDB4MTgxNGNlNzksIDB4MzIyYmVkNDgsIDB4M2MyMmUwNDMsIDB4MmUzOWY3NWUsIDB4MjAzMGZhNTUsIDB4ZWM5YWI3MDEsIDB4ZTI5M2JhMGEsIDB4ZjA4OGFkMTcsIDB4ZmU4MWEwMWMsIDB4ZDRiZTgzMmQsIDB4ZGFiNzhlMjYsIDB4YzhhYzk5M2IsIDB4YzZhNTk0MzAsIDB4OWNkMmRmNTksIDB4OTJkYmQyNTIsIDB4ODBjMGM1NGYsIDB4OGVjOWM4NDQsIDB4YTRmNmViNzUsIDB4YWFmZmU2N2UsIDB4YjhlNGYxNjMsIDB4YjZlZGZjNjgsIDB4MGMwYTY3YjEsIDB4MDIwMzZhYmEsIDB4MTAxODdkYTcsIDB4MWUxMTcwYWMsIDB4MzQyZTUzOWQsIDB4M2EyNzVlOTYsIDB4MjgzYzQ5OGIsIDB4MjYzNTQ0ODAsIDB4N2M0MjBmZTksIDB4NzI0YjAyZTIsIDB4NjA1MDE1ZmYsIDB4NmU1OTE4ZjQsIDB4NDQ2NjNiYzUsIDB4NGE2ZjM2Y2UsIDB4NTg3NDIxZDMsIDB4NTY3ZDJjZDgsIDB4MzdhMTBjN2EsIDB4MzlhODAxNzEsIDB4MmJiMzE2NmMsIDB4MjViYTFiNjcsIDB4MGY4NTM4NTYsIDB4MDE4YzM1NWQsIDB4MTM5NzIyNDAsIDB4MWQ5ZTJmNGIsIDB4NDdlOTY0MjIsIDB4NDllMDY5MjksIDB4NWJmYjdlMzQsIDB4NTVmMjczM2YsIDB4N2ZjZDUwMGUsIDB4NzFjNDVkMDUsIDB4NjNkZjRhMTgsIDB4NmRkNjQ3MTMsIDB4ZDczMWRjY2EsIDB4ZDkzOGQxYzEsIDB4Y2IyM2M2ZGMsIDB4YzUyYWNiZDcsIDB4ZWYxNWU4ZTYsIDB4ZTExY2U1ZWQsIDB4ZjMwN2YyZjAsIDB4ZmQwZWZmZmIsIDB4YTc3OWI0OTIsIDB4YTk3MGI5OTksIDB4YmI2YmFlODQsIDB4YjU2MmEzOGYsIDB4OWY1ZDgwYmUsIDB4OTE1NDhkYjUsIDB4ODM0ZjlhYTgsIDB4OGQ0Njk3YTNdO1xuICAgIHZhciBVMiA9IFsweDAwMDAwMDAwLCAweDBiMGUwOTBkLCAweDE2MWMxMjFhLCAweDFkMTIxYjE3LCAweDJjMzgyNDM0LCAweDI3MzYyZDM5LCAweDNhMjQzNjJlLCAweDMxMmEzZjIzLCAweDU4NzA0ODY4LCAweDUzN2U0MTY1LCAweDRlNmM1YTcyLCAweDQ1NjI1MzdmLCAweDc0NDg2YzVjLCAweDdmNDY2NTUxLCAweDYyNTQ3ZTQ2LCAweDY5NWE3NzRiLCAweGIwZTA5MGQwLCAweGJiZWU5OWRkLCAweGE2ZmM4MmNhLCAweGFkZjI4YmM3LCAweDljZDhiNGU0LCAweDk3ZDZiZGU5LCAweDhhYzRhNmZlLCAweDgxY2FhZmYzLCAweGU4OTBkOGI4LCAweGUzOWVkMWI1LCAweGZlOGNjYWEyLCAweGY1ODJjM2FmLCAweGM0YThmYzhjLCAweGNmYTZmNTgxLCAweGQyYjRlZTk2LCAweGQ5YmFlNzliLCAweDdiZGIzYmJiLCAweDcwZDUzMmI2LCAweDZkYzcyOWExLCAweDY2YzkyMGFjLCAweDU3ZTMxZjhmLCAweDVjZWQxNjgyLCAweDQxZmYwZDk1LCAweDRhZjEwNDk4LCAweDIzYWI3M2QzLCAweDI4YTU3YWRlLCAweDM1Yjc2MWM5LCAweDNlYjk2OGM0LCAweDBmOTM1N2U3LCAweDA0OWQ1ZWVhLCAweDE5OGY0NWZkLCAweDEyODE0Y2YwLCAweGNiM2JhYjZiLCAweGMwMzVhMjY2LCAweGRkMjdiOTcxLCAweGQ2MjliMDdjLCAweGU3MDM4ZjVmLCAweGVjMGQ4NjUyLCAweGYxMWY5ZDQ1LCAweGZhMTE5NDQ4LCAweDkzNGJlMzAzLCAweDk4NDVlYTBlLCAweDg1NTdmMTE5LCAweDhlNTlmODE0LCAweGJmNzNjNzM3LCAweGI0N2RjZTNhLCAweGE5NmZkNTJkLCAweGEyNjFkYzIwLCAweGY2YWQ3NjZkLCAweGZkYTM3ZjYwLCAweGUwYjE2NDc3LCAweGViYmY2ZDdhLCAweGRhOTU1MjU5LCAweGQxOWI1YjU0LCAweGNjODk0MDQzLCAweGM3ODc0OTRlLCAweGFlZGQzZTA1LCAweGE1ZDMzNzA4LCAweGI4YzEyYzFmLCAweGIzY2YyNTEyLCAweDgyZTUxYTMxLCAweDg5ZWIxMzNjLCAweDk0ZjkwODJiLCAweDlmZjcwMTI2LCAweDQ2NGRlNmJkLCAweDRkNDNlZmIwLCAweDUwNTFmNGE3LCAweDViNWZmZGFhLCAweDZhNzVjMjg5LCAweDYxN2JjYjg0LCAweDdjNjlkMDkzLCAweDc3NjdkOTllLCAweDFlM2RhZWQ1LCAweDE1MzNhN2Q4LCAweDA4MjFiY2NmLCAweDAzMmZiNWMyLCAweDMyMDU4YWUxLCAweDM5MGI4M2VjLCAweDI0MTk5OGZiLCAweDJmMTc5MWY2LCAweDhkNzY0ZGQ2LCAweDg2Nzg0NGRiLCAweDliNmE1ZmNjLCAweDkwNjQ1NmMxLCAweGExNGU2OWUyLCAweGFhNDA2MGVmLCAweGI3NTI3YmY4LCAweGJjNWM3MmY1LCAweGQ1MDYwNWJlLCAweGRlMDgwY2IzLCAweGMzMWExN2E0LCAweGM4MTQxZWE5LCAweGY5M2UyMThhLCAweGYyMzAyODg3LCAweGVmMjIzMzkwLCAweGU0MmMzYTlkLCAweDNkOTZkZDA2LCAweDM2OThkNDBiLCAweDJiOGFjZjFjLCAweDIwODRjNjExLCAweDExYWVmOTMyLCAweDFhYTBmMDNmLCAweDA3YjJlYjI4LCAweDBjYmNlMjI1LCAweDY1ZTY5NTZlLCAweDZlZTg5YzYzLCAweDczZmE4Nzc0LCAweDc4ZjQ4ZTc5LCAweDQ5ZGViMTVhLCAweDQyZDBiODU3LCAweDVmYzJhMzQwLCAweDU0Y2NhYTRkLCAweGY3NDFlY2RhLCAweGZjNGZlNWQ3LCAweGUxNWRmZWMwLCAweGVhNTNmN2NkLCAweGRiNzljOGVlLCAweGQwNzdjMWUzLCAweGNkNjVkYWY0LCAweGM2NmJkM2Y5LCAweGFmMzFhNGIyLCAweGE0M2ZhZGJmLCAweGI5MmRiNmE4LCAweGIyMjNiZmE1LCAweDgzMDk4MDg2LCAweDg4MDc4OThiLCAweDk1MTU5MjljLCAweDllMWI5YjkxLCAweDQ3YTE3YzBhLCAweDRjYWY3NTA3LCAweDUxYmQ2ZTEwLCAweDVhYjM2NzFkLCAweDZiOTk1ODNlLCAweDYwOTc1MTMzLCAweDdkODU0YTI0LCAweDc2OGI0MzI5LCAweDFmZDEzNDYyLCAweDE0ZGYzZDZmLCAweDA5Y2QyNjc4LCAweDAyYzMyZjc1LCAweDMzZTkxMDU2LCAweDM4ZTcxOTViLCAweDI1ZjUwMjRjLCAweDJlZmIwYjQxLCAweDhjOWFkNzYxLCAweDg3OTRkZTZjLCAweDlhODZjNTdiLCAweDkxODhjYzc2LCAweGEwYTJmMzU1LCAweGFiYWNmYTU4LCAweGI2YmVlMTRmLCAweGJkYjBlODQyLCAweGQ0ZWE5ZjA5LCAweGRmZTQ5NjA0LCAweGMyZjY4ZDEzLCAweGM5Zjg4NDFlLCAweGY4ZDJiYjNkLCAweGYzZGNiMjMwLCAweGVlY2VhOTI3LCAweGU1YzBhMDJhLCAweDNjN2E0N2IxLCAweDM3NzQ0ZWJjLCAweDJhNjY1NWFiLCAweDIxNjg1Y2E2LCAweDEwNDI2Mzg1LCAweDFiNGM2YTg4LCAweDA2NWU3MTlmLCAweDBkNTA3ODkyLCAweDY0MGEwZmQ5LCAweDZmMDQwNmQ0LCAweDcyMTYxZGMzLCAweDc5MTgxNGNlLCAweDQ4MzIyYmVkLCAweDQzM2MyMmUwLCAweDVlMmUzOWY3LCAweDU1MjAzMGZhLCAweDAxZWM5YWI3LCAweDBhZTI5M2JhLCAweDE3ZjA4OGFkLCAweDFjZmU4MWEwLCAweDJkZDRiZTgzLCAweDI2ZGFiNzhlLCAweDNiYzhhYzk5LCAweDMwYzZhNTk0LCAweDU5OWNkMmRmLCAweDUyOTJkYmQyLCAweDRmODBjMGM1LCAweDQ0OGVjOWM4LCAweDc1YTRmNmViLCAweDdlYWFmZmU2LCAweDYzYjhlNGYxLCAweDY4YjZlZGZjLCAweGIxMGMwYTY3LCAweGJhMDIwMzZhLCAweGE3MTAxODdkLCAweGFjMWUxMTcwLCAweDlkMzQyZTUzLCAweDk2M2EyNzVlLCAweDhiMjgzYzQ5LCAweDgwMjYzNTQ0LCAweGU5N2M0MjBmLCAweGUyNzI0YjAyLCAweGZmNjA1MDE1LCAweGY0NmU1OTE4LCAweGM1NDQ2NjNiLCAweGNlNGE2ZjM2LCAweGQzNTg3NDIxLCAweGQ4NTY3ZDJjLCAweDdhMzdhMTBjLCAweDcxMzlhODAxLCAweDZjMmJiMzE2LCAweDY3MjViYTFiLCAweDU2MGY4NTM4LCAweDVkMDE4YzM1LCAweDQwMTM5NzIyLCAweDRiMWQ5ZTJmLCAweDIyNDdlOTY0LCAweDI5NDllMDY5LCAweDM0NWJmYjdlLCAweDNmNTVmMjczLCAweDBlN2ZjZDUwLCAweDA1NzFjNDVkLCAweDE4NjNkZjRhLCAweDEzNmRkNjQ3LCAweGNhZDczMWRjLCAweGMxZDkzOGQxLCAweGRjY2IyM2M2LCAweGQ3YzUyYWNiLCAweGU2ZWYxNWU4LCAweGVkZTExY2U1LCAweGYwZjMwN2YyLCAweGZiZmQwZWZmLCAweDkyYTc3OWI0LCAweDk5YTk3MGI5LCAweDg0YmI2YmFlLCAweDhmYjU2MmEzLCAweGJlOWY1ZDgwLCAweGI1OTE1NDhkLCAweGE4ODM0ZjlhLCAweGEzOGQ0Njk3XTtcbiAgICB2YXIgVTMgPSBbMHgwMDAwMDAwMCwgMHgwZDBiMGUwOSwgMHgxYTE2MWMxMiwgMHgxNzFkMTIxYiwgMHgzNDJjMzgyNCwgMHgzOTI3MzYyZCwgMHgyZTNhMjQzNiwgMHgyMzMxMmEzZiwgMHg2ODU4NzA0OCwgMHg2NTUzN2U0MSwgMHg3MjRlNmM1YSwgMHg3ZjQ1NjI1MywgMHg1Yzc0NDg2YywgMHg1MTdmNDY2NSwgMHg0NjYyNTQ3ZSwgMHg0YjY5NWE3NywgMHhkMGIwZTA5MCwgMHhkZGJiZWU5OSwgMHhjYWE2ZmM4MiwgMHhjN2FkZjI4YiwgMHhlNDljZDhiNCwgMHhlOTk3ZDZiZCwgMHhmZThhYzRhNiwgMHhmMzgxY2FhZiwgMHhiOGU4OTBkOCwgMHhiNWUzOWVkMSwgMHhhMmZlOGNjYSwgMHhhZmY1ODJjMywgMHg4Y2M0YThmYywgMHg4MWNmYTZmNSwgMHg5NmQyYjRlZSwgMHg5YmQ5YmFlNywgMHhiYjdiZGIzYiwgMHhiNjcwZDUzMiwgMHhhMTZkYzcyOSwgMHhhYzY2YzkyMCwgMHg4ZjU3ZTMxZiwgMHg4MjVjZWQxNiwgMHg5NTQxZmYwZCwgMHg5ODRhZjEwNCwgMHhkMzIzYWI3MywgMHhkZTI4YTU3YSwgMHhjOTM1Yjc2MSwgMHhjNDNlYjk2OCwgMHhlNzBmOTM1NywgMHhlYTA0OWQ1ZSwgMHhmZDE5OGY0NSwgMHhmMDEyODE0YywgMHg2YmNiM2JhYiwgMHg2NmMwMzVhMiwgMHg3MWRkMjdiOSwgMHg3Y2Q2MjliMCwgMHg1ZmU3MDM4ZiwgMHg1MmVjMGQ4NiwgMHg0NWYxMWY5ZCwgMHg0OGZhMTE5NCwgMHgwMzkzNGJlMywgMHgwZTk4NDVlYSwgMHgxOTg1NTdmMSwgMHgxNDhlNTlmOCwgMHgzN2JmNzNjNywgMHgzYWI0N2RjZSwgMHgyZGE5NmZkNSwgMHgyMGEyNjFkYywgMHg2ZGY2YWQ3NiwgMHg2MGZkYTM3ZiwgMHg3N2UwYjE2NCwgMHg3YWViYmY2ZCwgMHg1OWRhOTU1MiwgMHg1NGQxOWI1YiwgMHg0M2NjODk0MCwgMHg0ZWM3ODc0OSwgMHgwNWFlZGQzZSwgMHgwOGE1ZDMzNywgMHgxZmI4YzEyYywgMHgxMmIzY2YyNSwgMHgzMTgyZTUxYSwgMHgzYzg5ZWIxMywgMHgyYjk0ZjkwOCwgMHgyNjlmZjcwMSwgMHhiZDQ2NGRlNiwgMHhiMDRkNDNlZiwgMHhhNzUwNTFmNCwgMHhhYTViNWZmZCwgMHg4OTZhNzVjMiwgMHg4NDYxN2JjYiwgMHg5MzdjNjlkMCwgMHg5ZTc3NjdkOSwgMHhkNTFlM2RhZSwgMHhkODE1MzNhNywgMHhjZjA4MjFiYywgMHhjMjAzMmZiNSwgMHhlMTMyMDU4YSwgMHhlYzM5MGI4MywgMHhmYjI0MTk5OCwgMHhmNjJmMTc5MSwgMHhkNjhkNzY0ZCwgMHhkYjg2Nzg0NCwgMHhjYzliNmE1ZiwgMHhjMTkwNjQ1NiwgMHhlMmExNGU2OSwgMHhlZmFhNDA2MCwgMHhmOGI3NTI3YiwgMHhmNWJjNWM3MiwgMHhiZWQ1MDYwNSwgMHhiM2RlMDgwYywgMHhhNGMzMWExNywgMHhhOWM4MTQxZSwgMHg4YWY5M2UyMSwgMHg4N2YyMzAyOCwgMHg5MGVmMjIzMywgMHg5ZGU0MmMzYSwgMHgwNjNkOTZkZCwgMHgwYjM2OThkNCwgMHgxYzJiOGFjZiwgMHgxMTIwODRjNiwgMHgzMjExYWVmOSwgMHgzZjFhYTBmMCwgMHgyODA3YjJlYiwgMHgyNTBjYmNlMiwgMHg2ZTY1ZTY5NSwgMHg2MzZlZTg5YywgMHg3NDczZmE4NywgMHg3OTc4ZjQ4ZSwgMHg1YTQ5ZGViMSwgMHg1NzQyZDBiOCwgMHg0MDVmYzJhMywgMHg0ZDU0Y2NhYSwgMHhkYWY3NDFlYywgMHhkN2ZjNGZlNSwgMHhjMGUxNWRmZSwgMHhjZGVhNTNmNywgMHhlZWRiNzljOCwgMHhlM2QwNzdjMSwgMHhmNGNkNjVkYSwgMHhmOWM2NmJkMywgMHhiMmFmMzFhNCwgMHhiZmE0M2ZhZCwgMHhhOGI5MmRiNiwgMHhhNWIyMjNiZiwgMHg4NjgzMDk4MCwgMHg4Yjg4MDc4OSwgMHg5Yzk1MTU5MiwgMHg5MTllMWI5YiwgMHgwYTQ3YTE3YywgMHgwNzRjYWY3NSwgMHgxMDUxYmQ2ZSwgMHgxZDVhYjM2NywgMHgzZTZiOTk1OCwgMHgzMzYwOTc1MSwgMHgyNDdkODU0YSwgMHgyOTc2OGI0MywgMHg2MjFmZDEzNCwgMHg2ZjE0ZGYzZCwgMHg3ODA5Y2QyNiwgMHg3NTAyYzMyZiwgMHg1NjMzZTkxMCwgMHg1YjM4ZTcxOSwgMHg0YzI1ZjUwMiwgMHg0MTJlZmIwYiwgMHg2MThjOWFkNywgMHg2Yzg3OTRkZSwgMHg3YjlhODZjNSwgMHg3NjkxODhjYywgMHg1NWEwYTJmMywgMHg1OGFiYWNmYSwgMHg0ZmI2YmVlMSwgMHg0MmJkYjBlOCwgMHgwOWQ0ZWE5ZiwgMHgwNGRmZTQ5NiwgMHgxM2MyZjY4ZCwgMHgxZWM5Zjg4NCwgMHgzZGY4ZDJiYiwgMHgzMGYzZGNiMiwgMHgyN2VlY2VhOSwgMHgyYWU1YzBhMCwgMHhiMTNjN2E0NywgMHhiYzM3NzQ0ZSwgMHhhYjJhNjY1NSwgMHhhNjIxNjg1YywgMHg4NTEwNDI2MywgMHg4ODFiNGM2YSwgMHg5ZjA2NWU3MSwgMHg5MjBkNTA3OCwgMHhkOTY0MGEwZiwgMHhkNDZmMDQwNiwgMHhjMzcyMTYxZCwgMHhjZTc5MTgxNCwgMHhlZDQ4MzIyYiwgMHhlMDQzM2MyMiwgMHhmNzVlMmUzOSwgMHhmYTU1MjAzMCwgMHhiNzAxZWM5YSwgMHhiYTBhZTI5MywgMHhhZDE3ZjA4OCwgMHhhMDFjZmU4MSwgMHg4MzJkZDRiZSwgMHg4ZTI2ZGFiNywgMHg5OTNiYzhhYywgMHg5NDMwYzZhNSwgMHhkZjU5OWNkMiwgMHhkMjUyOTJkYiwgMHhjNTRmODBjMCwgMHhjODQ0OGVjOSwgMHhlYjc1YTRmNiwgMHhlNjdlYWFmZiwgMHhmMTYzYjhlNCwgMHhmYzY4YjZlZCwgMHg2N2IxMGMwYSwgMHg2YWJhMDIwMywgMHg3ZGE3MTAxOCwgMHg3MGFjMWUxMSwgMHg1MzlkMzQyZSwgMHg1ZTk2M2EyNywgMHg0OThiMjgzYywgMHg0NDgwMjYzNSwgMHgwZmU5N2M0MiwgMHgwMmUyNzI0YiwgMHgxNWZmNjA1MCwgMHgxOGY0NmU1OSwgMHgzYmM1NDQ2NiwgMHgzNmNlNGE2ZiwgMHgyMWQzNTg3NCwgMHgyY2Q4NTY3ZCwgMHgwYzdhMzdhMSwgMHgwMTcxMzlhOCwgMHgxNjZjMmJiMywgMHgxYjY3MjViYSwgMHgzODU2MGY4NSwgMHgzNTVkMDE4YywgMHgyMjQwMTM5NywgMHgyZjRiMWQ5ZSwgMHg2NDIyNDdlOSwgMHg2OTI5NDllMCwgMHg3ZTM0NWJmYiwgMHg3MzNmNTVmMiwgMHg1MDBlN2ZjZCwgMHg1ZDA1NzFjNCwgMHg0YTE4NjNkZiwgMHg0NzEzNmRkNiwgMHhkY2NhZDczMSwgMHhkMWMxZDkzOCwgMHhjNmRjY2IyMywgMHhjYmQ3YzUyYSwgMHhlOGU2ZWYxNSwgMHhlNWVkZTExYywgMHhmMmYwZjMwNywgMHhmZmZiZmQwZSwgMHhiNDkyYTc3OSwgMHhiOTk5YTk3MCwgMHhhZTg0YmI2YiwgMHhhMzhmYjU2MiwgMHg4MGJlOWY1ZCwgMHg4ZGI1OTE1NCwgMHg5YWE4ODM0ZiwgMHg5N2EzOGQ0Nl07XG4gICAgdmFyIFU0ID0gWzB4MDAwMDAwMDAsIDB4MDkwZDBiMGUsIDB4MTIxYTE2MWMsIDB4MWIxNzFkMTIsIDB4MjQzNDJjMzgsIDB4MmQzOTI3MzYsIDB4MzYyZTNhMjQsIDB4M2YyMzMxMmEsIDB4NDg2ODU4NzAsIDB4NDE2NTUzN2UsIDB4NWE3MjRlNmMsIDB4NTM3ZjQ1NjIsIDB4NmM1Yzc0NDgsIDB4NjU1MTdmNDYsIDB4N2U0NjYyNTQsIDB4Nzc0YjY5NWEsIDB4OTBkMGIwZTAsIDB4OTlkZGJiZWUsIDB4ODJjYWE2ZmMsIDB4OGJjN2FkZjIsIDB4YjRlNDljZDgsIDB4YmRlOTk3ZDYsIDB4YTZmZThhYzQsIDB4YWZmMzgxY2EsIDB4ZDhiOGU4OTAsIDB4ZDFiNWUzOWUsIDB4Y2FhMmZlOGMsIDB4YzNhZmY1ODIsIDB4ZmM4Y2M0YTgsIDB4ZjU4MWNmYTYsIDB4ZWU5NmQyYjQsIDB4ZTc5YmQ5YmEsIDB4M2JiYjdiZGIsIDB4MzJiNjcwZDUsIDB4MjlhMTZkYzcsIDB4MjBhYzY2YzksIDB4MWY4ZjU3ZTMsIDB4MTY4MjVjZWQsIDB4MGQ5NTQxZmYsIDB4MDQ5ODRhZjEsIDB4NzNkMzIzYWIsIDB4N2FkZTI4YTUsIDB4NjFjOTM1YjcsIDB4NjhjNDNlYjksIDB4NTdlNzBmOTMsIDB4NWVlYTA0OWQsIDB4NDVmZDE5OGYsIDB4NGNmMDEyODEsIDB4YWI2YmNiM2IsIDB4YTI2NmMwMzUsIDB4Yjk3MWRkMjcsIDB4YjA3Y2Q2MjksIDB4OGY1ZmU3MDMsIDB4ODY1MmVjMGQsIDB4OWQ0NWYxMWYsIDB4OTQ0OGZhMTEsIDB4ZTMwMzkzNGIsIDB4ZWEwZTk4NDUsIDB4ZjExOTg1NTcsIDB4ZjgxNDhlNTksIDB4YzczN2JmNzMsIDB4Y2UzYWI0N2QsIDB4ZDUyZGE5NmYsIDB4ZGMyMGEyNjEsIDB4NzY2ZGY2YWQsIDB4N2Y2MGZkYTMsIDB4NjQ3N2UwYjEsIDB4NmQ3YWViYmYsIDB4NTI1OWRhOTUsIDB4NWI1NGQxOWIsIDB4NDA0M2NjODksIDB4NDk0ZWM3ODcsIDB4M2UwNWFlZGQsIDB4MzcwOGE1ZDMsIDB4MmMxZmI4YzEsIDB4MjUxMmIzY2YsIDB4MWEzMTgyZTUsIDB4MTMzYzg5ZWIsIDB4MDgyYjk0ZjksIDB4MDEyNjlmZjcsIDB4ZTZiZDQ2NGQsIDB4ZWZiMDRkNDMsIDB4ZjRhNzUwNTEsIDB4ZmRhYTViNWYsIDB4YzI4OTZhNzUsIDB4Y2I4NDYxN2IsIDB4ZDA5MzdjNjksIDB4ZDk5ZTc3NjcsIDB4YWVkNTFlM2QsIDB4YTdkODE1MzMsIDB4YmNjZjA4MjEsIDB4YjVjMjAzMmYsIDB4OGFlMTMyMDUsIDB4ODNlYzM5MGIsIDB4OThmYjI0MTksIDB4OTFmNjJmMTcsIDB4NGRkNjhkNzYsIDB4NDRkYjg2NzgsIDB4NWZjYzliNmEsIDB4NTZjMTkwNjQsIDB4NjllMmExNGUsIDB4NjBlZmFhNDAsIDB4N2JmOGI3NTIsIDB4NzJmNWJjNWMsIDB4MDViZWQ1MDYsIDB4MGNiM2RlMDgsIDB4MTdhNGMzMWEsIDB4MWVhOWM4MTQsIDB4MjE4YWY5M2UsIDB4Mjg4N2YyMzAsIDB4MzM5MGVmMjIsIDB4M2E5ZGU0MmMsIDB4ZGQwNjNkOTYsIDB4ZDQwYjM2OTgsIDB4Y2YxYzJiOGEsIDB4YzYxMTIwODQsIDB4ZjkzMjExYWUsIDB4ZjAzZjFhYTAsIDB4ZWIyODA3YjIsIDB4ZTIyNTBjYmMsIDB4OTU2ZTY1ZTYsIDB4OWM2MzZlZTgsIDB4ODc3NDczZmEsIDB4OGU3OTc4ZjQsIDB4YjE1YTQ5ZGUsIDB4Yjg1NzQyZDAsIDB4YTM0MDVmYzIsIDB4YWE0ZDU0Y2MsIDB4ZWNkYWY3NDEsIDB4ZTVkN2ZjNGYsIDB4ZmVjMGUxNWQsIDB4ZjdjZGVhNTMsIDB4YzhlZWRiNzksIDB4YzFlM2QwNzcsIDB4ZGFmNGNkNjUsIDB4ZDNmOWM2NmIsIDB4YTRiMmFmMzEsIDB4YWRiZmE0M2YsIDB4YjZhOGI5MmQsIDB4YmZhNWIyMjMsIDB4ODA4NjgzMDksIDB4ODk4Yjg4MDcsIDB4OTI5Yzk1MTUsIDB4OWI5MTllMWIsIDB4N2MwYTQ3YTEsIDB4NzUwNzRjYWYsIDB4NmUxMDUxYmQsIDB4NjcxZDVhYjMsIDB4NTgzZTZiOTksIDB4NTEzMzYwOTcsIDB4NGEyNDdkODUsIDB4NDMyOTc2OGIsIDB4MzQ2MjFmZDEsIDB4M2Q2ZjE0ZGYsIDB4MjY3ODA5Y2QsIDB4MmY3NTAyYzMsIDB4MTA1NjMzZTksIDB4MTk1YjM4ZTcsIDB4MDI0YzI1ZjUsIDB4MGI0MTJlZmIsIDB4ZDc2MThjOWEsIDB4ZGU2Yzg3OTQsIDB4YzU3YjlhODYsIDB4Y2M3NjkxODgsIDB4ZjM1NWEwYTIsIDB4ZmE1OGFiYWMsIDB4ZTE0ZmI2YmUsIDB4ZTg0MmJkYjAsIDB4OWYwOWQ0ZWEsIDB4OTYwNGRmZTQsIDB4OGQxM2MyZjYsIDB4ODQxZWM5ZjgsIDB4YmIzZGY4ZDIsIDB4YjIzMGYzZGMsIDB4YTkyN2VlY2UsIDB4YTAyYWU1YzAsIDB4NDdiMTNjN2EsIDB4NGViYzM3NzQsIDB4NTVhYjJhNjYsIDB4NWNhNjIxNjgsIDB4NjM4NTEwNDIsIDB4NmE4ODFiNGMsIDB4NzE5ZjA2NWUsIDB4Nzg5MjBkNTAsIDB4MGZkOTY0MGEsIDB4MDZkNDZmMDQsIDB4MWRjMzcyMTYsIDB4MTRjZTc5MTgsIDB4MmJlZDQ4MzIsIDB4MjJlMDQzM2MsIDB4MzlmNzVlMmUsIDB4MzBmYTU1MjAsIDB4OWFiNzAxZWMsIDB4OTNiYTBhZTIsIDB4ODhhZDE3ZjAsIDB4ODFhMDFjZmUsIDB4YmU4MzJkZDQsIDB4Yjc4ZTI2ZGEsIDB4YWM5OTNiYzgsIDB4YTU5NDMwYzYsIDB4ZDJkZjU5OWMsIDB4ZGJkMjUyOTIsIDB4YzBjNTRmODAsIDB4YzljODQ0OGUsIDB4ZjZlYjc1YTQsIDB4ZmZlNjdlYWEsIDB4ZTRmMTYzYjgsIDB4ZWRmYzY4YjYsIDB4MGE2N2IxMGMsIDB4MDM2YWJhMDIsIDB4MTg3ZGE3MTAsIDB4MTE3MGFjMWUsIDB4MmU1MzlkMzQsIDB4Mjc1ZTk2M2EsIDB4M2M0OThiMjgsIDB4MzU0NDgwMjYsIDB4NDIwZmU5N2MsIDB4NGIwMmUyNzIsIDB4NTAxNWZmNjAsIDB4NTkxOGY0NmUsIDB4NjYzYmM1NDQsIDB4NmYzNmNlNGEsIDB4NzQyMWQzNTgsIDB4N2QyY2Q4NTYsIDB4YTEwYzdhMzcsIDB4YTgwMTcxMzksIDB4YjMxNjZjMmIsIDB4YmExYjY3MjUsIDB4ODUzODU2MGYsIDB4OGMzNTVkMDEsIDB4OTcyMjQwMTMsIDB4OWUyZjRiMWQsIDB4ZTk2NDIyNDcsIDB4ZTA2OTI5NDksIDB4ZmI3ZTM0NWIsIDB4ZjI3MzNmNTUsIDB4Y2Q1MDBlN2YsIDB4YzQ1ZDA1NzEsIDB4ZGY0YTE4NjMsIDB4ZDY0NzEzNmQsIDB4MzFkY2NhZDcsIDB4MzhkMWMxZDksIDB4MjNjNmRjY2IsIDB4MmFjYmQ3YzUsIDB4MTVlOGU2ZWYsIDB4MWNlNWVkZTEsIDB4MDdmMmYwZjMsIDB4MGVmZmZiZmQsIDB4NzliNDkyYTcsIDB4NzBiOTk5YTksIDB4NmJhZTg0YmIsIDB4NjJhMzhmYjUsIDB4NWQ4MGJlOWYsIDB4NTQ4ZGI1OTEsIDB4NGY5YWE4ODMsIDB4NDY5N2EzOGRdO1xuXG4gICAgZnVuY3Rpb24gY29udmVydFRvSW50MzIoYnl0ZXMpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSA0KSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChcbiAgICAgICAgICAgICAgICAoYnl0ZXNbaSAgICBdIDw8IDI0KSB8XG4gICAgICAgICAgICAgICAgKGJ5dGVzW2kgKyAxXSA8PCAxNikgfFxuICAgICAgICAgICAgICAgIChieXRlc1tpICsgMl0gPDwgIDgpIHxcbiAgICAgICAgICAgICAgICAgYnl0ZXNbaSArIDNdXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdmFyIEFFUyA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQUVTKSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0FFUyBtdXN0IGJlIGluc3Rhbml0YXRlZCB3aXRoIGBuZXdgJyk7XG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2tleScsIHtcbiAgICAgICAgICAgIHZhbHVlOiBjb2VyY2VBcnJheShrZXksIHRydWUpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX3ByZXBhcmUoKTtcbiAgICB9XG5cblxuICAgIEFFUy5wcm90b3R5cGUuX3ByZXBhcmUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgcm91bmRzID0gbnVtYmVyT2ZSb3VuZHNbdGhpcy5rZXkubGVuZ3RoXTtcbiAgICAgICAgaWYgKHJvdW5kcyA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQga2V5IHNpemUgKG11c3QgYmUgMTYsIDI0IG9yIDMyIGJ5dGVzKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZW5jcnlwdGlvbiByb3VuZCBrZXlzXG4gICAgICAgIHRoaXMuX0tlID0gW107XG5cbiAgICAgICAgLy8gZGVjcnlwdGlvbiByb3VuZCBrZXlzXG4gICAgICAgIHRoaXMuX0tkID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gcm91bmRzOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX0tlLnB1c2goWzAsIDAsIDAsIDBdKTtcbiAgICAgICAgICAgIHRoaXMuX0tkLnB1c2goWzAsIDAsIDAsIDBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByb3VuZEtleUNvdW50ID0gKHJvdW5kcyArIDEpICogNDtcbiAgICAgICAgdmFyIEtDID0gdGhpcy5rZXkubGVuZ3RoIC8gNDtcblxuICAgICAgICAvLyBjb252ZXJ0IHRoZSBrZXkgaW50byBpbnRzXG4gICAgICAgIHZhciB0ayA9IGNvbnZlcnRUb0ludDMyKHRoaXMua2V5KTtcblxuICAgICAgICAvLyBjb3B5IHZhbHVlcyBpbnRvIHJvdW5kIGtleSBhcnJheXNcbiAgICAgICAgdmFyIGluZGV4O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IEtDOyBpKyspIHtcbiAgICAgICAgICAgIGluZGV4ID0gaSA+PiAyO1xuICAgICAgICAgICAgdGhpcy5fS2VbaW5kZXhdW2kgJSA0XSA9IHRrW2ldO1xuICAgICAgICAgICAgdGhpcy5fS2Rbcm91bmRzIC0gaW5kZXhdW2kgJSA0XSA9IHRrW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8ga2V5IGV4cGFuc2lvbiAoZmlwcy0xOTcgc2VjdGlvbiA1LjIpXG4gICAgICAgIHZhciByY29ucG9pbnRlciA9IDA7XG4gICAgICAgIHZhciB0ID0gS0MsIHR0O1xuICAgICAgICB3aGlsZSAodCA8IHJvdW5kS2V5Q291bnQpIHtcbiAgICAgICAgICAgIHR0ID0gdGtbS0MgLSAxXTtcbiAgICAgICAgICAgIHRrWzBdIF49ICgoU1sodHQgPj4gMTYpICYgMHhGRl0gPDwgMjQpIF5cbiAgICAgICAgICAgICAgICAgICAgICAoU1sodHQgPj4gIDgpICYgMHhGRl0gPDwgMTYpIF5cbiAgICAgICAgICAgICAgICAgICAgICAoU1sgdHQgICAgICAgICYgMHhGRl0gPDwgIDgpIF5cbiAgICAgICAgICAgICAgICAgICAgICAgU1sodHQgPj4gMjQpICYgMHhGRl0gICAgICAgIF5cbiAgICAgICAgICAgICAgICAgICAgICAocmNvbltyY29ucG9pbnRlcl0gPDwgMjQpKTtcbiAgICAgICAgICAgIHJjb25wb2ludGVyICs9IDE7XG5cbiAgICAgICAgICAgIC8vIGtleSBleHBhbnNpb24gKGZvciBub24tMjU2IGJpdClcbiAgICAgICAgICAgIGlmIChLQyAhPSA4KSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBLQzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRrW2ldIF49IHRrW2kgLSAxXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGtleSBleHBhbnNpb24gZm9yIDI1Ni1iaXQga2V5cyBpcyBcInNsaWdodGx5IGRpZmZlcmVudFwiIChmaXBzLTE5NylcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCAoS0MgLyAyKTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRrW2ldIF49IHRrW2kgLSAxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHQgPSB0a1soS0MgLyAyKSAtIDFdO1xuXG4gICAgICAgICAgICAgICAgdGtbS0MgLyAyXSBePSAoU1sgdHQgICAgICAgICYgMHhGRl0gICAgICAgIF5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChTWyh0dCA+PiAgOCkgJiAweEZGXSA8PCAgOCkgXlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFNbKHR0ID4+IDE2KSAmIDB4RkZdIDw8IDE2KSBeXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoU1sodHQgPj4gMjQpICYgMHhGRl0gPDwgMjQpKTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAoS0MgLyAyKSArIDE7IGkgPCBLQzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRrW2ldIF49IHRrW2kgLSAxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNvcHkgdmFsdWVzIGludG8gcm91bmQga2V5IGFycmF5c1xuICAgICAgICAgICAgdmFyIGkgPSAwLCByLCBjO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCBLQyAmJiB0IDwgcm91bmRLZXlDb3VudCkge1xuICAgICAgICAgICAgICAgIHIgPSB0ID4+IDI7XG4gICAgICAgICAgICAgICAgYyA9IHQgJSA0O1xuICAgICAgICAgICAgICAgIHRoaXMuX0tlW3JdW2NdID0gdGtbaV07XG4gICAgICAgICAgICAgICAgdGhpcy5fS2Rbcm91bmRzIC0gcl1bY10gPSB0a1tpKytdO1xuICAgICAgICAgICAgICAgIHQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGludmVyc2UtY2lwaGVyLWlmeSB0aGUgZGVjcnlwdGlvbiByb3VuZCBrZXkgKGZpcHMtMTk3IHNlY3Rpb24gNS4zKVxuICAgICAgICBmb3IgKHZhciByID0gMTsgciA8IHJvdW5kczsgcisrKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IDQ7IGMrKykge1xuICAgICAgICAgICAgICAgIHR0ID0gdGhpcy5fS2Rbcl1bY107XG4gICAgICAgICAgICAgICAgdGhpcy5fS2Rbcl1bY10gPSAoVTFbKHR0ID4+IDI0KSAmIDB4RkZdIF5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVMlsodHQgPj4gMTYpICYgMHhGRl0gXlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFUzWyh0dCA+PiAgOCkgJiAweEZGXSBeXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVTRbIHR0ICAgICAgICAmIDB4RkZdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIEFFUy5wcm90b3R5cGUuZW5jcnlwdCA9IGZ1bmN0aW9uKHBsYWludGV4dCkge1xuICAgICAgICBpZiAocGxhaW50ZXh0Lmxlbmd0aCAhPSAxNikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBsYWludGV4dCBzaXplIChtdXN0IGJlIDE2IGJ5dGVzKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJvdW5kcyA9IHRoaXMuX0tlLmxlbmd0aCAtIDE7XG4gICAgICAgIHZhciBhID0gWzAsIDAsIDAsIDBdO1xuXG4gICAgICAgIC8vIGNvbnZlcnQgcGxhaW50ZXh0IHRvIChpbnRzIF4ga2V5KVxuICAgICAgICB2YXIgdCA9IGNvbnZlcnRUb0ludDMyKHBsYWludGV4dCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgICB0W2ldIF49IHRoaXMuX0tlWzBdW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYXBwbHkgcm91bmQgdHJhbnNmb3Jtc1xuICAgICAgICBmb3IgKHZhciByID0gMTsgciA8IHJvdW5kczsgcisrKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGFbaV0gPSAoVDFbKHRbIGkgICAgICAgICBdID4+IDI0KSAmIDB4ZmZdIF5cbiAgICAgICAgICAgICAgICAgICAgICAgIFQyWyh0WyhpICsgMSkgJSA0XSA+PiAxNikgJiAweGZmXSBeXG4gICAgICAgICAgICAgICAgICAgICAgICBUM1sodFsoaSArIDIpICUgNF0gPj4gIDgpICYgMHhmZl0gXlxuICAgICAgICAgICAgICAgICAgICAgICAgVDRbIHRbKGkgKyAzKSAlIDRdICAgICAgICAmIDB4ZmZdIF5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX0tlW3JdW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHQgPSBhLnNsaWNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGUgbGFzdCByb3VuZCBpcyBzcGVjaWFsXG4gICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVBcnJheSgxNiksIHR0O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgdHQgPSB0aGlzLl9LZVtyb3VuZHNdW2ldO1xuICAgICAgICAgICAgcmVzdWx0WzQgKiBpICAgIF0gPSAoU1sodFsgaSAgICAgICAgIF0gPj4gMjQpICYgMHhmZl0gXiAodHQgPj4gMjQpKSAmIDB4ZmY7XG4gICAgICAgICAgICByZXN1bHRbNCAqIGkgKyAxXSA9IChTWyh0WyhpICsgMSkgJSA0XSA+PiAxNikgJiAweGZmXSBeICh0dCA+PiAxNikpICYgMHhmZjtcbiAgICAgICAgICAgIHJlc3VsdFs0ICogaSArIDJdID0gKFNbKHRbKGkgKyAyKSAlIDRdID4+ICA4KSAmIDB4ZmZdIF4gKHR0ID4+ICA4KSkgJiAweGZmO1xuICAgICAgICAgICAgcmVzdWx0WzQgKiBpICsgM10gPSAoU1sgdFsoaSArIDMpICUgNF0gICAgICAgICYgMHhmZl0gXiAgdHQgICAgICAgKSAmIDB4ZmY7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIEFFUy5wcm90b3R5cGUuZGVjcnlwdCA9IGZ1bmN0aW9uKGNpcGhlcnRleHQpIHtcbiAgICAgICAgaWYgKGNpcGhlcnRleHQubGVuZ3RoICE9IDE2KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgY2lwaGVydGV4dCBzaXplIChtdXN0IGJlIDE2IGJ5dGVzKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJvdW5kcyA9IHRoaXMuX0tkLmxlbmd0aCAtIDE7XG4gICAgICAgIHZhciBhID0gWzAsIDAsIDAsIDBdO1xuXG4gICAgICAgIC8vIGNvbnZlcnQgcGxhaW50ZXh0IHRvIChpbnRzIF4ga2V5KVxuICAgICAgICB2YXIgdCA9IGNvbnZlcnRUb0ludDMyKGNpcGhlcnRleHQpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgdFtpXSBePSB0aGlzLl9LZFswXVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFwcGx5IHJvdW5kIHRyYW5zZm9ybXNcbiAgICAgICAgZm9yICh2YXIgciA9IDE7IHIgPCByb3VuZHM7IHIrKykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICAgICAgICBhW2ldID0gKFQ1Wyh0WyBpICAgICAgICAgIF0gPj4gMjQpICYgMHhmZl0gXlxuICAgICAgICAgICAgICAgICAgICAgICAgVDZbKHRbKGkgKyAzKSAlIDRdID4+IDE2KSAmIDB4ZmZdIF5cbiAgICAgICAgICAgICAgICAgICAgICAgIFQ3Wyh0WyhpICsgMikgJSA0XSA+PiAgOCkgJiAweGZmXSBeXG4gICAgICAgICAgICAgICAgICAgICAgICBUOFsgdFsoaSArIDEpICUgNF0gICAgICAgICYgMHhmZl0gXlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fS2Rbcl1baV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdCA9IGEuc2xpY2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoZSBsYXN0IHJvdW5kIGlzIHNwZWNpYWxcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUFycmF5KDE2KSwgdHQ7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgICB0dCA9IHRoaXMuX0tkW3JvdW5kc11baV07XG4gICAgICAgICAgICByZXN1bHRbNCAqIGkgICAgXSA9IChTaVsodFsgaSAgICAgICAgIF0gPj4gMjQpICYgMHhmZl0gXiAodHQgPj4gMjQpKSAmIDB4ZmY7XG4gICAgICAgICAgICByZXN1bHRbNCAqIGkgKyAxXSA9IChTaVsodFsoaSArIDMpICUgNF0gPj4gMTYpICYgMHhmZl0gXiAodHQgPj4gMTYpKSAmIDB4ZmY7XG4gICAgICAgICAgICByZXN1bHRbNCAqIGkgKyAyXSA9IChTaVsodFsoaSArIDIpICUgNF0gPj4gIDgpICYgMHhmZl0gXiAodHQgPj4gIDgpKSAmIDB4ZmY7XG4gICAgICAgICAgICByZXN1bHRbNCAqIGkgKyAzXSA9IChTaVsgdFsoaSArIDEpICUgNF0gICAgICAgICYgMHhmZl0gXiAgdHQgICAgICAgKSAmIDB4ZmY7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogIE1vZGUgT2YgT3BlcmF0aW9uIC0gRWxlY3RvbmljIENvZGVib29rIChFQ0IpXG4gICAgICovXG4gICAgdmFyIE1vZGVPZk9wZXJhdGlvbkVDQiA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTW9kZU9mT3BlcmF0aW9uRUNCKSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0FFUyBtdXN0IGJlIGluc3Rhbml0YXRlZCB3aXRoIGBuZXdgJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gXCJFbGVjdHJvbmljIENvZGUgQmxvY2tcIjtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJlY2JcIjtcblxuICAgICAgICB0aGlzLl9hZXMgPSBuZXcgQUVTKGtleSk7XG4gICAgfVxuXG4gICAgTW9kZU9mT3BlcmF0aW9uRUNCLnByb3RvdHlwZS5lbmNyeXB0ID0gZnVuY3Rpb24ocGxhaW50ZXh0KSB7XG4gICAgICAgIHBsYWludGV4dCA9IGNvZXJjZUFycmF5KHBsYWludGV4dCk7XG5cbiAgICAgICAgaWYgKChwbGFpbnRleHQubGVuZ3RoICUgMTYpICE9PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcGxhaW50ZXh0IHNpemUgKG11c3QgYmUgbXVsdGlwbGUgb2YgMTYgYnl0ZXMpJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2lwaGVydGV4dCA9IGNyZWF0ZUFycmF5KHBsYWludGV4dC5sZW5ndGgpO1xuICAgICAgICB2YXIgYmxvY2sgPSBjcmVhdGVBcnJheSgxNik7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGFpbnRleHQubGVuZ3RoOyBpICs9IDE2KSB7XG4gICAgICAgICAgICBjb3B5QXJyYXkocGxhaW50ZXh0LCBibG9jaywgMCwgaSwgaSArIDE2KTtcbiAgICAgICAgICAgIGJsb2NrID0gdGhpcy5fYWVzLmVuY3J5cHQoYmxvY2spO1xuICAgICAgICAgICAgY29weUFycmF5KGJsb2NrLCBjaXBoZXJ0ZXh0LCBpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaXBoZXJ0ZXh0O1xuICAgIH1cblxuICAgIE1vZGVPZk9wZXJhdGlvbkVDQi5wcm90b3R5cGUuZGVjcnlwdCA9IGZ1bmN0aW9uKGNpcGhlcnRleHQpIHtcbiAgICAgICAgY2lwaGVydGV4dCA9IGNvZXJjZUFycmF5KGNpcGhlcnRleHQpO1xuXG4gICAgICAgIGlmICgoY2lwaGVydGV4dC5sZW5ndGggJSAxNikgIT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBjaXBoZXJ0ZXh0IHNpemUgKG11c3QgYmUgbXVsdGlwbGUgb2YgMTYgYnl0ZXMpJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGxhaW50ZXh0ID0gY3JlYXRlQXJyYXkoY2lwaGVydGV4dC5sZW5ndGgpO1xuICAgICAgICB2YXIgYmxvY2sgPSBjcmVhdGVBcnJheSgxNik7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaXBoZXJ0ZXh0Lmxlbmd0aDsgaSArPSAxNikge1xuICAgICAgICAgICAgY29weUFycmF5KGNpcGhlcnRleHQsIGJsb2NrLCAwLCBpLCBpICsgMTYpO1xuICAgICAgICAgICAgYmxvY2sgPSB0aGlzLl9hZXMuZGVjcnlwdChibG9jayk7XG4gICAgICAgICAgICBjb3B5QXJyYXkoYmxvY2ssIHBsYWludGV4dCwgaSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGxhaW50ZXh0O1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogIE1vZGUgT2YgT3BlcmF0aW9uIC0gQ2lwaGVyIEJsb2NrIENoYWluaW5nIChDQkMpXG4gICAgICovXG4gICAgdmFyIE1vZGVPZk9wZXJhdGlvbkNCQyA9IGZ1bmN0aW9uKGtleSwgaXYpIHtcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE1vZGVPZk9wZXJhdGlvbkNCQykpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdBRVMgbXVzdCBiZSBpbnN0YW5pdGF0ZWQgd2l0aCBgbmV3YCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IFwiQ2lwaGVyIEJsb2NrIENoYWluaW5nXCI7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiY2JjXCI7XG5cbiAgICAgICAgaWYgKCFpdikge1xuICAgICAgICAgICAgaXYgPSBjcmVhdGVBcnJheSgxNik7XG5cbiAgICAgICAgfSBlbHNlIGlmIChpdi5sZW5ndGggIT0gMTYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBpbml0aWFsYXRpb24gdmVjdG9yIHNpemUgKG11c3QgYmUgMTYgYnl0ZXMpJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sYXN0Q2lwaGVyYmxvY2sgPSBjb2VyY2VBcnJheShpdiwgdHJ1ZSk7XG5cbiAgICAgICAgdGhpcy5fYWVzID0gbmV3IEFFUyhrZXkpO1xuICAgIH1cblxuICAgIE1vZGVPZk9wZXJhdGlvbkNCQy5wcm90b3R5cGUuZW5jcnlwdCA9IGZ1bmN0aW9uKHBsYWludGV4dCkge1xuICAgICAgICBwbGFpbnRleHQgPSBjb2VyY2VBcnJheShwbGFpbnRleHQpO1xuXG4gICAgICAgIGlmICgocGxhaW50ZXh0Lmxlbmd0aCAlIDE2KSAhPT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBsYWludGV4dCBzaXplIChtdXN0IGJlIG11bHRpcGxlIG9mIDE2IGJ5dGVzKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNpcGhlcnRleHQgPSBjcmVhdGVBcnJheShwbGFpbnRleHQubGVuZ3RoKTtcbiAgICAgICAgdmFyIGJsb2NrID0gY3JlYXRlQXJyYXkoMTYpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGxhaW50ZXh0Lmxlbmd0aDsgaSArPSAxNikge1xuICAgICAgICAgICAgY29weUFycmF5KHBsYWludGV4dCwgYmxvY2ssIDAsIGksIGkgKyAxNik7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgMTY7IGorKykge1xuICAgICAgICAgICAgICAgIGJsb2NrW2pdIF49IHRoaXMuX2xhc3RDaXBoZXJibG9ja1tqXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fbGFzdENpcGhlcmJsb2NrID0gdGhpcy5fYWVzLmVuY3J5cHQoYmxvY2spO1xuICAgICAgICAgICAgY29weUFycmF5KHRoaXMuX2xhc3RDaXBoZXJibG9jaywgY2lwaGVydGV4dCwgaSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2lwaGVydGV4dDtcbiAgICB9XG5cbiAgICBNb2RlT2ZPcGVyYXRpb25DQkMucHJvdG90eXBlLmRlY3J5cHQgPSBmdW5jdGlvbihjaXBoZXJ0ZXh0KSB7XG4gICAgICAgIGNpcGhlcnRleHQgPSBjb2VyY2VBcnJheShjaXBoZXJ0ZXh0KTtcblxuICAgICAgICBpZiAoKGNpcGhlcnRleHQubGVuZ3RoICUgMTYpICE9PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgY2lwaGVydGV4dCBzaXplIChtdXN0IGJlIG11bHRpcGxlIG9mIDE2IGJ5dGVzKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBsYWludGV4dCA9IGNyZWF0ZUFycmF5KGNpcGhlcnRleHQubGVuZ3RoKTtcbiAgICAgICAgdmFyIGJsb2NrID0gY3JlYXRlQXJyYXkoMTYpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2lwaGVydGV4dC5sZW5ndGg7IGkgKz0gMTYpIHtcbiAgICAgICAgICAgIGNvcHlBcnJheShjaXBoZXJ0ZXh0LCBibG9jaywgMCwgaSwgaSArIDE2KTtcbiAgICAgICAgICAgIGJsb2NrID0gdGhpcy5fYWVzLmRlY3J5cHQoYmxvY2spO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDE2OyBqKyspIHtcbiAgICAgICAgICAgICAgICBwbGFpbnRleHRbaSArIGpdID0gYmxvY2tbal0gXiB0aGlzLl9sYXN0Q2lwaGVyYmxvY2tbal07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvcHlBcnJheShjaXBoZXJ0ZXh0LCB0aGlzLl9sYXN0Q2lwaGVyYmxvY2ssIDAsIGksIGkgKyAxNik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGxhaW50ZXh0O1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogIE1vZGUgT2YgT3BlcmF0aW9uIC0gQ2lwaGVyIEZlZWRiYWNrIChDRkIpXG4gICAgICovXG4gICAgdmFyIE1vZGVPZk9wZXJhdGlvbkNGQiA9IGZ1bmN0aW9uKGtleSwgaXYsIHNlZ21lbnRTaXplKSB7XG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNb2RlT2ZPcGVyYXRpb25DRkIpKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignQUVTIG11c3QgYmUgaW5zdGFuaXRhdGVkIHdpdGggYG5ld2AnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBcIkNpcGhlciBGZWVkYmFja1wiO1xuICAgICAgICB0aGlzLm5hbWUgPSBcImNmYlwiO1xuXG4gICAgICAgIGlmICghaXYpIHtcbiAgICAgICAgICAgIGl2ID0gY3JlYXRlQXJyYXkoMTYpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoaXYubGVuZ3RoICE9IDE2KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgaW5pdGlhbGF0aW9uIHZlY3RvciBzaXplIChtdXN0IGJlIDE2IHNpemUpJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNlZ21lbnRTaXplKSB7IHNlZ21lbnRTaXplID0gMTsgfVxuXG4gICAgICAgIHRoaXMuc2VnbWVudFNpemUgPSBzZWdtZW50U2l6ZTtcblxuICAgICAgICB0aGlzLl9zaGlmdFJlZ2lzdGVyID0gY29lcmNlQXJyYXkoaXYsIHRydWUpO1xuXG4gICAgICAgIHRoaXMuX2FlcyA9IG5ldyBBRVMoa2V5KTtcbiAgICB9XG5cbiAgICBNb2RlT2ZPcGVyYXRpb25DRkIucHJvdG90eXBlLmVuY3J5cHQgPSBmdW5jdGlvbihwbGFpbnRleHQpIHtcbiAgICAgICAgaWYgKChwbGFpbnRleHQubGVuZ3RoICUgdGhpcy5zZWdtZW50U2l6ZSkgIT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBsYWludGV4dCBzaXplIChtdXN0IGJlIHNlZ21lbnRTaXplIGJ5dGVzKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVuY3J5cHRlZCA9IGNvZXJjZUFycmF5KHBsYWludGV4dCwgdHJ1ZSk7XG5cbiAgICAgICAgdmFyIHhvclNlZ21lbnQ7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW5jcnlwdGVkLmxlbmd0aDsgaSArPSB0aGlzLnNlZ21lbnRTaXplKSB7XG4gICAgICAgICAgICB4b3JTZWdtZW50ID0gdGhpcy5fYWVzLmVuY3J5cHQodGhpcy5fc2hpZnRSZWdpc3Rlcik7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMuc2VnbWVudFNpemU7IGorKykge1xuICAgICAgICAgICAgICAgIGVuY3J5cHRlZFtpICsgal0gXj0geG9yU2VnbWVudFtqXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2hpZnQgdGhlIHJlZ2lzdGVyXG4gICAgICAgICAgICBjb3B5QXJyYXkodGhpcy5fc2hpZnRSZWdpc3RlciwgdGhpcy5fc2hpZnRSZWdpc3RlciwgMCwgdGhpcy5zZWdtZW50U2l6ZSk7XG4gICAgICAgICAgICBjb3B5QXJyYXkoZW5jcnlwdGVkLCB0aGlzLl9zaGlmdFJlZ2lzdGVyLCAxNiAtIHRoaXMuc2VnbWVudFNpemUsIGksIGkgKyB0aGlzLnNlZ21lbnRTaXplKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbmNyeXB0ZWQ7XG4gICAgfVxuXG4gICAgTW9kZU9mT3BlcmF0aW9uQ0ZCLnByb3RvdHlwZS5kZWNyeXB0ID0gZnVuY3Rpb24oY2lwaGVydGV4dCkge1xuICAgICAgICBpZiAoKGNpcGhlcnRleHQubGVuZ3RoICUgdGhpcy5zZWdtZW50U2l6ZSkgIT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGNpcGhlcnRleHQgc2l6ZSAobXVzdCBiZSBzZWdtZW50U2l6ZSBieXRlcyknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwbGFpbnRleHQgPSBjb2VyY2VBcnJheShjaXBoZXJ0ZXh0LCB0cnVlKTtcblxuICAgICAgICB2YXIgeG9yU2VnbWVudDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGFpbnRleHQubGVuZ3RoOyBpICs9IHRoaXMuc2VnbWVudFNpemUpIHtcbiAgICAgICAgICAgIHhvclNlZ21lbnQgPSB0aGlzLl9hZXMuZW5jcnlwdCh0aGlzLl9zaGlmdFJlZ2lzdGVyKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLnNlZ21lbnRTaXplOyBqKyspIHtcbiAgICAgICAgICAgICAgICBwbGFpbnRleHRbaSArIGpdIF49IHhvclNlZ21lbnRbal07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNoaWZ0IHRoZSByZWdpc3RlclxuICAgICAgICAgICAgY29weUFycmF5KHRoaXMuX3NoaWZ0UmVnaXN0ZXIsIHRoaXMuX3NoaWZ0UmVnaXN0ZXIsIDAsIHRoaXMuc2VnbWVudFNpemUpO1xuICAgICAgICAgICAgY29weUFycmF5KGNpcGhlcnRleHQsIHRoaXMuX3NoaWZ0UmVnaXN0ZXIsIDE2IC0gdGhpcy5zZWdtZW50U2l6ZSwgaSwgaSArIHRoaXMuc2VnbWVudFNpemUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBsYWludGV4dDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgTW9kZSBPZiBPcGVyYXRpb24gLSBPdXRwdXQgRmVlZGJhY2sgKE9GQilcbiAgICAgKi9cbiAgICB2YXIgTW9kZU9mT3BlcmF0aW9uT0ZCID0gZnVuY3Rpb24oa2V5LCBpdikge1xuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTW9kZU9mT3BlcmF0aW9uT0ZCKSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0FFUyBtdXN0IGJlIGluc3Rhbml0YXRlZCB3aXRoIGBuZXdgJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gXCJPdXRwdXQgRmVlZGJhY2tcIjtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJvZmJcIjtcblxuICAgICAgICBpZiAoIWl2KSB7XG4gICAgICAgICAgICBpdiA9IGNyZWF0ZUFycmF5KDE2KTtcblxuICAgICAgICB9IGVsc2UgaWYgKGl2Lmxlbmd0aCAhPSAxNikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGluaXRpYWxhdGlvbiB2ZWN0b3Igc2l6ZSAobXVzdCBiZSAxNiBieXRlcyknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xhc3RQcmVjaXBoZXIgPSBjb2VyY2VBcnJheShpdiwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuX2xhc3RQcmVjaXBoZXJJbmRleCA9IDE2O1xuXG4gICAgICAgIHRoaXMuX2FlcyA9IG5ldyBBRVMoa2V5KTtcbiAgICB9XG5cbiAgICBNb2RlT2ZPcGVyYXRpb25PRkIucHJvdG90eXBlLmVuY3J5cHQgPSBmdW5jdGlvbihwbGFpbnRleHQpIHtcbiAgICAgICAgdmFyIGVuY3J5cHRlZCA9IGNvZXJjZUFycmF5KHBsYWludGV4dCwgdHJ1ZSk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNyeXB0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9sYXN0UHJlY2lwaGVySW5kZXggPT09IDE2KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGFzdFByZWNpcGhlciA9IHRoaXMuX2Flcy5lbmNyeXB0KHRoaXMuX2xhc3RQcmVjaXBoZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RQcmVjaXBoZXJJbmRleCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbmNyeXB0ZWRbaV0gXj0gdGhpcy5fbGFzdFByZWNpcGhlclt0aGlzLl9sYXN0UHJlY2lwaGVySW5kZXgrK107XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZW5jcnlwdGVkO1xuICAgIH1cblxuICAgIC8vIERlY3J5cHRpb24gaXMgc3ltZXRyaWNcbiAgICBNb2RlT2ZPcGVyYXRpb25PRkIucHJvdG90eXBlLmRlY3J5cHQgPSBNb2RlT2ZPcGVyYXRpb25PRkIucHJvdG90eXBlLmVuY3J5cHQ7XG5cblxuICAgIC8qKlxuICAgICAqICBDb3VudGVyIG9iamVjdCBmb3IgQ1RSIGNvbW1vbiBtb2RlIG9mIG9wZXJhdGlvblxuICAgICAqL1xuICAgIHZhciBDb3VudGVyID0gZnVuY3Rpb24oaW5pdGlhbFZhbHVlKSB7XG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBDb3VudGVyKSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0NvdW50ZXIgbXVzdCBiZSBpbnN0YW5pdGF0ZWQgd2l0aCBgbmV3YCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2UgYWxsb3cgMCwgYnV0IGFueXRoaW5nIGZhbHNlLWlzaCB1c2VzIHRoZSBkZWZhdWx0IDFcbiAgICAgICAgaWYgKGluaXRpYWxWYWx1ZSAhPT0gMCAmJiAhaW5pdGlhbFZhbHVlKSB7IGluaXRpYWxWYWx1ZSA9IDE7IH1cblxuICAgICAgICBpZiAodHlwZW9mKGluaXRpYWxWYWx1ZSkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLl9jb3VudGVyID0gY3JlYXRlQXJyYXkoMTYpO1xuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZShpbml0aWFsVmFsdWUpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldEJ5dGVzKGluaXRpYWxWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBDb3VudGVyLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YodmFsdWUpICE9PSAnbnVtYmVyJyB8fCBwYXJzZUludCh2YWx1ZSkgIT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBjb3VudGVyIHZhbHVlIChtdXN0IGJlIGFuIGludGVnZXIpJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXZSBjYW5ub3Qgc2FmZWx5IGhhbmRsZSBudW1iZXJzIGJleW9uZCB0aGUgc2FmZSByYW5nZSBmb3IgaW50ZWdlcnNcbiAgICAgICAgaWYgKHZhbHVlID4gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW50ZWdlciB2YWx1ZSBvdXQgb2Ygc2FmZSByYW5nZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAxNTsgaW5kZXggPj0gMDsgLS1pbmRleCkge1xuICAgICAgICAgICAgdGhpcy5fY291bnRlcltpbmRleF0gPSB2YWx1ZSAlIDI1NjtcbiAgICAgICAgICAgIHZhbHVlID0gcGFyc2VJbnQodmFsdWUgLyAyNTYpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQ291bnRlci5wcm90b3R5cGUuc2V0Qnl0ZXMgPSBmdW5jdGlvbihieXRlcykge1xuICAgICAgICBieXRlcyA9IGNvZXJjZUFycmF5KGJ5dGVzLCB0cnVlKTtcblxuICAgICAgICBpZiAoYnl0ZXMubGVuZ3RoICE9IDE2KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgY291bnRlciBieXRlcyBzaXplIChtdXN0IGJlIDE2IGJ5dGVzKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY291bnRlciA9IGJ5dGVzO1xuICAgIH07XG5cbiAgICBDb3VudGVyLnByb3RvdHlwZS5pbmNyZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE1OyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NvdW50ZXJbaV0gPT09IDI1NSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvdW50ZXJbaV0gPSAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb3VudGVyW2ldKys7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqICBNb2RlIE9mIE9wZXJhdGlvbiAtIENvdW50ZXIgKENUUilcbiAgICAgKi9cbiAgICB2YXIgTW9kZU9mT3BlcmF0aW9uQ1RSID0gZnVuY3Rpb24oa2V5LCBjb3VudGVyKSB7XG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNb2RlT2ZPcGVyYXRpb25DVFIpKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignQUVTIG11c3QgYmUgaW5zdGFuaXRhdGVkIHdpdGggYG5ld2AnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBcIkNvdW50ZXJcIjtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJjdHJcIjtcblxuICAgICAgICBpZiAoIShjb3VudGVyIGluc3RhbmNlb2YgQ291bnRlcikpIHtcbiAgICAgICAgICAgIGNvdW50ZXIgPSBuZXcgQ291bnRlcihjb3VudGVyKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY291bnRlciA9IGNvdW50ZXI7XG5cbiAgICAgICAgdGhpcy5fcmVtYWluaW5nQ291bnRlciA9IG51bGw7XG4gICAgICAgIHRoaXMuX3JlbWFpbmluZ0NvdW50ZXJJbmRleCA9IDE2O1xuXG4gICAgICAgIHRoaXMuX2FlcyA9IG5ldyBBRVMoa2V5KTtcbiAgICB9XG5cbiAgICBNb2RlT2ZPcGVyYXRpb25DVFIucHJvdG90eXBlLmVuY3J5cHQgPSBmdW5jdGlvbihwbGFpbnRleHQpIHtcbiAgICAgICAgdmFyIGVuY3J5cHRlZCA9IGNvZXJjZUFycmF5KHBsYWludGV4dCwgdHJ1ZSk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNyeXB0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9yZW1haW5pbmdDb3VudGVySW5kZXggPT09IDE2KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtYWluaW5nQ291bnRlciA9IHRoaXMuX2Flcy5lbmNyeXB0KHRoaXMuX2NvdW50ZXIuX2NvdW50ZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbWFpbmluZ0NvdW50ZXJJbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5fY291bnRlci5pbmNyZW1lbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVuY3J5cHRlZFtpXSBePSB0aGlzLl9yZW1haW5pbmdDb3VudGVyW3RoaXMuX3JlbWFpbmluZ0NvdW50ZXJJbmRleCsrXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbmNyeXB0ZWQ7XG4gICAgfVxuXG4gICAgLy8gRGVjcnlwdGlvbiBpcyBzeW1ldHJpY1xuICAgIE1vZGVPZk9wZXJhdGlvbkNUUi5wcm90b3R5cGUuZGVjcnlwdCA9IE1vZGVPZk9wZXJhdGlvbkNUUi5wcm90b3R5cGUuZW5jcnlwdDtcblxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBQYWRkaW5nXG5cbiAgICAvLyBTZWU6aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzIzMTVcbiAgICBmdW5jdGlvbiBwa2NzN3BhZChkYXRhKSB7XG4gICAgICAgIGRhdGEgPSBjb2VyY2VBcnJheShkYXRhLCB0cnVlKTtcbiAgICAgICAgdmFyIHBhZGRlciA9IDE2IC0gKGRhdGEubGVuZ3RoICUgMTYpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlQXJyYXkoZGF0YS5sZW5ndGggKyBwYWRkZXIpO1xuICAgICAgICBjb3B5QXJyYXkoZGF0YSwgcmVzdWx0KTtcbiAgICAgICAgZm9yICh2YXIgaSA9IGRhdGEubGVuZ3RoOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHRbaV0gPSBwYWRkZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwa2NzN3N0cmlwKGRhdGEpIHtcbiAgICAgICAgZGF0YSA9IGNvZXJjZUFycmF5KGRhdGEsIHRydWUpO1xuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPCAxNikgeyB0aHJvdyBuZXcgRXJyb3IoJ1BLQ1MjNyBpbnZhbGlkIGxlbmd0aCcpOyB9XG5cbiAgICAgICAgdmFyIHBhZGRlciA9IGRhdGFbZGF0YS5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKHBhZGRlciA+IDE2KSB7IHRocm93IG5ldyBFcnJvcignUEtDUyM3IHBhZGRpbmcgYnl0ZSBvdXQgb2YgcmFuZ2UnKTsgfVxuXG4gICAgICAgIHZhciBsZW5ndGggPSBkYXRhLmxlbmd0aCAtIHBhZGRlcjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWRkZXI7IGkrKykge1xuICAgICAgICAgICAgaWYgKGRhdGFbbGVuZ3RoICsgaV0gIT09IHBhZGRlcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUEtDUyM3IGludmFsaWQgcGFkZGluZyBieXRlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlQXJyYXkobGVuZ3RoKTtcbiAgICAgICAgY29weUFycmF5KGRhdGEsIHJlc3VsdCwgMCwgMCwgbGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIEV4cG9ydGluZ1xuXG5cbiAgICAvLyBUaGUgYmxvY2sgY2lwaGVyXG4gICAgdmFyIGFlc2pzID0ge1xuICAgICAgICBBRVM6IEFFUyxcbiAgICAgICAgQ291bnRlcjogQ291bnRlcixcblxuICAgICAgICBNb2RlT2ZPcGVyYXRpb246IHtcbiAgICAgICAgICAgIGVjYjogTW9kZU9mT3BlcmF0aW9uRUNCLFxuICAgICAgICAgICAgY2JjOiBNb2RlT2ZPcGVyYXRpb25DQkMsXG4gICAgICAgICAgICBjZmI6IE1vZGVPZk9wZXJhdGlvbkNGQixcbiAgICAgICAgICAgIG9mYjogTW9kZU9mT3BlcmF0aW9uT0ZCLFxuICAgICAgICAgICAgY3RyOiBNb2RlT2ZPcGVyYXRpb25DVFJcbiAgICAgICAgfSxcblxuICAgICAgICB1dGlsczoge1xuICAgICAgICAgICAgaGV4OiBjb252ZXJ0SGV4LFxuICAgICAgICAgICAgdXRmODogY29udmVydFV0ZjhcbiAgICAgICAgfSxcblxuICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgICBwa2NzNzoge1xuICAgICAgICAgICAgICAgIHBhZDogcGtjczdwYWQsXG4gICAgICAgICAgICAgICAgc3RyaXA6IHBrY3M3c3RyaXBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBfYXJyYXlUZXN0OiB7XG4gICAgICAgICAgICBjb2VyY2VBcnJheTogY29lcmNlQXJyYXksXG4gICAgICAgICAgICBjcmVhdGVBcnJheTogY3JlYXRlQXJyYXksXG4gICAgICAgICAgICBjb3B5QXJyYXk6IGNvcHlBcnJheSxcbiAgICAgICAgfVxuICAgIH07XG5cblxuICAgIC8vIG5vZGUuanNcbiAgICBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gYWVzanNcblxuICAgIC8vIFJlcXVpcmVKUy9BTURcbiAgICAvLyBodHRwOi8vd3d3LnJlcXVpcmVqcy5vcmcvZG9jcy9hcGkuaHRtbFxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbWRqcy9hbWRqcy1hcGkvd2lraS9BTURcbiAgICB9IGVsc2UgaWYgKHR5cGVvZihkZWZpbmUpID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFtdLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFlc2pzOyB9KTtcblxuICAgIC8vIFdlYiBCcm93c2Vyc1xuICAgIH0gZWxzZSB7XG5cbiAgICAgICAgLy8gSWYgdGhlcmUgd2FzIGFuIGV4aXN0aW5nIGxpYnJhcnkgYXQgXCJhZXNqc1wiIG1ha2Ugc3VyZSBpdCdzIHN0aWxsIGF2YWlsYWJsZVxuICAgICAgICBpZiAocm9vdC5hZXNqcykge1xuICAgICAgICAgICAgYWVzanMuX2Flc2pzID0gcm9vdC5hZXNqcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJvb3QuYWVzanMgPSBhZXNqcztcbiAgICB9XG5cblxufSkodGhpcyk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/aes-js/index.js\n");

/***/ }),

/***/ "./node_modules/big-integer/BigInteger.js":
/*!************************************************!*\
  !*** ./node_modules/big-integer/BigInteger.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\r\n        return new NativeBigInt(this.value / parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\r\n        return new NativeBigInt(this.value % parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\r\n        if (b === _0) return Integer[1];\r\n        if (a === _0) return Integer[0];\r\n        if (a === _1) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(_0);\r\n        var x = this;\r\n        var y = Integer[1];\r\n        while (true) {\r\n            if ((b & _1) === _1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === _0) break;\r\n            b /= _2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        if (exp.isNegative()) {\r\n            exp = exp.multiply(Integer[-1]);\r\n            base = base.modInv(mod);\r\n        }\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b, rng) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var usedRNG = rng || Math.random;\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] : BASE;\r\n            var digit = truncate(usedRNG() * top);\r\n            result.push(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif ( true && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (true) {\r\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\r\n        return bigInt;\r\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n}\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/big-integer/BigInteger.js\n");

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function eventListener() {\n      if (errorListener !== undefined) {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n    var errorListener;\n\n    // Adding an error listener is not optional because\n    // if an error is thrown on an event emitter we cannot\n    // guarantee that the actual event we are waiting will\n    // be fired. The result could be a silent way to create\n    // memory or file descriptor leaks, which is something\n    // we should avoid.\n    if (name !== 'error') {\n      errorListener = function errorListener(err) {\n        emitter.removeListener(name, eventListener);\n        reject(err);\n      };\n\n      emitter.once('error', errorListener);\n    }\n\n    emitter.once(name, eventListener);\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/events/events.js\n");

/***/ }),

/***/ "./node_modules/leemon/es/index.js":
/*!*****************************************!*\
  !*** ./node_modules/leemon/es/index.js ***!
  \*****************************************/
/*! exports provided: bpe, one, zero, findPrimes, millerRabinInt, millerRabin, bitSize, expand, randTruePrime, randProbPrime, randProbPrimeRounds, mod, addInt, mult, powMod, sub, add, inverseMod, multMod, randTruePrime_, randBigInt, randBigInt_, GCD, GCD_, inverseMod_, inverseModInt, eGCD_, negative, greaterShift, greater, divide_, carry_, modInt, int2bigInt, str2bigInt, equalsInt, equals, isZero, bigInt2str, dup, copy_, copyInt_, addInt_, rightShift_, halve_, leftShift_, multInt_, divInt_, linComb_, linCombShift_, addShift_, subShift_, sub_, add_, mult_, mod_, multMod_, squareMod_, trim, powMod_, mont_ */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bpe\", function() { return bpe; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"one\", function() { return one; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"zero\", function() { return zero; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findPrimes\", function() { return findPrimes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"millerRabinInt\", function() { return millerRabinInt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"millerRabin\", function() { return millerRabin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bitSize\", function() { return bitSize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"expand\", function() { return expand; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randTruePrime\", function() { return randTruePrime; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randProbPrime\", function() { return randProbPrime; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randProbPrimeRounds\", function() { return randProbPrimeRounds; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mod\", function() { return mod; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addInt\", function() { return addInt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mult\", function() { return mult; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"powMod\", function() { return powMod; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inverseMod\", function() { return inverseMod; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multMod\", function() { return multMod; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randTruePrime_\", function() { return randTruePrime_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randBigInt\", function() { return randBigInt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randBigInt_\", function() { return randBigInt_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GCD\", function() { return GCD; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GCD_\", function() { return GCD_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inverseMod_\", function() { return inverseMod_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inverseModInt\", function() { return inverseModInt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eGCD_\", function() { return eGCD_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"negative\", function() { return negative; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"greaterShift\", function() { return greaterShift; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"greater\", function() { return greater; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"divide_\", function() { return divide_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"carry_\", function() { return carry_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"modInt\", function() { return modInt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"int2bigInt\", function() { return int2bigInt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"str2bigInt\", function() { return str2bigInt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equalsInt\", function() { return equalsInt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isZero\", function() { return isZero; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bigInt2str\", function() { return bigInt2str; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dup\", function() { return dup; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copy_\", function() { return copy_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copyInt_\", function() { return copyInt_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addInt_\", function() { return addInt_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rightShift_\", function() { return rightShift_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"halve_\", function() { return halve_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"leftShift_\", function() { return leftShift_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multInt_\", function() { return multInt_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"divInt_\", function() { return divInt_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"linComb_\", function() { return linComb_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"linCombShift_\", function() { return linCombShift_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addShift_\", function() { return addShift_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subShift_\", function() { return subShift_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub_\", function() { return sub_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add_\", function() { return add_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mult_\", function() { return mult_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mod_\", function() { return mod_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multMod_\", function() { return multMod_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squareMod_\", function() { return squareMod_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"trim\", function() { return trim; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"powMod_\", function() { return powMod_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mont_\", function() { return mont_; });\n\n/** * * * * * * * * * *\n * Big Integer Library *\n * Created 2000        *\n * Leemon Baird        *\n * www.leemon.com      *\n * * * * * * * * * * * */\n////////////////////////////////////////////////////////////////////////////////////////\n// These functions are designed to avoid frequent dynamic memory allocation in the inner loop.\n// For most functions, if it needs a BigInt as a local variable it will actually use\n// a global, and will only allocate to it only when it's not the right size.  This ensures\n// that when a function is called repeatedly with same-sized parameters, it only allocates\n// memory on the first call.\n//\n// Note that for cryptographic purposes, the calls to Math.random() must\n// be replaced with calls to a better pseudorandom number generator.\n//\n// In the following, \"bigInt\" means a bigInt with at least one leading zero element,\n// and \"integer\" means a nonnegative integer less than radix.  In some cases, integer\n// can be negative.  Negative bigInts are 2s complement.\n//\n// The following functions do not modify their inputs.\n// Those returning a bigInt, string, or Array will dynamically allocate memory for that value.\n// Those returning a boolean will return the integer 0 (false) or 1 (true).\n// Those returning boolean or int will not allocate memory except possibly on the first\n// time they're called with a given parameter size.\n//\n// bigInt  add(x,y)               //return (x+y) for bigInts x and y.\n// bigInt  addInt(x,n)            //return (x+n) where x is a bigInt and n is an integer.\n// string  bigInt2str(x,base)     //return a string form of bigInt x in a given base, with 2 <= base <= 95\n// int     bitSize(x)             //return how many bits long the bigInt x is, not counting leading zeros\n// bigInt  dup(x)                 //return a copy of bigInt x\n// boolean equals(x,y)            //is the bigInt x equal to the bigint y?\n// boolean equalsInt(x,y)         //is bigint x equal to integer y?\n// bigInt  expand(x,n)            //return a copy of x with at least n elements, adding leading zeros if needed\n// Array   findPrimes(n)          //return array of all primes less than integer n\n// bigInt  GCD(x,y)               //return greatest common divisor of bigInts x and y (each with same number of elements).\n// boolean greater(x,y)           //is x>y?  (x and y are nonnegative bigInts)\n// boolean greaterShift(x,y,shift)//is (x <<(shift*bpe)) > y?\n// bigInt  int2bigInt(t,n,m)      //return a bigInt equal to integer t, with at least n bits and m array elements\n// bigInt  inverseMod(x,n)        //return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null\n// int     inverseModInt(x,n)     //return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse\n// boolean isZero(x)              //is the bigInt x equal to zero?\n// boolean millerRabin(x,b)       //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is bigInt, 1<b<x)\n// boolean millerRabinInt(x,b)    //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is int,    1<b<x)\n// bigInt  mod(x,n)               //return a new bigInt equal to (x mod n) for bigInts x and n.\n// int     modInt(x,n)            //return x mod n for bigInt x and integer n.\n// bigInt  mult(x,y)              //return x*y for bigInts x and y. This is faster when y<x.\n// bigInt  multMod(x,y,n)         //return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.\n// boolean negative(x)            //is bigInt x negative?\n// bigInt  powMod(x,y,n)          //return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.\n// bigInt  randBigInt(n,s)        //return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\n// bigInt  randTruePrime(k)       //return a new, random, k-bit, true prime bigInt using Maurer's algorithm.\n// bigInt  randProbPrime(k)       //return a new, random, k-bit, probable prime bigInt (probability it's composite less than 2^-80).\n// bigInt  str2bigInt(s,b,n,m)    //return a bigInt for number represented in string s in base b with at least n bits and m array elements\n// bigInt  sub(x,y)               //return (x-y) for bigInts x and y.  Negative answers will be 2s complement\n// bigInt  trim(x,k)              //return a copy of x with exactly k leading zero elements\n//\n//\n// The following functions each have a non-underscored version, which most users should call instead.\n// These functions each write to a single parameter, and the caller is responsible for ensuring the array\n// passed in is large enough to hold the result.\n//\n// void    addInt_(x,n)          //do x=x+n where x is a bigInt and n is an integer\n// void    add_(x,y)             //do x=x+y for bigInts x and y\n// void    copy_(x,y)            //do x=y on bigInts x and y\n// void    copyInt_(x,n)         //do x=n on bigInt x and integer n\n// void    GCD_(x,y)             //set x to the greatest common divisor of bigInts x and y, (y is destroyed).  (This never overflows its array).\n// boolean inverseMod_(x,n)      //do x=x**(-1) mod n, for bigInts x and n. Returns 1 (0) if inverse does (doesn't) exist\n// void    mod_(x,n)             //do x=x mod n for bigInts x and n. (This never overflows its array).\n// void    mult_(x,y)            //do x=x*y for bigInts x and y.\n// void    multMod_(x,y,n)       //do x=x*y  mod n for bigInts x,y,n.\n// void    powMod_(x,y,n)        //do x=x**y mod n, where x,y,n are bigInts (n is odd) and ** is exponentiation.  0**0=1.\n// void    randBigInt_(b,n,s)    //do b = an n-bit random BigInt. if s=1, then nth bit (most significant bit) is set to 1. n>=1.\n// void    randTruePrime_(ans,k) //do ans = a random k-bit true random prime (not just probable prime) with 1 in the msb.\n// void    sub_(x,y)             //do x=x-y for bigInts x and y. Negative answers will be 2s complement.\n//\n// The following functions do NOT have a non-underscored version.\n// They each write a bigInt result to one or more parameters.  The caller is responsible for\n// ensuring the arrays passed in are large enough to hold the results.\n//\n// void addShift_(x,y,ys)       //do x=x+(y<<(ys*bpe))\n// void carry_(x)               //do carries and borrows so each element of the bigInt x fits in bpe bits.\n// void divide_(x,y,q,r)        //divide x by y giving quotient q and remainder r\n// int  divInt_(x,n)            //do x=floor(x/n) for bigInt x and integer n, and return the remainder. (This never overflows its array).\n// void eGCD_(x,y,d,a,b)        //sets a,b,d to positive bigInts such that d = GCD_(x,y) = a*x-b*y\n// void halve_(x)               //do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement.  (This never overflows its array).\n// void leftShift_(x,n)         //left shift bigInt x by n bits.  n<bpe.\n// void linComb_(x,y,a,b)       //do x=a*x+b*y for bigInts x and y and integers a and b\n// void linCombShift_(x,y,b,ys) //do x=x+b*(y<<(ys*bpe)) for bigInts x and y, and integers b and ys\n// void mont_(x,y,n,np)         //Montgomery multiplication (see comments where the function is defined)\n// void multInt_(x,n)           //do x=x*n where x is a bigInt and n is an integer.\n// void rightShift_(x,n)        //right shift bigInt x by n bits.  0 <= n < bpe. (This never overflows its array).\n// void squareMod_(x,n)         //do x=x*x  mod n for bigInts x,n\n// void subShift_(x,y,ys)       //do x=x-(y<<(ys*bpe)). Negative answers will be 2s complement.\n//\n// The following functions are based on algorithms from the _Handbook of Applied Cryptography_\n//    powMod_()           = algorithm 14.94, Montgomery exponentiation\n//    eGCD_,inverseMod_() = algorithm 14.61, Binary extended GCD_\n//    GCD_()              = algorothm 14.57, Lehmer's algorithm\n//    mont_()             = algorithm 14.36, Montgomery multiplication\n//    divide_()           = algorithm 14.20  Multiple-precision division\n//    squareMod_()        = algorithm 14.16  Multiple-precision squaring\n//    randTruePrime_()    = algorithm  4.62, Maurer's algorithm\n//    millerRabin()       = algorithm  4.24, Miller-Rabin algorithm\n//\n// Profiling shows:\n//     randTruePrime_() spends:\n//         10% of its time in calls to powMod_()\n//         85% of its time in calls to millerRabin()\n//     millerRabin() spends:\n//         99% of its time in calls to powMod_()   (always with a base of 2)\n//     powMod_() spends:\n//         94% of its time in calls to mont_()  (almost always with x==y)\n//\n// This suggests there are several ways to speed up this library slightly:\n//     - convert powMod_ to use a Montgomery form of k-ary window (or maybe a Montgomery form of sliding window)\n//         -- this should especially focus on being fast when raising 2 to a power mod n\n//     - convert randTruePrime_() to use a minimum r of 1/3 instead of 1/2 with the appropriate change to the test\n//     - tune the parameters in randTruePrime_(), including c, m, and recLimit\n//     - speed up the single loop in mont_() that takes 95% of the runtime, perhaps by reducing checking\n//       within the loop when all the parameters are the same length.\n//\n// There are several ideas that look like they wouldn't help much at all:\n//     - replacing trial division in randTruePrime_() with a sieve (that speeds up something taking almost no time anyway)\n//     - increase bpe from 15 to 30 (that would help if we had a 32*32->64 multiplier, but not with JavaScript's 32*32->32)\n//     - speeding up mont_(x,y,n,np) when x==y by doing a non-modular, non-Montgomery square\n//       followed by a Montgomery reduction.  The intermediate answer will be twice as long as x, so that\n//       method would be slower.  This is unfortunate because the code currently spends almost all of its time\n//       doing mont_(x,x,...), both for randTruePrime_() and powMod_().  A faster method for Montgomery squaring\n//       would have a large impact on the speed of randTruePrime_() and powMod_().  HAC has a couple of poorly-worded\n//       sentences that seem to imply it's faster to do a non-modular square followed by a single\n//       Montgomery reduction, but that's obviously wrong.\n////////////////////////////////////////////////////////////////////////////////////////\n\n//globals\nvar bpe = 0; //bits stored per array element\n\nvar mask = 0; //AND this with an array element to chop it down to bpe bits\n\nvar radix = mask + 1; //equals 2^bpe.  A single 1 bit to the left of the last bit of mask.\n//the digits for converting to different bases\n\nvar digitsStr = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_=!@#$%^&*()[]{}|;:,.<>/?`~ \\\\\\'\"+-'; //initialize the global variables\n//bpe=number of bits in the mantissa on this platform\n\nfor (bpe = 0; 1 << bpe + 1 > 1 << bpe; bpe++) {\n  ;\n}\n\nbpe >>= 1; //bpe=number of bits in one element of the array representing the bigInt\n\nmask = (1 << bpe) - 1; //AND the mask with an integer to get its bpe least significant bits\n\nradix = mask + 1; //2^bpe.  a single 1 bit to the left of the first bit of mask\n\nvar one = int2bigInt(1, 1, 1); //constant used in powMod_()\n\nvar zero = int2bigInt(0, 1, 1); //the following global variables are scratchpad memory to\n//reduce dynamic memory allocation in the inner loop\n\nvar t = new Array(0);\nvar ss = t; //used in mult_()\n\nvar s0 = t; //used in multMod_(), squareMod_()\n// var s1=t;    //used in powMod_(), multMod_(), squareMod_()\n// var s2=t;    //used in powMod_(), multMod_()\n\nvar s3 = t; //used in powMod_()\n\nvar s4 = t,\n    s5 = t; //used in mod_()\n\nvar s6 = t; //used in bigInt2str()\n\nvar s7 = t; //used in powMod_()\n\nvar T = t; //used in GCD_()\n\nvar sa = t; //used in mont_()\n\nvar mr_x1 = t,\n    mr_r = t,\n    mr_a = t,\n    //used in millerRabin()\neg_v = t,\n    eg_u = t,\n    eg_A = t,\n    eg_B = t,\n    eg_C = t,\n    eg_D = t,\n    //used in eGCD_(), inverseMod_()\n//, md_q1=t, md_q2=t, md_q3=t, md_r=t, md_r1=t, md_r2=t, md_tt=t, //used in mod_()\nprimes = t,\n    pows = t,\n    s_i = t,\n    s_i2 = t,\n    s_R = t,\n    s_rm = t,\n    s_q = t,\n    s_n1 = t,\n    s_a = t,\n    s_r2 = t,\n    s_n = t,\n    s_b = t,\n    s_d = t,\n    s_x1 = t,\n    s_x2 = t,\n    s_aa = t,\n    //used in randTruePrime_()\nrpprb = t; //used in randProbPrimeRounds() (which also uses \"primes\")\n////////////////////////////////////////////////////////////////////////////////////////\n\nvar k, buff;\n/**\n * return array of all primes less than integer n\n *\n * @param {number} n\n * @returns {number[]}\n */\n\nfunction findPrimes(n) {\n  var i, s, p, ans;\n  s = new Array(n);\n\n  for (i = 0; i < n; i++) {\n    s[i] = 0;\n  }\n\n  s[0] = 2;\n  p = 0; //first p elements of s are primes, the rest are a sieve\n\n  for (; s[p] < n;) {\n    //s[p] is the pth prime\n    for (i = s[p] * s[p]; i < n; i += s[p] //mark multiples of s[p]\n    ) {\n      s[i] = 1;\n    }\n\n    p++;\n    s[p] = s[p - 1] + 1;\n\n    for (; s[p] < n && s[s[p]]; s[p]++) {\n      ;\n    } //find next prime (where s[p]==0)\n\n  }\n\n  ans = new Array(p);\n\n  for (i = 0; i < p; i++) {\n    ans[i] = s[i];\n  }\n\n  return ans;\n}\n/**\n * does a single round of Miller-Rabin base b consider x to be a possible prime?\n *\n * x is a bigInt, and b is an integer, with b<x\n *\n * @export\n * @param {number[]} x\n * @param {number} b\n * @returns {(0 | 1)}\n */\n\nfunction millerRabinInt(x, b) {\n  if (mr_x1.length !== x.length) {\n    mr_x1 = dup(x);\n    mr_r = dup(x);\n    mr_a = dup(x);\n  }\n\n  copyInt_(mr_a, b);\n  return millerRabin(x, mr_a);\n}\n/**\n * does a single round of Miller-Rabin base b consider x to be a possible prime?\n *\n * x and b are bigInts with b<x\n *\n * @export\n * @param {number[]} x\n * @param {number[]} b\n * @returns {(0 | 1)}\n */\n\nfunction millerRabin(x, b) {\n  var i, j, k, s;\n\n  if (mr_x1.length !== x.length) {\n    mr_x1 = dup(x);\n    mr_r = dup(x);\n    mr_a = dup(x);\n  }\n\n  copy_(mr_a, b);\n  copy_(mr_r, x);\n  copy_(mr_x1, x);\n  addInt_(mr_r, -1);\n  addInt_(mr_x1, -1); //s=the highest power of two that divides mr_r\n\n  k = 0;\n\n  for (i = 0; i < mr_r.length; i++) {\n    for (j = 1; j < mask; j <<= 1) {\n      if (x[i] & j) {\n        s = k < mr_r.length + bpe ? k : 0;\n        i = mr_r.length;\n        j = mask;\n      } else k++;\n    }\n  }\n\n  if (s) rightShift_(mr_r, s);\n  powMod_(mr_a, mr_r, x);\n\n  if (!equalsInt(mr_a, 1) && !equals(mr_a, mr_x1)) {\n    j = 1; //$off\n\n    while (j <= s - 1 && !equals(mr_a, mr_x1)) {\n      squareMod_(mr_a, x);\n\n      if (equalsInt(mr_a, 1)) {\n        return 0;\n      }\n\n      j++;\n    }\n\n    if (!equals(mr_a, mr_x1)) {\n      return 0;\n    }\n  }\n\n  return 1;\n}\n/**\n * returns how many bits long the bigInt is, not counting leading zeros.\n *\n * @param {number[]} x\n * @returns {number}\n */\n\nfunction bitSize(x) {\n  var j, z, w;\n\n  for (j = x.length - 1; x[j] == 0 && j > 0; j--) {\n    ;\n  }\n\n  for (z = 0, w = x[j]; w; w >>= 1, z++) {\n    ;\n  }\n\n  z += bpe * j;\n  return z;\n}\n/**\n * return a copy of x with at least n elements, adding leading zeros if needed\n *\n * @param {number[]} x\n * @param {number} n\n * @returns {number[]}\n */\n\nfunction expand(x, n) {\n  var ans = int2bigInt(0, (x.length > n ? x.length : n) * bpe, 0);\n  copy_(ans, x);\n  return ans;\n}\n/**\n * return a k-bit true random prime using Maurer's algorithm.\n *\n * @export\n * @param {number} k\n * @returns {number[]}\n */\n\nfunction randTruePrime(k) {\n  var ans = int2bigInt(0, k, 0);\n  randTruePrime_(ans, k);\n  return trim(ans, 1);\n}\n/**\n * return a k-bit random probable prime with probability of error < 2^-80\n *\n * @export\n * @param {number} k\n * @returns {number[]}\n */\n\nfunction randProbPrime(k) {\n  if (k >= 600) return randProbPrimeRounds(k, 2); //numbers from HAC table 4.3\n\n  if (k >= 550) return randProbPrimeRounds(k, 4);\n  if (k >= 500) return randProbPrimeRounds(k, 5);\n  if (k >= 400) return randProbPrimeRounds(k, 6);\n  if (k >= 350) return randProbPrimeRounds(k, 7);\n  if (k >= 300) return randProbPrimeRounds(k, 9);\n  if (k >= 250) return randProbPrimeRounds(k, 12); //numbers from HAC table 4.4\n\n  if (k >= 200) return randProbPrimeRounds(k, 15);\n  if (k >= 150) return randProbPrimeRounds(k, 18);\n  if (k >= 100) return randProbPrimeRounds(k, 27);\n  return randProbPrimeRounds(k, 40); //number from HAC remark 4.26 (only an estimate)\n}\n/**\n * return a k-bit probable random prime using n rounds of Miller Rabin\n * (after trial division with small primes)\n *\n * @export\n * @param {number} k\n * @param {number} n\n * @returns {number[]}\n */\n\nfunction randProbPrimeRounds(k, n) {\n  var ans, i, divisible, B;\n  B = 30000; //B is largest prime to use in trial division\n\n  ans = int2bigInt(0, k, 0); //optimization: try larger and smaller B to find the best limit.\n\n  if (primes.length === 0) primes = findPrimes(30000); //check for divisibility by primes <=30000\n\n  if (rpprb.length !== ans.length) rpprb = dup(ans);\n\n  for (;;) {\n    //keep trying random values for ans until one appears to be prime\n    //optimization: pick a random number times L=2*3*5*...*p, plus a\n    //   random element of the list of all numbers in [0,L) not divisible by any prime up to p.\n    //   This can reduce the amount of random number generation.\n    randBigInt_(ans, k, 0); //ans = a random odd number to check\n\n    ans[0] |= 1;\n    divisible = 0; //check ans for divisibility by small primes up to B\n\n    for (i = 0; i < primes.length && primes[i] <= B; i++) {\n      if (modInt(ans, primes[i]) === 0 && !equalsInt(ans, primes[i])) {\n        divisible = 1;\n        break;\n      }\n    } //optimization: change millerRabin so the base can be bigger than the number being checked, then eliminate the while here.\n    //do n rounds of Miller Rabin, with random bases less than ans\n\n\n    for (i = 0; i < n && !divisible; i++) {\n      randBigInt_(rpprb, k, 0);\n\n      while (!greater(ans, rpprb) //pick a random rpprb that's < ans\n      ) {\n        randBigInt_(rpprb, k, 0);\n      }\n\n      if (!millerRabin(ans, rpprb)) divisible = 1;\n    }\n\n    if (!divisible) return ans;\n  }\n  /*::\n  declare var never: empty\n  return never\n  */\n\n}\n/**\n * return a new bigInt equal to (x mod n) for bigInts x and n.\n *\n * @param {number[]} x\n * @param {number[]} n\n * @returns {number[]}\n */\n\nfunction mod(x, n) {\n  var ans = dup(x);\n  mod_(ans, n);\n  return trim(ans, 1);\n}\n/**\n * return (x+n) where x is a bigInt and n is an integer.\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n * @returns {number[]}\n */\n\nfunction addInt(x, n) {\n  var ans = expand(x, x.length + 1);\n  addInt_(ans, n);\n  return trim(ans, 1);\n}\n/**\n * return x*y for bigInts x and y. This is faster when y<x.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {number[]}\n */\n\nfunction mult(x, y) {\n  var ans = expand(x, x.length + y.length);\n  mult_(ans, y);\n  return trim(ans, 1);\n}\n/**\n * return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.\n *\n * 0**0=1.\n *\n * Faster for odd n.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} n\n * @returns {number[]}\n */\n\nfunction powMod(x, y, n) {\n  var ans = expand(x, n.length);\n  powMod_( //this should work without the trim, but doesn't\n  ans, trim(y, 2), trim(n, 2));\n  return trim(ans, 1);\n}\n/**\n * return (x-y) for bigInts x and y\n *\n * Negative answers will be 2s complement\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {number[]}\n */\n\nfunction sub(x, y) {\n  var ans = expand(x, x.length > y.length ? x.length + 1 : y.length + 1);\n  sub_(ans, y);\n  return trim(ans, 1);\n}\n/**\n * return (x+y) for bigInts x and y\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {number[]}\n */\n\nfunction add(x, y) {\n  var ans = expand(x, x.length > y.length ? x.length + 1 : y.length + 1);\n  add_(ans, y);\n  return trim(ans, 1);\n}\n/**\n * return (x**(-1) mod n) for bigInts x and n.\n *\n * If no inverse exists, it returns null\n *\n * @param {number[]} x\n * @param {number[]} n\n * @returns {(number[] | null)}\n */\n\nfunction inverseMod(x, n) {\n  var ans = expand(x, n.length);\n  var s = inverseMod_(ans, n);\n  return s ? trim(ans, 1) : null;\n}\n/**\n * return (x*y mod n) for bigInts x,y,n.\n *\n * For greater speed, let y<x.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} n\n * @returns {number[]}\n */\n\nfunction multMod(x, y, n) {\n  var ans = expand(x, n.length);\n  multMod_(ans, y, n);\n  return trim(ans, 1);\n}\n/**\n * generate a k-bit true random prime using Maurer's algorithm, and put it into ans.\n *\n * The bigInt ans must be large enough to hold it.\n *\n * @export\n * @param {number[]} ans\n * @param {number} k\n * @return {void}\n */\n\nfunction randTruePrime_(ans, k) {\n  var c, m, pm, dd, j, r, B, divisible, z, zz, recSize;\n  var w;\n  if (primes.length == 0) primes = findPrimes(30000); //check for divisibility by primes <=30000\n\n  if (pows.length == 0) {\n    pows = new Array(512);\n\n    for (j = 0; j < 512; j++) {\n      pows[j] = Math.pow(2, j / 511 - 1);\n    }\n  } //c and m should be tuned for a particular machine and value of k, to maximize speed\n\n\n  c = 0.1; //c=0.1 in HAC\n\n  m = 20; //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\n\n  var recLimit = 20; //stop recursion when k <=recLimit.  Must have recLimit >= 2\n\n  if (s_i2.length != ans.length) {\n    s_i2 = dup(ans);\n    s_R = dup(ans);\n    s_n1 = dup(ans);\n    s_r2 = dup(ans);\n    s_d = dup(ans);\n    s_x1 = dup(ans); //TODO Seems like a bug in eslint, reports as unused\n\n    s_x2 = dup(ans);\n    s_b = dup(ans);\n    s_n = dup(ans);\n    s_i = dup(ans);\n    s_rm = dup(ans);\n    s_q = dup(ans);\n    s_a = dup(ans);\n    s_aa = dup(ans);\n  }\n\n  if (k <= recLimit) {\n    //generate small random primes by trial division up to its square root\n    pm = (1 << (k + 2 >> 1)) - 1; //pm is binary number with all ones, just over sqrt(2^k)\n\n    copyInt_(ans, 0);\n\n    for (dd = 1; dd;) {\n      dd = 0;\n      ans[0] = 1 | 1 << k - 1 | Math.floor(Math.random() * (1 << k)); //random, k-bit, odd integer, with msb 1\n\n      for (j = 1; j < primes.length && (primes[j] & pm) == primes[j]; j++) {\n        //trial division by all primes 3...sqrt(2^k)\n        if (0 == ans[0] % primes[j]) {\n          dd = 1;\n          break;\n        }\n      }\n    }\n\n    carry_(ans);\n    return;\n  }\n\n  B = c * k * k; //try small primes up to B (or all the primes[] array if the largest is less than B).\n\n  if (k > 2 * m) //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\n    for (r = 1; k - k * r <= m;) {\n      r = pows[Math.floor(Math.random() * 512)];\n    } //r=Math.pow(2,Math.random()-1);\n  else r = 0.5; //simulation suggests the more complex algorithm using r=.333 is only slightly faster.\n\n  recSize = Math.floor(r * k) + 1;\n  randTruePrime_(s_q, recSize);\n  copyInt_(s_i2, 0);\n  s_i2[Math.floor((k - 2) / bpe)] |= 1 << (k - 2) % bpe; //s_i2=2^(k-2)\n\n  divide_(s_i2, s_q, s_i, s_rm); //s_i=floor((2^(k-1))/(2q))\n\n  z = bitSize(s_i);\n\n  for (;;) {\n    for (;;) {\n      //generate z-bit numbers until one falls in the range [0,s_i-1]\n      randBigInt_(s_R, z, 0);\n      if (greater(s_i, s_R)) break;\n    } //now s_R is in the range [0,s_i-1]\n\n\n    addInt_(s_R, 1); //now s_R is in the range [1,s_i]\n\n    add_(s_R, s_i); //now s_R is in the range [s_i+1,2*s_i]\n\n    copy_(s_n, s_q);\n    mult_(s_n, s_R);\n    multInt_(s_n, 2);\n    addInt_(s_n, 1); //s_n=2*s_R*s_q+1\n\n    copy_(s_r2, s_R);\n    multInt_(s_r2, 2); //s_r2=2*s_R\n    //check s_n for divisibility by small primes up to B\n\n    for (divisible = 0, j = 0; j < primes.length && primes[j] < B; j++) {\n      if (modInt(s_n, primes[j]) == 0 && !equalsInt(s_n, primes[j])) {\n        divisible = 1;\n        break;\n      }\n    }\n\n    if (!divisible) if (!millerRabinInt(s_n, 2)) //if it passes small primes check, then try a single Miller-Rabin base 2\n      //this line represents 75% of the total runtime for randTruePrime_\n      divisible = 1;\n\n    if (!divisible) {\n      //if it passes that test, continue checking s_n\n      addInt_(s_n, -3);\n\n      for (j = s_n.length - 1; s_n[j] == 0 && j > 0; j--) {\n        ;\n      } //strip leading zeros\n\n\n      for (zz = 0, w = s_n[j]; w; w >>= 1, zz++) {\n        ;\n      }\n\n      zz += bpe * j; //zz=number of bits in s_n, ignoring leading zeros\n\n      for (;;) {\n        //generate z-bit numbers until one falls in the range [0,s_n-1]\n        randBigInt_(s_a, zz, 0);\n        if (greater(s_n, s_a)) break;\n      } //now s_a is in the range [0,s_n-1]\n\n\n      addInt_(s_n, 3); //now s_a is in the range [0,s_n-4]\n\n      addInt_(s_a, 2); //now s_a is in the range [2,s_n-2]\n\n      copy_(s_b, s_a);\n      copy_(s_n1, s_n);\n      addInt_(s_n1, -1);\n      powMod_(s_b, s_n1, s_n); //s_b=s_a^(s_n-1) modulo s_n\n\n      addInt_(s_b, -1);\n\n      if (isZero(s_b)) {\n        copy_(s_b, s_a);\n        powMod_(s_b, s_r2, s_n);\n        addInt_(s_b, -1);\n        copy_(s_aa, s_n);\n        copy_(s_d, s_b);\n        GCD_(s_d, s_n); //if s_b and s_n are relatively prime, then s_n is a prime\n\n        if (equalsInt(s_d, 1)) {\n          copy_(ans, s_aa);\n          return; //if we've made it this far, then s_n is absolutely guaranteed to be prime\n        }\n      }\n    }\n  }\n}\n/**\n * Return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\n *\n * @export\n * @param {number} n\n * @param {number} s\n * @returns {number[]}\n */\n\nfunction randBigInt(n, s) {\n  var a, b;\n  a = Math.floor((n - 1) / bpe) + 2; //# array elements to hold the BigInt with a leading 0 element\n\n  b = int2bigInt(0, 0, a);\n  randBigInt_(b, n, s);\n  return b;\n}\n/**\n * Set b to an n-bit random BigInt.  If s=1, then the most significant of those n bits is set to 1.\n *\n * Array b must be big enough to hold the result. Must have n>=1\n *\n * @export\n * @param {number[]} b\n * @param {number} n\n * @param {number} s\n * @return {void}\n */\n\nfunction randBigInt_(b, n, s) {\n  var i, a;\n\n  for (i = 0; i < b.length; i++) {\n    b[i] = 0;\n  }\n\n  a = Math.floor((n - 1) / bpe) + 1; //# array elements to hold the BigInt\n\n  for (i = 0; i < a; i++) {\n    b[i] = Math.floor(Math.random() * (1 << bpe - 1));\n  }\n\n  b[a - 1] &= (2 << (n - 1) % bpe) - 1;\n  if (s == 1) b[a - 1] |= 1 << (n - 1) % bpe;\n}\n/**\n * Return the greatest common divisor of bigInts x and y (each with same number of elements).\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {number[]}\n */\n\nfunction GCD(x, y) {\n  var xc, yc;\n  xc = dup(x);\n  yc = dup(y);\n  GCD_(xc, yc);\n  return xc;\n}\n/**\n * set x to the greatest common divisor of bigInts x and y (each with same number of elements).\n *\n * y is destroyed.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n */\n\nfunction GCD_(x, y) {\n  var i, xp, yp, A, B, C, D, q, sing;\n  var qp;\n  if (T.length !== x.length) T = dup(x);\n  sing = 1;\n\n  while (sing) {\n    //while y has nonzero elements other than y[0]\n    sing = 0;\n\n    for (i = 1; i < y.length; i++ //check if y has nonzero elements other than 0\n    ) {\n      if (y[i]) {\n        sing = 1;\n        break;\n      }\n    }\n\n    if (!sing) break; //quit when y all zero elements except possibly y[0]\n\n    for (i = x.length; !x[i] && i >= 0; i--) {\n      ;\n    } //find most significant element of x\n\n\n    xp = x[i];\n    yp = y[i];\n    A = 1;\n    B = 0;\n    C = 0;\n    D = 1;\n\n    while (yp + C && yp + D) {\n      q = Math.floor((xp + A) / (yp + C));\n      qp = Math.floor((xp + B) / (yp + D));\n      if (q != qp) break;\n      t = A - q * C;\n      A = C;\n      C = t; //  do (A,B,xp, C,D,yp) = (C,D,yp, A,B,xp) - q*(0,0,0, C,D,yp)\n\n      t = B - q * D;\n      B = D;\n      D = t;\n      t = xp - q * yp;\n      xp = yp;\n      yp = t;\n    }\n\n    if (B) {\n      copy_(T, x);\n      linComb_(x, y, A, B); //x=A*x+B*y\n\n      linComb_(y, T, D, C); //y=D*y+C*T\n    } else {\n      mod_(x, y);\n      copy_(T, x);\n      copy_(x, y);\n      copy_(y, T);\n    }\n  }\n\n  if (y[0] === 0) return;\n  t = modInt(x, y[0]);\n  copyInt_(x, y[0]);\n  y[0] = t;\n\n  while (y[0]) {\n    x[0] %= y[0];\n    t = x[0];\n    x[0] = y[0];\n    y[0] = t;\n  }\n}\n/**\n * do x=x**(-1) mod n, for bigInts x and n.\n *\n * If no inverse exists, it sets x to zero and returns 0, else it returns 1.\n * The x array must be at least as large as the n array.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} n\n * @returns {(0 | 1)}\n */\n\nfunction inverseMod_(x, n) {\n  var k = 1 + 2 * Math.max(x.length, n.length);\n\n  if (!(x[0] & 1) && !(n[0] & 1)) {\n    //if both inputs are even, then inverse doesn't exist\n    copyInt_(x, 0);\n    return 0;\n  }\n\n  if (eg_u.length != k) {\n    eg_u = new Array(k);\n    eg_v = new Array(k);\n    eg_A = new Array(k);\n    eg_B = new Array(k);\n    eg_C = new Array(k);\n    eg_D = new Array(k);\n  }\n\n  copy_(eg_u, x);\n  copy_(eg_v, n);\n  copyInt_(eg_A, 1);\n  copyInt_(eg_B, 0);\n  copyInt_(eg_C, 0);\n  copyInt_(eg_D, 1);\n\n  for (;;) {\n    while (!(eg_u[0] & 1)) {\n      //while eg_u is even\n      halve_(eg_u);\n\n      if (!(eg_A[0] & 1) && !(eg_B[0] & 1)) {\n        //if eg_A==eg_B==0 mod 2\n        halve_(eg_A);\n        halve_(eg_B);\n      } else {\n        add_(eg_A, n);\n        halve_(eg_A);\n        sub_(eg_B, x);\n        halve_(eg_B);\n      }\n    }\n\n    while (!(eg_v[0] & 1)) {\n      //while eg_v is even\n      halve_(eg_v);\n\n      if (!(eg_C[0] & 1) && !(eg_D[0] & 1)) {\n        //if eg_C==eg_D==0 mod 2\n        halve_(eg_C);\n        halve_(eg_D);\n      } else {\n        add_(eg_C, n);\n        halve_(eg_C);\n        sub_(eg_D, x);\n        halve_(eg_D);\n      }\n    }\n\n    if (!greater(eg_v, eg_u)) {\n      //eg_v <= eg_u\n      sub_(eg_u, eg_v);\n      sub_(eg_A, eg_C);\n      sub_(eg_B, eg_D);\n    } else {\n      //eg_v > eg_u\n      sub_(eg_v, eg_u);\n      sub_(eg_C, eg_A);\n      sub_(eg_D, eg_B);\n    }\n\n    if (equalsInt(eg_u, 0)) {\n      while (negative(eg_C) //make sure answer is nonnegative\n      ) {\n        add_(eg_C, n);\n      }\n\n      copy_(x, eg_C);\n\n      if (!equalsInt(eg_v, 1)) {\n        //if GCD_(x,n)!=1, then there is no inverse\n        copyInt_(x, 0);\n        return 0;\n      }\n\n      return 1;\n    }\n  }\n  /*::\n  declare var never: empty\n  return never\n  */\n\n}\n/**\n * return x**(-1) mod n, for integers x and n.\n *\n * Return 0 if there is no inverse\n *\n * @param {number} x\n * @param {number} n\n * @returns {number}\n */\n\nfunction inverseModInt(x, n) {\n  var a = 1,\n      b = 0,\n      t;\n\n  for (;;) {\n    if (x === 1) return a;\n    if (x === 0) return 0;\n    b -= a * Math.floor(n / x); //$off\n\n    n %= x;\n    if (n === 1) return b; //to avoid negatives, change this b to n-b, and each -= to +=\n\n    if (n === 0) return 0;\n    a -= b * Math.floor(x / n); //$off\n\n    x %= n;\n  }\n  /*::\n  declare var never: empty\n  return never\n  */\n\n} //this deprecated function is for backward compatibility only.\n\nfunction inverseModInt_(x, n) {\n  return inverseModInt(x, n);\n}\n/**\n * Given positive bigInts x and y, change the bigints v, a, and b to positive bigInts such that:\n *\n *      v = GCD_(x,y) = a*x-b*y\n *\n * The bigInts v, a, b, must have exactly as many elements as the larger of x and y.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} v\n * @param {number[]} a\n * @param {number[]} b\n * @return {void}\n */\n\n\nfunction eGCD_(x, y, v, a, b) {\n  var g = 0;\n  var k = Math.max(x.length, y.length);\n\n  if (eg_u.length != k) {\n    eg_u = new Array(k);\n    eg_A = new Array(k);\n    eg_B = new Array(k);\n    eg_C = new Array(k);\n    eg_D = new Array(k);\n  }\n\n  while (!(x[0] & 1) && !(y[0] & 1)) {\n    //while x and y both even\n    halve_(x);\n    halve_(y);\n    g++;\n  }\n\n  copy_(eg_u, x);\n  copy_(v, y);\n  copyInt_(eg_A, 1);\n  copyInt_(eg_B, 0);\n  copyInt_(eg_C, 0);\n  copyInt_(eg_D, 1);\n\n  for (;;) {\n    while (!(eg_u[0] & 1)) {\n      //while u is even\n      halve_(eg_u);\n\n      if (!(eg_A[0] & 1) && !(eg_B[0] & 1)) {\n        //if A==B==0 mod 2\n        halve_(eg_A);\n        halve_(eg_B);\n      } else {\n        add_(eg_A, y);\n        halve_(eg_A);\n        sub_(eg_B, x);\n        halve_(eg_B);\n      }\n    }\n\n    while (!(v[0] & 1)) {\n      //while v is even\n      halve_(v);\n\n      if (!(eg_C[0] & 1) && !(eg_D[0] & 1)) {\n        //if C==D==0 mod 2\n        halve_(eg_C);\n        halve_(eg_D);\n      } else {\n        add_(eg_C, y);\n        halve_(eg_C);\n        sub_(eg_D, x);\n        halve_(eg_D);\n      }\n    }\n\n    if (!greater(v, eg_u)) {\n      //v<=u\n      sub_(eg_u, v);\n      sub_(eg_A, eg_C);\n      sub_(eg_B, eg_D);\n    } else {\n      //v>u\n      sub_(v, eg_u);\n      sub_(eg_C, eg_A);\n      sub_(eg_D, eg_B);\n    }\n\n    if (equalsInt(eg_u, 0)) {\n      while (negative(eg_C)) {\n        //make sure a (C) is nonnegative\n        add_(eg_C, y);\n        sub_(eg_D, x);\n      }\n\n      multInt_(eg_D, -1); ///make sure b (D) is nonnegative\n\n      copy_(a, eg_C);\n      copy_(b, eg_D);\n      leftShift_(v, g);\n      return;\n    }\n  }\n}\n/**\n * is bigInt x negative?\n *\n * @param {number[]} x\n * @returns {(1 | 0)}\n */\n\nfunction negative(x) {\n  //TODO Flow Bool type inference\n  return x[x.length - 1] >> bpe - 1 & 1;\n}\n/**\n * is (x << (shift*bpe)) > y?\n *\n * x and y are nonnegative bigInts\n * shift is a nonnegative integer\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number} shift\n * @returns {(1 | 0)}\n */\n\nfunction greaterShift(x, y, shift) {\n  var i,\n      kx = x.length,\n      ky = y.length;\n  k = kx + shift < ky ? kx + shift : ky;\n\n  for (i = ky - 1 - shift; i < kx && i >= 0; i++) {\n    if (x[i] > 0) return 1;\n  } //if there are nonzeros in x to the left of the first column of y, then x is bigger\n\n\n  for (i = kx - 1 + shift; i < ky; i++) {\n    if (y[i] > 0) return 0;\n  } //if there are nonzeros in y to the left of the first column of x, then x is not bigger\n\n\n  for (i = k - 1; i >= shift; i--) {\n    if (x[i - shift] > y[i]) return 1;else if (x[i - shift] < y[i]) return 0;\n  }\n\n  return 0;\n}\n/**\n * is x > y?\n *\n * x and y both nonnegative\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {(1 | 0)}\n */\n\nfunction greater(x, y) {\n  var i;\n  var k = x.length < y.length ? x.length : y.length;\n\n  for (i = x.length; i < y.length; i++) {\n    if (y[i]) return 0;\n  } //y has more digits\n\n\n  for (i = y.length; i < x.length; i++) {\n    if (x[i]) return 1;\n  } //x has more digits\n\n\n  for (i = k - 1; i >= 0; i--) {\n    if (x[i] > y[i]) return 1;else if (x[i] < y[i]) return 0;\n  }\n\n  return 0;\n}\n/**\n * divide x by y giving quotient q and remainder r.\n *\n *     q = floor(x/y)\n *     r = x mod y\n *\n * All 4 are bigints.\n *\n * * x must have at least one leading zero element.\n * * y must be nonzero.\n * * q and r must be arrays that are exactly the same length as x. (Or q can have more).\n * * Must have x.length >= y.length >= 2.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} q\n * @param {number[]} r\n * @return {void}\n */\n\nfunction divide_(x, y, q, r) {\n  var kx, ky;\n  var i, j, y1, y2, c, a, b;\n  copy_(r, x);\n\n  for (ky = y.length; y[ky - 1] === 0; ky--) {\n    ;\n  } //ky is number of elements in y, not including leading zeros\n  //normalize: ensure the most significant element of y has its highest bit set\n\n\n  b = y[ky - 1];\n\n  for (a = 0; b; a++) {\n    b >>= 1;\n  }\n\n  a = bpe - a; //a is how many bits to shift so that the high order bit of y is leftmost in its array element\n\n  leftShift_(y, a); //multiply both by 1<<a now, then divide both by that at the end\n\n  leftShift_(r, a); //Rob Visser discovered a bug: the following line was originally just before the normalization.\n\n  for (kx = r.length; r[kx - 1] === 0 && kx > ky; kx--) {\n    ;\n  } //kx is number of elements in normalized x, not including leading zeros\n\n\n  copyInt_(q, 0); // q=0\n\n  while (!greaterShift(y, r, kx - ky)) {\n    // while (leftShift_(y,kx-ky) <= r) {\n    subShift_(r, y, kx - ky); //   r=r-leftShift_(y,kx-ky)\n\n    q[kx - ky]++; //   q[kx-ky]++;\n  } // }\n\n\n  for (i = kx - 1; i >= ky; i--) {\n    if (r[i] == y[ky - 1]) q[i - ky] = mask;else q[i - ky] = Math.floor((r[i] * radix + r[i - 1]) / y[ky - 1]); //The following for(;;) loop is equivalent to the commented while loop,\n    //except that the uncommented version avoids overflow.\n    //The commented loop comes from HAC, which assumes r[-1]==y[-1]==0\n    //  while (q[i-ky]*(y[ky-1]*radix+y[ky-2]) > r[i]*radix*radix+r[i-1]*radix+r[i-2])\n    //    q[i-ky]--;\n\n    for (;;) {\n      y2 = (ky > 1 ? y[ky - 2] : 0) * q[i - ky];\n      c = y2 >> bpe;\n      y2 = y2 & mask;\n      y1 = c + q[i - ky] * y[ky - 1];\n      c = y1 >> bpe;\n      y1 = y1 & mask;\n      if (c == r[i] ? y1 == r[i - 1] ? y2 > (i > 1 ? r[i - 2] : 0) : y1 > r[i - 1] : c > r[i]) q[i - ky]--;else break;\n    }\n\n    linCombShift_(r, y, -q[i - ky], i - ky); //r=r-q[i-ky]*leftShift_(y,i-ky)\n\n    if (negative(r)) {\n      addShift_(r, y, i - ky); //r=r+leftShift_(y,i-ky)\n\n      q[i - ky]--;\n    }\n  }\n\n  rightShift_(y, a); //undo the normalization step\n\n  rightShift_(r, a); //undo the normalization step\n}\n/**\n * do carries and borrows so each element of the bigInt x fits in bpe bits.\n *\n * @param {number[]} x\n */\n\nfunction carry_(x) {\n  var i, k, c, b;\n  k = x.length;\n  c = 0;\n\n  for (i = 0; i < k; i++) {\n    c += x[i];\n    b = 0;\n\n    if (c < 0) {\n      b = -(c >> bpe);\n      c += b * radix;\n    }\n\n    x[i] = c & mask;\n    c = (c >> bpe) - b;\n  }\n}\n/**\n * return x mod n for bigInt x and integer n.\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n * @returns {number}\n */\n\nfunction modInt(x, n) {\n  var i,\n      c = 0;\n\n  for (i = x.length - 1; i >= 0; i--) {\n    c = (c * radix + x[i]) % n;\n  }\n\n  return c;\n}\n/**\n * convert the integer t into a bigInt with at least the given number of bits.\n * the returned array stores the bigInt in bpe-bit chunks, little endian (buff[0] is least significant word)\n * Pad the array with leading zeros so that it has at least minSize elements.\n *\n * There will always be at least one leading 0 element.\n *\n * @export\n * @param {number} t\n * @param {number} bits\n * @param {number} minSize\n * @returns {number[]}\n */\n\nfunction int2bigInt(t, bits, minSize) {\n  var i, k;\n  k = Math.ceil(bits / bpe) + 1;\n  k = minSize > k ? minSize : k;\n  var buff = new Array(k);\n  copyInt_(buff, t);\n  return buff;\n}\n/**\n * return the bigInt given a string representation in a given base.\n * Pad the array with leading zeros so that it has at least minSize elements.\n * If base=-1, then it reads in a space-separated list of array elements in decimal.\n *\n * The array will always have at least one leading zero, unless base=-1.\n *\n * @export\n * @param {string} s\n * @param {number} base\n * @param {number} [minSize]\n * @returns {number[]}\n */\n\nfunction str2bigInt(s, base, minSize) {\n  var d, i, x, y, kk;\n  var k = s.length;\n\n  if (base === -1) {\n    //comma-separated list of array elements in decimal\n    x = new Array(0);\n\n    for (;;) {\n      y = new Array(x.length + 1);\n\n      for (i = 0; i < x.length; i++) {\n        y[i + 1] = x[i];\n      }\n\n      y[0] = parseInt(s, 10); //TODO PERF Should we replace that with ~~ (not not)? https://jsperf.com/number-vs-parseint-vs-plus/7\n\n      x = y;\n      d = s.indexOf(',', 0);\n      if (d < 1) break; //$off\n\n      s = s.substring(d + 1);\n      if (s.length == 0) break;\n    } //$off\n\n\n    if (x.length < minSize) {\n      //$off\n      y = new Array(minSize);\n      copy_(y, x);\n      return y;\n    }\n\n    return x;\n  }\n\n  x = int2bigInt(0, base * k, 0);\n\n  for (i = 0; i < k; i++) {\n    d = digitsStr.indexOf(s.substring(i, i + 1), 0);\n    if (base <= 36 && d >= 36) //convert lowercase to uppercase if base<=36\n      d -= 26;\n\n    if (d >= base || d < 0) {\n      //stop at first illegal character\n      break;\n    }\n\n    multInt_(x, base);\n    addInt_(x, d);\n  }\n\n  for (k = x.length; k > 0 && !x[k - 1]; k--) {\n    ;\n  } //strip off leading zeros\n  //$off\n\n\n  k = minSize > k + 1 ? minSize : k + 1; //$off\n\n  y = new Array(k); //$off\n\n  kk = k < x.length ? k : x.length; //$off\n\n  for (i = 0; i < kk; i++) {\n    y[i] = x[i];\n  } //$off\n\n\n  for (; i < k; i++) {\n    y[i] = 0;\n  }\n\n  return y;\n} //return the bigInt given a string representation in a given base.\n//Pad the array with leading zeros so that it has at least minSize elements.\n//If base=-1, then it reads in a space-separated list of array elements in decimal.\n//The array will always have at least one leading zero, unless base=-1.\n// function str2bigInt(s,b,minSize) {\n//   var d, i, j, base, str, x, y, kk;\n//   if (typeof b === 'string') {\n//           base = b.length;\n//           str = b;\n//   } else {\n//           base = b;\n//           str = digitsStr;\n//   }\n//   var k=s.length;\n//   if (base==-1) { //comma-separated list of array elements in decimal\n//       x=new Array(0);\n//       for (;;) {\n//           y=new Array(x.length+1);\n//           for (i=0;i<x.length;i++)\n//               y[i+1]=x[i];\n//           y[0]=parseInt(s,10);\n//           x=y;\n//           d=s.indexOf(',',0);\n//           if (d<1)\n//               break;\n//           s=s.substring(d+1);\n//           if (s.length==0)\n//               break;\n//       }\n//       if (x.length<minSize) {\n//           y=new Array(minSize);\n//           copy_(y,x);\n//           return y;\n//       }\n//       return x;\n//   }\n//   x=int2bigInt(0,base*k,0);\n// for (i=0;i<k;i++) {\n//   d=str.indexOf(s.substring(i,i+1),0);\n//   if (base<=36 && d>=36) { //convert lowercase to uppercase if base<=36\n//       d-=26;\n//   }\n//   if (d>=base || d<0) {   //ignore illegal characters\n//   continue;\n//       }\n//       multInt_(x,base);\n//       addInt_(x,d);\n//   }\n//   for (k=x.length;k>0 && !x[k-1];k--); //strip off leading zeros\n//   k=minSize>k+1 ? minSize : k+1;\n//   y=new Array(k);\n//   kk=k<x.length ? k : x.length;\n//   for (i=0;i<kk;i++)\n//       y[i]=x[i];\n//   for (;i<k;i++)\n//       y[i]=0;\n//   return y;\n// }\n\n/**\n * is bigint x equal to integer y?\n *\n * y must have less than bpe bits\n *\n * @export\n * @param {number[]} x\n * @param {number} y\n * @returns {(1 | 0)}\n */\n\nfunction equalsInt(x, y) {\n  var i;\n  if (x[0] != y) return 0;\n\n  for (i = 1; i < x.length; i++) {\n    if (x[i]) return 0;\n  }\n\n  return 1;\n}\n/**\n * are bigints x and y equal?\n *\n * this works even if x and y are different lengths and have arbitrarily many leading zeros\n *\n * @param {number[]} x\n * @param {number[]} y\n * @returns {(1 | 0)}\n */\n\nfunction equals(x, y) {\n  var i;\n  var k = x.length < y.length ? x.length : y.length;\n\n  for (i = 0; i < k; i++) {\n    if (x[i] !== y[i]) return 0;\n  }\n\n  if (x.length > y.length) {\n    for (; i < x.length; i++) {\n      if (x[i]) return 0;\n    }\n  } else {\n    for (; i < y.length; i++) {\n      if (y[i]) return 0;\n    }\n  }\n\n  return 1;\n}\n/**\n * is the bigInt x equal to zero?\n *\n * @export\n * @param {number[]} x\n * @returns {(1 | 0)}\n */\n\nfunction isZero(x) {\n  var i;\n\n  for (i = 0; i < x.length; i++) {\n    if (x[i]) return 0;\n  }\n\n  return 1;\n}\n/**\n * Convert a bigInt into a string in a given base, from base 2 up to base 95.\n *\n * Base -1 prints the contents of the array representing the number.\n *\n * @export\n * @param {number[]} x\n * @param {number} base\n * @returns {string}\n */\n\nfunction bigInt2str(x, base) {\n  var i,\n      t,\n      s = '';\n  if (s6.length !== x.length) s6 = dup(x);else copy_(s6, x);\n\n  if (base === -1) {\n    //return the list of array contents\n    for (i = x.length - 1; i > 0; i--) {\n      s += x[i] + ',';\n    }\n\n    s += x[0];\n  } else {\n    //return it in the given base\n    while (!isZero(s6)) {\n      t = divInt_(s6, base); //t=s6 % base; s6=floor(s6/base);\n\n      s = digitsStr.substring(t, t + 1) + s;\n    }\n  }\n\n  if (s.length === 0) s = '0';\n  return s;\n}\n/**\n * Returns a duplicate of bigInt x\n *\n * @export\n * @param {number[]} x\n * @returns {number[]}\n */\n\nfunction dup(x) {\n  var i;\n  buff = Array(x.length);\n  copy_(buff, x);\n  return buff;\n}\n/**\n * do x=y on bigInts x and y.\n *\n * x must be an array at least as big as y (not counting the leading zeros in y).\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {void}\n */\n\nfunction copy_(x, y) {\n  var i;\n  var k = x.length < y.length ? x.length : y.length;\n\n  for (i = 0; i < k; i++) {\n    x[i] = y[i];\n  }\n\n  for (i = k; i < x.length; i++) {\n    x[i] = 0;\n  }\n}\n/**\n * do x=y on bigInt x and integer y.\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n * @returns {void}\n */\n\nfunction copyInt_(x, n) {\n  var i, c;\n  var len = x.length; //TODO .length in for loop have perfomance costs. Bench this\n\n  for (c = n, i = 0; i < len; i++) {\n    x[i] = c & mask;\n    c >>= bpe;\n  }\n}\n/**\n * do x=x+n where x is a bigInt and n is an integer.\n *\n * x must be large enough to hold the result.\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n * @returns {void}\n */\n\nfunction addInt_(x, n) {\n  var i, k, c, b;\n  x[0] += n;\n  k = x.length;\n  c = 0;\n\n  for (i = 0; i < k; i++) {\n    c += x[i];\n    b = 0;\n\n    if (c < 0) {\n      b = -(c >> bpe);\n      c += b * radix;\n    }\n\n    x[i] = c & mask;\n    c = (c >> bpe) - b;\n    if (!c) return; //stop carrying as soon as the carry is zero\n  }\n}\n/**\n * right shift bigInt x by n bits.\n *\n *     0 <= n < bpe.\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n */\n\nfunction rightShift_(x, n) {\n  var i;\n  var k = Math.floor(n / bpe);\n\n  if (k) {\n    for (i = 0; i < x.length - k; i++ //right shift x by k elements\n    ) {\n      x[i] = x[i + k];\n    }\n\n    for (; i < x.length; i++) {\n      x[i] = 0;\n    } //$off\n\n\n    n %= bpe;\n  }\n\n  for (i = 0; i < x.length - 1; i++) {\n    x[i] = mask & (x[i + 1] << bpe - n | x[i] >> n);\n  }\n\n  x[i] >>= n;\n}\n/**\n * do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement\n *\n * @param {number[]} x\n * @returns {void}\n */\n\nfunction halve_(x) {\n  var i;\n\n  for (i = 0; i < x.length - 1; i++) {\n    x[i] = mask & (x[i + 1] << bpe - 1 | x[i] >> 1);\n  }\n\n  x[i] = x[i] >> 1 | x[i] & radix >> 1; //most significant bit stays the same\n}\n/**\n * left shift bigInt x by n bits\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n * @returns {void}\n */\n\nfunction leftShift_(x, n) {\n  var i;\n  var k = Math.floor(n / bpe);\n\n  if (k) {\n    for (i = x.length; i >= k; i-- //left shift x by k elements\n    ) {\n      x[i] = x[i - k];\n    }\n\n    for (; i >= 0; i--) {\n      x[i] = 0;\n    } //$off\n\n\n    n %= bpe;\n  }\n\n  if (!n) return;\n\n  for (i = x.length - 1; i > 0; i--) {\n    x[i] = mask & (x[i] << n | x[i - 1] >> bpe - n);\n  }\n\n  x[i] = mask & x[i] << n;\n}\n/**\n * do x=x*n where x is a bigInt and n is an integer.\n *\n * x must be large enough to hold the result.\n *\n * @param {number[]} x\n * @param {number} n\n * @returns {void}\n */\n\nfunction multInt_(x, n) {\n  var i, k, c, b;\n  if (!n) return;\n  k = x.length;\n  c = 0;\n\n  for (i = 0; i < k; i++) {\n    c += x[i] * n;\n    b = 0;\n\n    if (c < 0) {\n      b = -(c >> bpe);\n      c += b * radix;\n    }\n\n    x[i] = c & mask;\n    c = (c >> bpe) - b;\n  }\n}\n/**\n * do x=floor(x/n) for bigInt x and integer n, and return the remainder\n *\n * @param {number[]} x\n * @param {number} n\n * @returns {number} remainder\n */\n\nfunction divInt_(x, n) {\n  var i,\n      r = 0,\n      s;\n\n  for (i = x.length - 1; i >= 0; i--) {\n    s = r * radix + x[i];\n    x[i] = Math.floor(s / n);\n    r = s % n;\n  }\n\n  return r;\n}\n/**\n * do the linear combination x=a*x+b*y for bigInts x and y, and integers a and b.\n *\n * x must be large enough to hold the answer.\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number} a\n * @param {number} b\n * @returns {void}\n */\n\nfunction linComb_(x, y, a, b) {\n  var i, c, k, kk;\n  k = x.length < y.length ? x.length : y.length;\n  kk = x.length;\n\n  for (c = 0, i = 0; i < k; i++) {\n    c += a * x[i] + b * y[i];\n    x[i] = c & mask;\n    c >>= bpe;\n  }\n\n  for (i = k; i < kk; i++) {\n    c += a * x[i];\n    x[i] = c & mask;\n    c >>= bpe;\n  }\n}\n/**\n * do the linear combination x=a*x+b*(y<<(ys*bpe)) for bigInts x and y, and integers a, b and ys.\n *\n * x must be large enough to hold the answer.\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number} b\n * @param {number} ys\n * @returns {void}\n */\n\nfunction linCombShift_(x, y, b, ys) {\n  var i, c, k, kk;\n  k = x.length < ys + y.length ? x.length : ys + y.length;\n  kk = x.length;\n\n  for (c = 0, i = ys; i < k; i++) {\n    c += x[i] + b * y[i - ys];\n    x[i] = c & mask;\n    c >>= bpe;\n  }\n\n  for (i = k; c && i < kk; i++) {\n    c += x[i];\n    x[i] = c & mask;\n    c >>= bpe;\n  }\n}\n/**\n * do x=x+(y<<(ys*bpe)) for bigInts x and y, and integer ys.\n *\n * x must be large enough to hold the answer.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number} ys\n * @return {void}\n */\n\nfunction addShift_(x, y, ys) {\n  var i, c, k, kk;\n  k = x.length < ys + y.length ? x.length : ys + y.length;\n  kk = x.length;\n\n  for (c = 0, i = ys; i < k; i++) {\n    c += x[i] + y[i - ys];\n    x[i] = c & mask;\n    c >>= bpe;\n  }\n\n  for (i = k; c && i < kk; i++) {\n    c += x[i];\n    x[i] = c & mask;\n    c >>= bpe;\n  }\n}\n/**\n * do x=x-(y<<(ys*bpe)) for bigInts x and y, and integer ys\n *\n * x must be large enough to hold the answer\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number} ys\n * @return {void}\n */\n\nfunction subShift_(x, y, ys) {\n  var i, c, k, kk;\n  k = x.length < ys + y.length ? x.length : ys + y.length;\n  kk = x.length;\n\n  for (c = 0, i = ys; i < k; i++) {\n    c += x[i] - y[i - ys];\n    x[i] = c & mask;\n    c >>= bpe;\n  }\n\n  for (i = k; c && i < kk; i++) {\n    c += x[i];\n    x[i] = c & mask;\n    c >>= bpe;\n  }\n}\n/**\n * do x=x-y for bigInts x and y\n *\n * x must be large enough to hold the answer\n *\n * negative answers will be 2s complement\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @return {void}\n */\n\nfunction sub_(x, y) {\n  var i, c, k, kk;\n  k = x.length < y.length ? x.length : y.length;\n\n  for (c = 0, i = 0; i < k; i++) {\n    c += x[i] - y[i];\n    x[i] = c & mask;\n    c >>= bpe;\n  }\n\n  for (i = k; c && i < x.length; i++) {\n    c += x[i];\n    x[i] = c & mask;\n    c >>= bpe;\n  }\n}\n/**\n * do x=x+y for bigInts x and y\n *\n * x must be large enough to hold the answer\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @return {void}\n */\n\nfunction add_(x, y) {\n  var i, c, k, kk;\n  k = x.length < y.length ? x.length : y.length;\n\n  for (c = 0, i = 0; i < k; i++) {\n    c += x[i] + y[i];\n    x[i] = c & mask;\n    c >>= bpe;\n  }\n\n  for (i = k; c && i < x.length; i++) {\n    c += x[i];\n    x[i] = c & mask;\n    c >>= bpe;\n  }\n}\n/**\n * do x=x*y for bigInts x and y.\n *\n * This is faster when y<x.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @return {void}\n */\n\nfunction mult_(x, y) {\n  var i;\n  if (ss.length != 2 * x.length) ss = new Array(2 * x.length);\n  copyInt_(ss, 0);\n\n  for (i = 0; i < y.length; i++) {\n    if (y[i]) linCombShift_(ss, x, y[i], i);\n  } //ss=1*ss+y[i]*(x<<(i*bpe))\n\n\n  copy_(x, ss);\n}\n/**\n * do x=x mod n for bigInts x and n\n *\n * @export\n * @param {number[]} x\n * @param {number[]} n\n * @return {void}\n */\n\nfunction mod_(x, n) {\n  if (s4.length !== x.length) s4 = dup(x);else copy_(s4, x);\n  if (s5.length !== x.length) s5 = dup(x);\n  divide_(s4, n, s5, x); //x = remainder of s4 / n\n}\n/**\n * do x=x*y mod n for bigInts x,y,n.\n *\n * for greater speed, let y<x.\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} n\n * @return {void}\n */\n\nfunction multMod_(x, y, n) {\n  var i;\n  if (s0.length != 2 * x.length) s0 = new Array(2 * x.length);\n  copyInt_(s0, 0);\n\n  for (i = 0; i < y.length; i++) {\n    if (y[i]) linCombShift_(s0, x, y[i], i);\n  } //s0=1*s0+y[i]*(x<<(i*bpe))\n\n\n  mod_(s0, n);\n  copy_(x, s0);\n}\n/**\n * do x=x*x mod n for bigInts x,n.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} n\n * @return {void}\n */\n\nfunction squareMod_(x, n) {\n  var i, j, d, c, kx, kn, k;\n\n  for (kx = x.length; kx > 0 && !x[kx - 1]; kx--) {\n    ;\n  } //ignore leading zeros in x\n\n\n  k = kx > n.length ? 2 * kx : 2 * n.length; //k=# elements in the product, which is twice the elements in the larger of x and n\n\n  if (s0.length != k) s0 = new Array(k);\n  copyInt_(s0, 0);\n\n  for (i = 0; i < kx; i++) {\n    c = s0[2 * i] + x[i] * x[i];\n    s0[2 * i] = c & mask;\n    c >>= bpe;\n\n    for (j = i + 1; j < kx; j++) {\n      c = s0[i + j] + 2 * x[i] * x[j] + c;\n      s0[i + j] = c & mask;\n      c >>= bpe;\n    }\n\n    s0[i + kx] = c;\n  }\n\n  mod_(s0, n);\n  copy_(x, s0);\n}\n/**\n * return x with exactly k leading zero elements\n *\n * @export\n * @param {number[]} x\n * @param {number} k\n * @returns {number[]}\n */\n\nfunction trim(x, k) {\n  var i, y;\n\n  for (i = x.length; i > 0 && !x[i - 1]; i--) {\n    ;\n  }\n\n  y = new Array(i + k);\n  copy_(y, x);\n  return y;\n}\n/**\n * do `x=x**y mod n`, where x,y,n are bigInts and `**` is exponentiation.  `0**0=1`.\n *\n * this is faster when n is odd.\n *\n * x usually needs to have as many elements as n.\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} n\n * @return {void}\n */\n\nfunction powMod_(x, y, n) {\n  var k1, k2, kn, np;\n  if (s7.length != n.length) s7 = dup(n); //for even modulus, use a simple square-and-multiply algorithm,\n  //rather than using the more complex Montgomery algorithm.\n\n  if ((n[0] & 1) == 0) {\n    copy_(s7, x);\n    copyInt_(x, 1);\n\n    while (!equalsInt(y, 0)) {\n      if (y[0] & 1) multMod_(x, s7, n);\n      divInt_(y, 2);\n      squareMod_(s7, n);\n    }\n\n    return;\n  } //calculate np from n for the Montgomery multiplications\n\n\n  copyInt_(s7, 0);\n\n  for (kn = n.length; kn > 0 && !n[kn - 1]; kn--) {\n    ;\n  }\n\n  np = radix - inverseModInt(modInt(n, radix), radix);\n  s7[kn] = 1;\n  multMod_(x, s7, n); // x = x * 2**(kn*bp) mod n\n\n  if (s3.length != x.length) s3 = dup(x);else copy_(s3, x); //$off\n\n  for (k1 = y.length - 1; k1 > 0 & !y[k1]; k1--) {\n    ;\n  } //k1=first nonzero element of y\n\n\n  if (y[k1] == 0) {\n    //anything to the 0th power is 1\n    copyInt_(x, 1);\n    return;\n  }\n\n  for (k2 = 1 << bpe - 1; k2 && !(y[k1] & k2); k2 >>= 1) {\n    ;\n  } //k2=position of first 1 bit in y[k1]\n\n\n  for (;;) {\n    if (!(k2 >>= 1)) {\n      //look at next bit of y\n      k1--;\n\n      if (k1 < 0) {\n        mont_(x, one, n, np);\n        return;\n      }\n\n      k2 = 1 << bpe - 1;\n    }\n\n    mont_(x, x, n, np);\n    if (k2 & y[k1]) //if next bit is a 1\n      mont_(x, s3, n, np);\n  }\n}\n/**\n * do x=x*y*Ri mod n for bigInts x,y,n,\n * where Ri = 2**(-kn*bpe) mod n, and kn is the\n * number of elements in the n array, not\n * counting leading zeros.\n *\n * x array must have at least as many elemnts as the n array\n * It's OK if x and y are the same variable.\n *\n * must have:\n *  * x,y < n\n *  * n is odd\n *  * np = -(n^(-1)) mod radix\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} n\n * @param {number} np\n * @return {void}\n */\n\nfunction mont_(x, y, n, np) {\n  var i, j, c, ui, t, ks;\n  var kn = n.length;\n  var ky = y.length;\n  if (sa.length != kn) sa = new Array(kn);\n  copyInt_(sa, 0);\n\n  for (; kn > 0 && n[kn - 1] == 0; kn--) {\n    ;\n  } //ignore leading zeros of n\n\n\n  for (; ky > 0 && y[ky - 1] == 0; ky--) {\n    ;\n  } //ignore leading zeros of y\n\n\n  ks = sa.length - 1; //sa will never have more than this many nonzero elements.\n  //the following loop consumes 95% of the runtime for randTruePrime_() and powMod_() for large numbers\n\n  for (i = 0; i < kn; i++) {\n    t = sa[0] + x[i] * y[0];\n    ui = (t & mask) * np & mask; //the inner \"& mask\" was needed on Safari (but not MSIE) at one time\n\n    c = t + ui * n[0] >> bpe;\n    t = x[i]; //do sa=(sa+x[i]*y+ui*n)/b   where b=2**bpe.  Loop is unrolled 5-fold for speed\n\n    j = 1;\n\n    for (; j < ky - 4;) {\n      c += sa[j] + ui * n[j] + t * y[j];\n      sa[j - 1] = c & mask;\n      c >>= bpe;\n      j++;\n      c += sa[j] + ui * n[j] + t * y[j];\n      sa[j - 1] = c & mask;\n      c >>= bpe;\n      j++;\n      c += sa[j] + ui * n[j] + t * y[j];\n      sa[j - 1] = c & mask;\n      c >>= bpe;\n      j++;\n      c += sa[j] + ui * n[j] + t * y[j];\n      sa[j - 1] = c & mask;\n      c >>= bpe;\n      j++;\n      c += sa[j] + ui * n[j] + t * y[j];\n      sa[j - 1] = c & mask;\n      c >>= bpe;\n      j++;\n    }\n\n    for (; j < ky;) {\n      c += sa[j] + ui * n[j] + t * y[j];\n      sa[j - 1] = c & mask;\n      c >>= bpe;\n      j++;\n    }\n\n    for (; j < kn - 4;) {\n      c += sa[j] + ui * n[j];\n      sa[j - 1] = c & mask;\n      c >>= bpe;\n      j++;\n      c += sa[j] + ui * n[j];\n      sa[j - 1] = c & mask;\n      c >>= bpe;\n      j++;\n      c += sa[j] + ui * n[j];\n      sa[j - 1] = c & mask;\n      c >>= bpe;\n      j++;\n      c += sa[j] + ui * n[j];\n      sa[j - 1] = c & mask;\n      c >>= bpe;\n      j++;\n      c += sa[j] + ui * n[j];\n      sa[j - 1] = c & mask;\n      c >>= bpe;\n      j++;\n    }\n\n    for (; j < kn;) {\n      c += sa[j] + ui * n[j];\n      sa[j - 1] = c & mask;\n      c >>= bpe;\n      j++;\n    }\n\n    for (; j < ks;) {\n      c += sa[j];\n      sa[j - 1] = c & mask;\n      c >>= bpe;\n      j++;\n    }\n\n    sa[j - 1] = c & mask;\n  }\n\n  if (!greater(n, sa)) sub_(sa, n);\n  copy_(x, sa);\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/leemon/es/index.js\n");

/***/ }),

/***/ "./node_modules/lodash.debounce/index.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash.debounce/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/lodash.debounce/index.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/inflate.js":
/*!******************************************!*\
  !*** ./node_modules/pako/lib/inflate.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n\nvar zlib_inflate = __webpack_require__(/*! ./zlib/inflate */ \"./node_modules/pako/lib/zlib/inflate.js\");\nvar utils        = __webpack_require__(/*! ./utils/common */ \"./node_modules/pako/lib/utils/common.js\");\nvar strings      = __webpack_require__(/*! ./utils/strings */ \"./node_modules/pako/lib/utils/strings.js\");\nvar c            = __webpack_require__(/*! ./zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\nvar msg          = __webpack_require__(/*! ./zlib/messages */ \"./node_modules/pako/lib/zlib/messages.js\");\nvar ZStream      = __webpack_require__(/*! ./zlib/zstream */ \"./node_modules/pako/lib/zlib/zstream.js\");\nvar GZheader     = __webpack_require__(/*! ./zlib/gzheader */ \"./node_modules/pako/lib/zlib/gzheader.js\");\n\nvar toString = Object.prototype.toString;\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  if (!(this instanceof Inflate)) return new Inflate(options);\n\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== c.Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var dictionary = this.options.dictionary;\n  var status, _mode;\n  var next_out_utf8, tail, utf8str;\n\n  // Flag to properly process Z_BUF_ERROR on testing inflate call\n  // when we check that all output data was flushed.\n  var allowBufError = false;\n\n  if (this.ended) { return false; }\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n    if (status === c.Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);\n    }\n\n    if (status === c.Z_BUF_ERROR && allowBufError === true) {\n      status = c.Z_OK;\n      allowBufError = false;\n    }\n\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\n        if (this.options.to === 'string') {\n\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    }\n\n    // When no more input data, we should check that internal inflate buffers\n    // are flushed. The only way to do it when avail_out = 0 - run one more\n    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n    // Here we set flag to process this error properly.\n    //\n    // NOTE. Deflate does not return error in this case and does not needs such\n    // logic.\n    if (strm.avail_in === 0 && strm.avail_out === 0) {\n      allowBufError = true;\n    }\n\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  }\n\n  // Finalize on the last chunk.\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === c.Z_SYNC_FLUSH) {\n    this.onEnd(c.Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 aligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n\n  inflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip  = inflate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/inflate.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/utils/common.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/utils/common.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\nfunction _has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvdXRpbHMvY29tbW9uLmpzP2JlN2YiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7OztBQUdiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsVUFBVTs7QUFFNUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0EsNEJBQTRCLFlBQVk7QUFDeEMscUJBQXFCLDhCQUE4QjtBQUNuRDtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFNBQVM7QUFDNUI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtDQUFrQyxPQUFPO0FBQ3pDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLE9BQU87QUFDekM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsU0FBUztBQUM1QjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3V0aWxzL2NvbW1vbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuXG52YXIgVFlQRURfT0sgPSAgKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJykgJiZcbiAgICAgICAgICAgICAgICAodHlwZW9mIFVpbnQxNkFycmF5ICE9PSAndW5kZWZpbmVkJykgJiZcbiAgICAgICAgICAgICAgICAodHlwZW9mIEludDMyQXJyYXkgIT09ICd1bmRlZmluZWQnKTtcblxuZnVuY3Rpb24gX2hhcyhvYmosIGtleSkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbn1cblxuZXhwb3J0cy5hc3NpZ24gPSBmdW5jdGlvbiAob2JqIC8qZnJvbTEsIGZyb20yLCBmcm9tMywgLi4uKi8pIHtcbiAgdmFyIHNvdXJjZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB3aGlsZSAoc291cmNlcy5sZW5ndGgpIHtcbiAgICB2YXIgc291cmNlID0gc291cmNlcy5zaGlmdCgpO1xuICAgIGlmICghc291cmNlKSB7IGNvbnRpbnVlOyB9XG5cbiAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3Ioc291cmNlICsgJ211c3QgYmUgbm9uLW9iamVjdCcpO1xuICAgIH1cblxuICAgIGZvciAodmFyIHAgaW4gc291cmNlKSB7XG4gICAgICBpZiAoX2hhcyhzb3VyY2UsIHApKSB7XG4gICAgICAgIG9ialtwXSA9IHNvdXJjZVtwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxuXG4vLyByZWR1Y2UgYnVmZmVyIHNpemUsIGF2b2lkaW5nIG1lbSBjb3B5XG5leHBvcnRzLnNocmlua0J1ZiA9IGZ1bmN0aW9uIChidWYsIHNpemUpIHtcbiAgaWYgKGJ1Zi5sZW5ndGggPT09IHNpemUpIHsgcmV0dXJuIGJ1ZjsgfVxuICBpZiAoYnVmLnN1YmFycmF5KSB7IHJldHVybiBidWYuc3ViYXJyYXkoMCwgc2l6ZSk7IH1cbiAgYnVmLmxlbmd0aCA9IHNpemU7XG4gIHJldHVybiBidWY7XG59O1xuXG5cbnZhciBmblR5cGVkID0ge1xuICBhcnJheVNldDogZnVuY3Rpb24gKGRlc3QsIHNyYywgc3JjX29mZnMsIGxlbiwgZGVzdF9vZmZzKSB7XG4gICAgaWYgKHNyYy5zdWJhcnJheSAmJiBkZXN0LnN1YmFycmF5KSB7XG4gICAgICBkZXN0LnNldChzcmMuc3ViYXJyYXkoc3JjX29mZnMsIHNyY19vZmZzICsgbGVuKSwgZGVzdF9vZmZzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gRmFsbGJhY2sgdG8gb3JkaW5hcnkgYXJyYXlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBkZXN0W2Rlc3Rfb2ZmcyArIGldID0gc3JjW3NyY19vZmZzICsgaV07XG4gICAgfVxuICB9LFxuICAvLyBKb2luIGFycmF5IG9mIGNodW5rcyB0byBzaW5nbGUgYXJyYXkuXG4gIGZsYXR0ZW5DaHVua3M6IGZ1bmN0aW9uIChjaHVua3MpIHtcbiAgICB2YXIgaSwgbCwgbGVuLCBwb3MsIGNodW5rLCByZXN1bHQ7XG5cbiAgICAvLyBjYWxjdWxhdGUgZGF0YSBsZW5ndGhcbiAgICBsZW4gPSAwO1xuICAgIGZvciAoaSA9IDAsIGwgPSBjaHVua3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBsZW4gKz0gY2h1bmtzW2ldLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvLyBqb2luIGNodW5rc1xuICAgIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbik7XG4gICAgcG9zID0gMDtcbiAgICBmb3IgKGkgPSAwLCBsID0gY2h1bmtzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgY2h1bmsgPSBjaHVua3NbaV07XG4gICAgICByZXN1bHQuc2V0KGNodW5rLCBwb3MpO1xuICAgICAgcG9zICs9IGNodW5rLmxlbmd0aDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuXG52YXIgZm5VbnR5cGVkID0ge1xuICBhcnJheVNldDogZnVuY3Rpb24gKGRlc3QsIHNyYywgc3JjX29mZnMsIGxlbiwgZGVzdF9vZmZzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZGVzdFtkZXN0X29mZnMgKyBpXSA9IHNyY1tzcmNfb2ZmcyArIGldO1xuICAgIH1cbiAgfSxcbiAgLy8gSm9pbiBhcnJheSBvZiBjaHVua3MgdG8gc2luZ2xlIGFycmF5LlxuICBmbGF0dGVuQ2h1bmtzOiBmdW5jdGlvbiAoY2h1bmtzKSB7XG4gICAgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShbXSwgY2h1bmtzKTtcbiAgfVxufTtcblxuXG4vLyBFbmFibGUvRGlzYWJsZSB0eXBlZCBhcnJheXMgdXNlLCBmb3IgdGVzdGluZ1xuLy9cbmV4cG9ydHMuc2V0VHlwZWQgPSBmdW5jdGlvbiAob24pIHtcbiAgaWYgKG9uKSB7XG4gICAgZXhwb3J0cy5CdWY4ICA9IFVpbnQ4QXJyYXk7XG4gICAgZXhwb3J0cy5CdWYxNiA9IFVpbnQxNkFycmF5O1xuICAgIGV4cG9ydHMuQnVmMzIgPSBJbnQzMkFycmF5O1xuICAgIGV4cG9ydHMuYXNzaWduKGV4cG9ydHMsIGZuVHlwZWQpO1xuICB9IGVsc2Uge1xuICAgIGV4cG9ydHMuQnVmOCAgPSBBcnJheTtcbiAgICBleHBvcnRzLkJ1ZjE2ID0gQXJyYXk7XG4gICAgZXhwb3J0cy5CdWYzMiA9IEFycmF5O1xuICAgIGV4cG9ydHMuYXNzaWduKGV4cG9ydHMsIGZuVW50eXBlZCk7XG4gIH1cbn07XG5cbmV4cG9ydHMuc2V0VHlwZWQoVFlQRURfT0spO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/utils/common.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/utils/strings.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/utils/strings.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// String encode/decode helpers\n\n\n\nvar utils = __webpack_require__(/*! ./common */ \"./node_modules/pako/lib/utils/common.js\");\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function (buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function (str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i = 0, len = buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function (buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/utils/strings.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/adler32.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/adler32.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9hZGxlcjMyLmpzP2M4MzQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2FkbGVyMzIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIE5vdGU6IGFkbGVyMzIgdGFrZXMgMTIlIGZvciBsZXZlbCAwIGFuZCAyJSBmb3IgbGV2ZWwgNi5cbi8vIEl0IGlzbid0IHdvcnRoIGl0IHRvIG1ha2UgYWRkaXRpb25hbCBvcHRpbWl6YXRpb25zIGFzIGluIG9yaWdpbmFsLlxuLy8gU21hbGwgc2l6ZSBpcyBwcmVmZXJhYmxlLlxuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbmZ1bmN0aW9uIGFkbGVyMzIoYWRsZXIsIGJ1ZiwgbGVuLCBwb3MpIHtcbiAgdmFyIHMxID0gKGFkbGVyICYgMHhmZmZmKSB8MCxcbiAgICAgIHMyID0gKChhZGxlciA+Pj4gMTYpICYgMHhmZmZmKSB8MCxcbiAgICAgIG4gPSAwO1xuXG4gIHdoaWxlIChsZW4gIT09IDApIHtcbiAgICAvLyBTZXQgbGltaXQgfiB0d2ljZSBsZXNzIHRoYW4gNTU1MiwgdG8ga2VlcFxuICAgIC8vIHMyIGluIDMxLWJpdHMsIGJlY2F1c2Ugd2UgZm9yY2Ugc2lnbmVkIGludHMuXG4gICAgLy8gaW4gb3RoZXIgY2FzZSAlPSB3aWxsIGZhaWwuXG4gICAgbiA9IGxlbiA+IDIwMDAgPyAyMDAwIDogbGVuO1xuICAgIGxlbiAtPSBuO1xuXG4gICAgZG8ge1xuICAgICAgczEgPSAoczEgKyBidWZbcG9zKytdKSB8MDtcbiAgICAgIHMyID0gKHMyICsgczEpIHwwO1xuICAgIH0gd2hpbGUgKC0tbik7XG5cbiAgICBzMSAlPSA2NTUyMTtcbiAgICBzMiAlPSA2NTUyMTtcbiAgfVxuXG4gIHJldHVybiAoczEgfCAoczIgPDwgMTYpKSB8MDtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGFkbGVyMzI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/adler32.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/pako/lib/zlib/constants.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  //Z_MEM_ERROR:     -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9jb25zdGFudHMuanM/MmNlYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2NvbnN0YW50cy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAvKiBBbGxvd2VkIGZsdXNoIHZhbHVlczsgc2VlIGRlZmxhdGUoKSBhbmQgaW5mbGF0ZSgpIGJlbG93IGZvciBkZXRhaWxzICovXG4gIFpfTk9fRkxVU0g6ICAgICAgICAgMCxcbiAgWl9QQVJUSUFMX0ZMVVNIOiAgICAxLFxuICBaX1NZTkNfRkxVU0g6ICAgICAgIDIsXG4gIFpfRlVMTF9GTFVTSDogICAgICAgMyxcbiAgWl9GSU5JU0g6ICAgICAgICAgICA0LFxuICBaX0JMT0NLOiAgICAgICAgICAgIDUsXG4gIFpfVFJFRVM6ICAgICAgICAgICAgNixcblxuICAvKiBSZXR1cm4gY29kZXMgZm9yIHRoZSBjb21wcmVzc2lvbi9kZWNvbXByZXNzaW9uIGZ1bmN0aW9ucy4gTmVnYXRpdmUgdmFsdWVzXG4gICogYXJlIGVycm9ycywgcG9zaXRpdmUgdmFsdWVzIGFyZSB1c2VkIGZvciBzcGVjaWFsIGJ1dCBub3JtYWwgZXZlbnRzLlxuICAqL1xuICBaX09LOiAgICAgICAgICAgICAgIDAsXG4gIFpfU1RSRUFNX0VORDogICAgICAgMSxcbiAgWl9ORUVEX0RJQ1Q6ICAgICAgICAyLFxuICBaX0VSUk5POiAgICAgICAgICAgLTEsXG4gIFpfU1RSRUFNX0VSUk9SOiAgICAtMixcbiAgWl9EQVRBX0VSUk9SOiAgICAgIC0zLFxuICAvL1pfTUVNX0VSUk9SOiAgICAgLTQsXG4gIFpfQlVGX0VSUk9SOiAgICAgICAtNSxcbiAgLy9aX1ZFUlNJT05fRVJST1I6IC02LFxuXG4gIC8qIGNvbXByZXNzaW9uIGxldmVscyAqL1xuICBaX05PX0NPTVBSRVNTSU9OOiAgICAgICAgIDAsXG4gIFpfQkVTVF9TUEVFRDogICAgICAgICAgICAgMSxcbiAgWl9CRVNUX0NPTVBSRVNTSU9OOiAgICAgICA5LFxuICBaX0RFRkFVTFRfQ09NUFJFU1NJT046ICAgLTEsXG5cblxuICBaX0ZJTFRFUkVEOiAgICAgICAgICAgICAgIDEsXG4gIFpfSFVGRk1BTl9PTkxZOiAgICAgICAgICAgMixcbiAgWl9STEU6ICAgICAgICAgICAgICAgICAgICAzLFxuICBaX0ZJWEVEOiAgICAgICAgICAgICAgICAgIDQsXG4gIFpfREVGQVVMVF9TVFJBVEVHWTogICAgICAgMCxcblxuICAvKiBQb3NzaWJsZSB2YWx1ZXMgb2YgdGhlIGRhdGFfdHlwZSBmaWVsZCAodGhvdWdoIHNlZSBpbmZsYXRlKCkpICovXG4gIFpfQklOQVJZOiAgICAgICAgICAgICAgICAgMCxcbiAgWl9URVhUOiAgICAgICAgICAgICAgICAgICAxLFxuICAvL1pfQVNDSUk6ICAgICAgICAgICAgICAgIDEsIC8vID0gWl9URVhUIChkZXByZWNhdGVkKVxuICBaX1VOS05PV046ICAgICAgICAgICAgICAgIDIsXG5cbiAgLyogVGhlIGRlZmxhdGUgY29tcHJlc3Npb24gbWV0aG9kICovXG4gIFpfREVGTEFURUQ6ICAgICAgICAgICAgICAgOFxuICAvL1pfTlVMTDogICAgICAgICAgICAgICAgIG51bGwgLy8gVXNlIC0xIG9yIG51bGwgaW5saW5lLCBkZXBlbmRpbmcgb24gdmFyIHR5cGVcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/constants.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/crc32.js":
/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/crc32.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc ^= -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9jcmMzMi5qcz9lZWRhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQSxtQkFBbUIsT0FBTztBQUMxQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxtQkFBbUIsU0FBUztBQUM1QjtBQUNBOztBQUVBLHNCQUFzQjtBQUN0Qjs7O0FBR0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9jcmMzMi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gTm90ZTogd2UgY2FuJ3QgZ2V0IHNpZ25pZmljYW50IHNwZWVkIGJvb3N0IGhlcmUuXG4vLyBTbyB3cml0ZSBjb2RlIHRvIG1pbmltaXplIHNpemUgLSBubyBwcmVnZW5lcmF0ZWQgdGFibGVzXG4vLyBhbmQgYXJyYXkgdG9vbHMgZGVwZW5kZW5jaWVzLlxuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbi8vIFVzZSBvcmRpbmFyeSBhcnJheSwgc2luY2UgdW50eXBlZCBtYWtlcyBubyBib29zdCBoZXJlXG5mdW5jdGlvbiBtYWtlVGFibGUoKSB7XG4gIHZhciBjLCB0YWJsZSA9IFtdO1xuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwgMjU2OyBuKyspIHtcbiAgICBjID0gbjtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IDg7IGsrKykge1xuICAgICAgYyA9ICgoYyAmIDEpID8gKDB4RURCODgzMjAgXiAoYyA+Pj4gMSkpIDogKGMgPj4+IDEpKTtcbiAgICB9XG4gICAgdGFibGVbbl0gPSBjO1xuICB9XG5cbiAgcmV0dXJuIHRhYmxlO1xufVxuXG4vLyBDcmVhdGUgdGFibGUgb24gbG9hZC4gSnVzdCAyNTUgc2lnbmVkIGxvbmdzLiBOb3QgYSBwcm9ibGVtLlxudmFyIGNyY1RhYmxlID0gbWFrZVRhYmxlKCk7XG5cblxuZnVuY3Rpb24gY3JjMzIoY3JjLCBidWYsIGxlbiwgcG9zKSB7XG4gIHZhciB0ID0gY3JjVGFibGUsXG4gICAgICBlbmQgPSBwb3MgKyBsZW47XG5cbiAgY3JjIF49IC0xO1xuXG4gIGZvciAodmFyIGkgPSBwb3M7IGkgPCBlbmQ7IGkrKykge1xuICAgIGNyYyA9IChjcmMgPj4+IDgpIF4gdFsoY3JjIF4gYnVmW2ldKSAmIDB4RkZdO1xuICB9XG5cbiAgcmV0dXJuIChjcmMgXiAoLTEpKTsgLy8gPj4+IDA7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBjcmMzMjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/crc32.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/gzheader.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/gzheader.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9nemhlYWRlci5qcz84MDEzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9nemhlYWRlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5mdW5jdGlvbiBHWmhlYWRlcigpIHtcbiAgLyogdHJ1ZSBpZiBjb21wcmVzc2VkIGRhdGEgYmVsaWV2ZWQgdG8gYmUgdGV4dCAqL1xuICB0aGlzLnRleHQgICAgICAgPSAwO1xuICAvKiBtb2RpZmljYXRpb24gdGltZSAqL1xuICB0aGlzLnRpbWUgICAgICAgPSAwO1xuICAvKiBleHRyYSBmbGFncyAobm90IHVzZWQgd2hlbiB3cml0aW5nIGEgZ3ppcCBmaWxlKSAqL1xuICB0aGlzLnhmbGFncyAgICAgPSAwO1xuICAvKiBvcGVyYXRpbmcgc3lzdGVtICovXG4gIHRoaXMub3MgICAgICAgICA9IDA7XG4gIC8qIHBvaW50ZXIgdG8gZXh0cmEgZmllbGQgb3IgWl9OVUxMIGlmIG5vbmUgKi9cbiAgdGhpcy5leHRyYSAgICAgID0gbnVsbDtcbiAgLyogZXh0cmEgZmllbGQgbGVuZ3RoICh2YWxpZCBpZiBleHRyYSAhPSBaX05VTEwpICovXG4gIHRoaXMuZXh0cmFfbGVuICA9IDA7IC8vIEFjdHVhbGx5LCB3ZSBkb24ndCBuZWVkIGl0IGluIEpTLFxuICAgICAgICAgICAgICAgICAgICAgICAvLyBidXQgbGVhdmUgZm9yIGZldyBjb2RlIG1vZGlmaWNhdGlvbnNcblxuICAvL1xuICAvLyBTZXR1cCBsaW1pdHMgaXMgbm90IG5lY2Vzc2FyeSBiZWNhdXNlIGluIGpzIHdlIHNob3VsZCBub3QgcHJlYWxsb2NhdGUgbWVtb3J5XG4gIC8vIGZvciBpbmZsYXRlIHVzZSBjb25zdGFudCBsaW1pdCBpbiA2NTUzNiBieXRlc1xuICAvL1xuXG4gIC8qIHNwYWNlIGF0IGV4dHJhIChvbmx5IHdoZW4gcmVhZGluZyBoZWFkZXIpICovXG4gIC8vIHRoaXMuZXh0cmFfbWF4ICA9IDA7XG4gIC8qIHBvaW50ZXIgdG8gemVyby10ZXJtaW5hdGVkIGZpbGUgbmFtZSBvciBaX05VTEwgKi9cbiAgdGhpcy5uYW1lICAgICAgID0gJyc7XG4gIC8qIHNwYWNlIGF0IG5hbWUgKG9ubHkgd2hlbiByZWFkaW5nIGhlYWRlcikgKi9cbiAgLy8gdGhpcy5uYW1lX21heCAgID0gMDtcbiAgLyogcG9pbnRlciB0byB6ZXJvLXRlcm1pbmF0ZWQgY29tbWVudCBvciBaX05VTEwgKi9cbiAgdGhpcy5jb21tZW50ICAgID0gJyc7XG4gIC8qIHNwYWNlIGF0IGNvbW1lbnQgKG9ubHkgd2hlbiByZWFkaW5nIGhlYWRlcikgKi9cbiAgLy8gdGhpcy5jb21tX21heCAgID0gMDtcbiAgLyogdHJ1ZSBpZiB0aGVyZSB3YXMgb3Igd2lsbCBiZSBhIGhlYWRlciBjcmMgKi9cbiAgdGhpcy5oY3JjICAgICAgID0gMDtcbiAgLyogdHJ1ZSB3aGVuIGRvbmUgcmVhZGluZyBnemlwIGhlYWRlciAobm90IHVzZWQgd2hlbiB3cml0aW5nIGEgZ3ppcCBmaWxlKSAqL1xuICB0aGlzLmRvbmUgICAgICAgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHWmhlYWRlcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/gzheader.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/inffast.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inffast.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nvar BAD = 30;       /* got a data error -- remain here until reset */\nvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  var state;\n  var _in;                    /* local strm.input */\n  var last;                   /* have enough input while in < last */\n  var _out;                   /* local strm.output */\n  var beg;                    /* inflate()'s initial strm.output */\n  var end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  var dmax;                   /* maximum distance from zlib header */\n//#endif\n  var wsize;                  /* window size or zero if not using window */\n  var whave;                  /* valid bytes in the window */\n  var wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  var s_window;               /* allocated sliding window, if wsize != 0 */\n  var hold;                   /* local strm.hold */\n  var bits;                   /* local strm.bits */\n  var lcode;                  /* local strm.lencode */\n  var dcode;                  /* local strm.distcode */\n  var lmask;                  /* mask for first level of length codes */\n  var dmask;                  /* mask for first level of distance codes */\n  var here;                   /* retrieved table entry */\n  var op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  var len;                    /* match length, unused bytes */\n  var dist;                   /* match distance */\n  var from;                   /* where to copy match from */\n  var from_source;\n\n\n  var input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/inffast.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/inflate.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inflate.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils         = __webpack_require__(/*! ../utils/common */ \"./node_modules/pako/lib/utils/common.js\");\nvar adler32       = __webpack_require__(/*! ./adler32 */ \"./node_modules/pako/lib/zlib/adler32.js\");\nvar crc32         = __webpack_require__(/*! ./crc32 */ \"./node_modules/pako/lib/zlib/crc32.js\");\nvar inflate_fast  = __webpack_require__(/*! ./inffast */ \"./node_modules/pako/lib/zlib/inffast.js\");\nvar inflate_table = __webpack_require__(/*! ./inftrees */ \"./node_modules/pako/lib/zlib/inftrees.js\");\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\n//var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\nvar Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\nvar Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nvar    HEAD = 1;       /* i: waiting for magic header */\nvar    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nvar    TIME = 3;       /* i: waiting for modification time (gzip) */\nvar    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nvar    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nvar    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nvar    NAME = 7;       /* i: waiting for end of file name (gzip) */\nvar    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nvar    HCRC = 9;       /* i: waiting for header crc (gzip) */\nvar    DICTID = 10;    /* i: waiting for dictionary check value */\nvar    DICT = 11;      /* waiting for inflateSetDictionary() call */\nvar        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nvar        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nvar        STORED = 14;    /* i: waiting for stored size (length and complement) */\nvar        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nvar        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nvar        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nvar        LENLENS = 18;   /* i: waiting for code length code lengths */\nvar        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nvar            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nvar            LEN = 21;       /* i: waiting for length/lit/eob code */\nvar            LENEXT = 22;    /* i: waiting for length extra bits */\nvar            DIST = 23;      /* i: waiting for distance code */\nvar            DISTEXT = 24;   /* i: waiting for distance extra bits */\nvar            MATCH = 25;     /* o: waiting for output space to copy string */\nvar            LIT = 26;       /* o: waiting for output space to write literal */\nvar    CHECK = 27;     /* i: waiting for 32-bit check value */\nvar    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nvar    DONE = 29;      /* finished check, done -- remain here until reset */\nvar    BAD = 30;       /* got a data error -- remain here until reset */\nvar    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nvar    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_WBITS = MAX_WBITS;\n\n\nfunction zswap32(q) {\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n}\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\n  this.work = new utils.Buf16(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\nfunction inflateResetKeep(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n}\n\nfunction inflateReset(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n}\n\nfunction inflateReset2(strm, windowBits) {\n  var wrap;\n  var state;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n}\n\nfunction inflateInit2(strm, windowBits) {\n  var ret;\n  var state;\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n}\n\nfunction inflateInit(strm) {\n  return inflateInit2(strm, DEF_WBITS);\n}\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nvar virgin = true;\n\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\nfunction fixedtables(state) {\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    var sym;\n\n    lenfix = new utils.Buf32(512);\n    distfix = new utils.Buf32(32);\n\n    /* literal/length table */\n    sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n}\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nfunction updatewindow(strm, src, end, copy) {\n  var dist;\n  var state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new utils.Buf8(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    utils.arraySet(state.window, src, end - copy, dist, state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      utils.arraySet(state.window, src, end - copy, copy, 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n}\n\nfunction inflate(strm, flush) {\n  var state;\n  var input, output;          // input/output buffers\n  var next;                   /* next input INDEX */\n  var put;                    /* next output INDEX */\n  var have, left;             /* available input and output */\n  var hold;                   /* bit buffer */\n  var bits;                   /* bits in bit buffer */\n  var _in, _out;              /* save starting available input and output */\n  var copy;                   /* number of stored or match bytes to copy */\n  var from;                   /* where to copy match bytes from */\n  var from_source;\n  var here = 0;               /* current decoding table entry */\n  var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //var last;                   /* parent table entry */\n  var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  var len;                    /* length to copy for repeats, bits to drop */\n  var ret;                    /* return code */\n  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\n  var opts;\n\n  var n; // temporary var for NEED_BITS\n\n  var order = /* permutation of code lengths */\n    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        state.flags = 0;           /* expect zlib header */\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        else if (len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n        state.dmax = 1 << len;\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if (state.flags & 0x0200) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Array(state.head.extra_len);\n              }\n              utils.arraySet(\n                state.head.extra,\n                input,\n                next,\n                // extra field is limited to 65536 bytes\n                // - no need for additional size check\n                copy,\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if (state.flags & 0x0200) {\n              state.check = crc32(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          utils.arraySet(output, input, next, copy, put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inflate_fast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if (_out) {\n            strm.adler = state.check =\n                /*UPDATE(state.check, put - _out, _out);*/\n                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n}\n\nfunction inflateEnd(strm) {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  var state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n}\n\nfunction inflateGetHeader(strm, head) {\n  var state;\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n}\n\nfunction inflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var state;\n  var dictid;\n  var ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n}\n\nexports.inflateReset = inflateReset;\nexports.inflateReset2 = inflateReset2;\nexports.inflateResetKeep = inflateResetKeep;\nexports.inflateInit = inflateInit;\nexports.inflateInit2 = inflateInit2;\nexports.inflate = inflate;\nexports.inflateEnd = inflateEnd;\nexports.inflateGetHeader = inflateGetHeader;\nexports.inflateSetDictionary = inflateSetDictionary;\nexports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nexports.inflateCopy = inflateCopy;\nexports.inflateGetDictionary = inflateGetDictionary;\nexports.inflateMark = inflateMark;\nexports.inflatePrime = inflatePrime;\nexports.inflateSync = inflateSync;\nexports.inflateSyncPoint = inflateSyncPoint;\nexports.inflateUndermine = inflateUndermine;\n*/\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/inflate.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/inftrees.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/inftrees.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils = __webpack_require__(/*! ../utils/common */ \"./node_modules/pako/lib/utils/common.js\");\n\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\nvar lbase = [ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n];\n\nvar lext = [ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n];\n\nvar dbase = [ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n];\n\nvar dext = [ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n];\n\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n{\n  var bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  var len = 0;               /* a code's length in bits */\n  var sym = 0;               /* index of code symbols */\n  var min = 0, max = 0;          /* minimum and maximum code lengths */\n  var root = 0;              /* number of index bits for root table */\n  var curr = 0;              /* number of index bits for current table */\n  var drop = 0;              /* code bits to drop for sub-table */\n  var left = 0;                   /* number of prefix codes available */\n  var used = 0;              /* code entries in table used */\n  var huff = 0;              /* Huffman code */\n  var incr;              /* for incrementing code, index */\n  var fill;              /* index for replicating entries */\n  var low;               /* low bits for current root entry */\n  var mask;              /* mask for low root bits */\n  var next;             /* next available space in table */\n  var base = null;     /* base value table to use */\n  var base_index = 0;\n//  var shoextra;    /* extra bits table to use */\n  var end;                    /* use base and extra for symbol > end */\n  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  var extra = null;\n  var extra_index = 0;\n\n  var here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/inftrees.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/messages.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/messages.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9tZXNzYWdlcy5qcz80ZGM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9tZXNzYWdlcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgMjogICAgICAnbmVlZCBkaWN0aW9uYXJ5JywgICAgIC8qIFpfTkVFRF9ESUNUICAgICAgIDIgICovXG4gIDE6ICAgICAgJ3N0cmVhbSBlbmQnLCAgICAgICAgICAvKiBaX1NUUkVBTV9FTkQgICAgICAxICAqL1xuICAwOiAgICAgICcnLCAgICAgICAgICAgICAgICAgICAgLyogWl9PSyAgICAgICAgICAgICAgMCAgKi9cbiAgJy0xJzogICAnZmlsZSBlcnJvcicsICAgICAgICAgIC8qIFpfRVJSTk8gICAgICAgICAoLTEpICovXG4gICctMic6ICAgJ3N0cmVhbSBlcnJvcicsICAgICAgICAvKiBaX1NUUkVBTV9FUlJPUiAgKC0yKSAqL1xuICAnLTMnOiAgICdkYXRhIGVycm9yJywgICAgICAgICAgLyogWl9EQVRBX0VSUk9SICAgICgtMykgKi9cbiAgJy00JzogICAnaW5zdWZmaWNpZW50IG1lbW9yeScsIC8qIFpfTUVNX0VSUk9SICAgICAoLTQpICovXG4gICctNSc6ICAgJ2J1ZmZlciBlcnJvcicsICAgICAgICAvKiBaX0JVRl9FUlJPUiAgICAgKC01KSAqL1xuICAnLTYnOiAgICdpbmNvbXBhdGlibGUgdmVyc2lvbicgLyogWl9WRVJTSU9OX0VSUk9SICgtNikgKi9cbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/messages.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/zstream.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/zstream.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi96c3RyZWFtLmpzPzg5MzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RDtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL3pzdHJlYW0uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuZnVuY3Rpb24gWlN0cmVhbSgpIHtcbiAgLyogbmV4dCBpbnB1dCBieXRlICovXG4gIHRoaXMuaW5wdXQgPSBudWxsOyAvLyBKUyBzcGVjaWZpYywgYmVjYXVzZSB3ZSBoYXZlIG5vIHBvaW50ZXJzXG4gIHRoaXMubmV4dF9pbiA9IDA7XG4gIC8qIG51bWJlciBvZiBieXRlcyBhdmFpbGFibGUgYXQgaW5wdXQgKi9cbiAgdGhpcy5hdmFpbF9pbiA9IDA7XG4gIC8qIHRvdGFsIG51bWJlciBvZiBpbnB1dCBieXRlcyByZWFkIHNvIGZhciAqL1xuICB0aGlzLnRvdGFsX2luID0gMDtcbiAgLyogbmV4dCBvdXRwdXQgYnl0ZSBzaG91bGQgYmUgcHV0IHRoZXJlICovXG4gIHRoaXMub3V0cHV0ID0gbnVsbDsgLy8gSlMgc3BlY2lmaWMsIGJlY2F1c2Ugd2UgaGF2ZSBubyBwb2ludGVyc1xuICB0aGlzLm5leHRfb3V0ID0gMDtcbiAgLyogcmVtYWluaW5nIGZyZWUgc3BhY2UgYXQgb3V0cHV0ICovXG4gIHRoaXMuYXZhaWxfb3V0ID0gMDtcbiAgLyogdG90YWwgbnVtYmVyIG9mIGJ5dGVzIG91dHB1dCBzbyBmYXIgKi9cbiAgdGhpcy50b3RhbF9vdXQgPSAwO1xuICAvKiBsYXN0IGVycm9yIG1lc3NhZ2UsIE5VTEwgaWYgbm8gZXJyb3IgKi9cbiAgdGhpcy5tc2cgPSAnJy8qWl9OVUxMKi87XG4gIC8qIG5vdCB2aXNpYmxlIGJ5IGFwcGxpY2F0aW9ucyAqL1xuICB0aGlzLnN0YXRlID0gbnVsbDtcbiAgLyogYmVzdCBndWVzcyBhYm91dCB0aGUgZGF0YSB0eXBlOiBiaW5hcnkgb3IgdGV4dCAqL1xuICB0aGlzLmRhdGFfdHlwZSA9IDIvKlpfVU5LTk9XTiovO1xuICAvKiBhZGxlcjMyIHZhbHVlIG9mIHRoZSB1bmNvbXByZXNzZWQgZGF0YSAqL1xuICB0aGlzLmFkbGVyID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBaU3RyZWFtO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/zstream.js\n");

/***/ }),

/***/ "./node_modules/vue-verification-code-input/dist/index.common.js":
/*!***********************************************************************!*\
  !*** ./node_modules/vue-verification-code-input/dist/index.common.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = \"fb15\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"1389\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"a8da\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(\"499e\").default\nvar update = add(\"0e1732ca\", content, true, {\"sourceMap\":false,\"shadowMode\":false});\n\n/***/ }),\n\n/***/ \"24fb\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \"{\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join('');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery) {\n    if (typeof modules === 'string') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    for (var i = 0; i < this.length; i++) {\n      // eslint-disable-next-line prefer-destructuring\n      var id = this[i][0];\n\n      if (id != null) {\n        alreadyImportedModules[id] = true;\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = modules[_i]; // skip already imported module\n      // this implementation is not 100% perfect for weird media query combinations\n      // when a module is imported multiple times with different media queries.\n      // I hope this will never occur (Hey this way we have smaller bundles)\n\n      if (item[0] == null || !alreadyImportedModules[item[0]]) {\n        if (mediaQuery && !item[2]) {\n          item[2] = mediaQuery;\n        } else if (mediaQuery) {\n          item[2] = \"(\".concat(item[2], \") and (\").concat(mediaQuery, \")\");\n        }\n\n        list.push(item);\n      }\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot).concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n  return \"/*# \".concat(data, \" */\");\n}\n\n/***/ }),\n\n/***/ \"499e\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/vue-style-loader/lib/listToStyles.js\n/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nfunction listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n// CONCATENATED MODULE: ./node_modules/vue-style-loader/lib/addStylesClient.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return addStylesClient; });\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\n\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nfunction addStylesClient (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n\n\n/***/ }),\n\n/***/ \"a8da\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"24fb\")(false);\n// Module\nexports.push([module.i, \".react-code-input-container[data-v-e1087700]{position:relative}.react-code-input>input[data-v-e1087700]{border:1px solid #a8adb7;border-right:none;font-family:Lato;font-size:20px;color:#525461;text-align:center;-webkit-box-sizing:border-box;box-sizing:border-box;border-radius:0;-webkit-appearance:initial}.react-code-input>input[data-v-e1087700]:last-child{border-right:1px solid #a8adb7;border-top-right-radius:6px;border-bottom-right-radius:6px}.react-code-input>input[data-v-e1087700]:first-child{border-top-left-radius:6px;border-bottom-left-radius:6px}.react-code-input>input[data-v-e1087700]:focus{outline:none;border:1px solid #006fff;caret-color:#006fff}.react-code-input>input:focus+input[data-v-e1087700]{border-left:none}.loading[data-v-e1087700]{text-align:center}.blur[data-v-e1087700],.loading[data-v-e1087700]{position:absolute;left:0;right:0;bottom:0}.blur[data-v-e1087700]{top:0;background-color:#fff;opacity:.5;-webkit-filter:blur(.5px);filter:blur(.5px);-webkit-transition:opacity .3s;transition:opacity .3s}.title[data-v-e1087700]{margin:0;height:20px;padding-bottom:10px}.spin[data-v-e1087700]{display:inline-block;-webkit-animation:loadingCircle-data-v-e1087700 1s linear infinite;animation:loadingCircle-data-v-e1087700 1s linear infinite}@-webkit-keyframes loadingCircle-data-v-e1087700{to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes loadingCircle-data-v-e1087700{to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}\", \"\"]);\n\n\n/***/ }),\n\n/***/ \"efb8\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_CodeInput_vue_vue_type_style_index_0_id_e1087700_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"1389\");\n/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_CodeInput_vue_vue_type_style_index_0_id_e1087700_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_CodeInput_vue_vue_type_style_index_0_id_e1087700_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_CodeInput_vue_vue_type_style_index_0_id_e1087700_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a); \n\n/***/ }),\n\n/***/ \"f6fd\":\n/***/ (function(module, exports) {\n\n// document.currentScript polyfill by Adam Miller\n\n// MIT license\n\n(function(document){\n  var currentScript = \"currentScript\",\n      scripts = document.getElementsByTagName('script'); // Live NodeList collection\n\n  // If browser needs currentScript polyfill, add get currentScript() to the document object\n  if (!(currentScript in document)) {\n    Object.defineProperty(document, currentScript, {\n      get: function(){\n\n        // IE 6-10 supports script readyState\n        // IE 10+ support stack trace\n        try { throw new Error(); }\n        catch (err) {\n\n          // Find the second match for the \"at\" string to get file src url from stack.\n          // Specifically works with the format of stack traces in IE.\n          var i, res = ((/.*at [^\\(]*\\((.*):.+:.+\\)$/ig).exec(err.stack) || [false])[1];\n\n          // For all scripts on the page, if src matches or if ready state is interactive, return the script tag\n          for(i in scripts){\n            if(scripts[i].src == res || scripts[i].readyState == \"interactive\"){\n              return scripts[i];\n            }\n          }\n\n          // If no match, return null\n          return null;\n        }\n      }\n    });\n  }\n})(document);\n\n\n/***/ }),\n\n/***/ \"fb15\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js\n// This file is imported into lib/wc client bundles.\n\nif (typeof window !== 'undefined') {\n  if (true) {\n    __webpack_require__(\"f6fd\")\n  }\n\n  var i\n  if ((i = window.document.currentScript) && (i = i.src.match(/(.+\\/)[^/]+\\.js(\\?.*)?$/))) {\n    __webpack_require__.p = i[1] // eslint-disable-line\n  }\n}\n\n// Indicate to webpack that this file can be concatenated\n/* harmony default export */ var setPublicPath = (null);\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{\"cacheDirectory\":\"node_modules/.cache/vue-loader\",\"cacheIdentifier\":\"78420b9a-vue-loader-template\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/CodeInput.vue?vue&type=template&id=e1087700&scoped=true&\nvar render = function () {\nvar _obj;\nvar _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:( _obj = {\n    'react-code-input-container': true\n  }, _obj[_vm.className] = !!_vm.className, _obj ),style:({ width: ((_vm.fields * _vm.fieldWidth) + \"px\") })},[(_vm.title)?_c('p',{staticClass:\"title\"},[_vm._v(_vm._s(_vm.title))]):_vm._e(),_c('div',{staticClass:\"react-code-input\"},[_vm._l((_vm.values),function(v,index){return [_c('input',{key:(_vm.id + \"-\" + index),ref:_vm.iRefs[index],refInFor:true,style:({\n          width: (_vm.fieldWidth + \"px\"),\n          height: (_vm.fieldHeight + \"px\")\n        }),attrs:{\"type\":_vm.type === 'number' ? 'tel' : _vm.type,\"pattern\":_vm.type === 'number' ? '[0-9]' : null,\"autoFocus\":_vm.autoFocus && !_vm.loading && index === _vm.autoFocusIndex,\"data-id\":index,\"disabled\":_vm.disabled,\"required\":_vm.required,\"maxlength\":\"1\"},domProps:{\"value\":v},on:{\"input\":_vm.onValueChange,\"focus\":_vm.onFocus,\"keydown\":_vm.onKeyDown}})]})],2),(_vm.loading)?_c('div',{staticClass:\"loading\",style:({lineHeight: (_vm.fieldHeight + \"px\")})},[_c('div',{staticClass:\"blur\"}),_c('svg',{staticClass:\"spin\",attrs:{\"viewBox\":\"0 0 1024 1024\",\"data-icon\":\"loading\",\"width\":\"1em\",\"height\":\"1em\",\"fill\":\"currentColor\",\"aria-hidden\":\"true\"}},[_c('path',{attrs:{\"fill\":\"#006fff\",\"d\":\"M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 0 0-94.3-139.9 437.71 437.71 0 0 0-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z\"}})])]):_vm._e()])}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/components/CodeInput.vue?vue&type=template&id=e1087700&scoped=true&\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/CodeInput.vue?vue&type=script&lang=js&\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar KEY_CODE = {\n  backspace: 8,\n  left: 37,\n  up: 38,\n  right: 39,\n  down: 40\n};\n/* harmony default export */ var CodeInputvue_type_script_lang_js_ = ({\n  name: \"CodeInput\",\n  props: {\n    type: {\n      type: String,\n      default: \"number\"\n    },\n    className: String,\n    fields: {\n      type: Number,\n      default: 6\n    },\n    fieldWidth: {\n      type: Number,\n      default: 58\n    },\n    fieldHeight: {\n      type: Number,\n      default: 54\n    },\n    autoFocus: {\n      type: Boolean,\n      default: true\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    required: {\n      type: Boolean,\n      default: false\n    },\n    title: String,\n    change: Function,\n    complete: Function,\n    loading: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    var fields = this.fields,\n        values = this.values;\n    var vals;\n    var autoFocusIndex = 0;\n\n    if (values && values.length) {\n      vals = [];\n\n      for (var i = 0; i < fields; i++) {\n        vals.push(values[i] || \"\");\n      }\n\n      autoFocusIndex = values.length >= fields ? 0 : values.length;\n    } else {\n      vals = Array(fields).fill(\"\");\n    }\n\n    this.iRefs = [];\n\n    for (var _i = 0; _i < fields; _i++) {\n      this.iRefs.push(\"input_\".concat(_i));\n    }\n\n    this.id = +new Date();\n    return {\n      values: vals,\n      autoFocusIndex: autoFocusIndex\n    };\n  },\n  mounted: function mounted() {},\n  methods: {\n    onFocus: function onFocus(e) {\n      e.target.select(e);\n    },\n    onValueChange: function onValueChange(e) {\n      var index = parseInt(e.target.dataset.id);\n      var type = this.type,\n          fields = this.fields;\n\n      if (type === \"number\") {\n        e.target.value = e.target.value.replace(/[^\\d]/gi, \"\");\n      } // this.handleKeys[index] = false;\n\n\n      if (e.target.value === \"\" || type === \"number\" && !e.target.validity.valid) {\n        return;\n      }\n\n      var next;\n      var value = e.target.value;\n      var values = this.values;\n      values = Object.assign([], values);\n\n      if (value.length > 1) {\n        var nextIndex = value.length + index - 1;\n\n        if (nextIndex >= fields) {\n          nextIndex = fields - 1;\n        }\n\n        next = this.iRefs[nextIndex];\n        var split = value.split(\"\");\n        split.forEach(function (item, i) {\n          var cursor = index + i;\n\n          if (cursor < fields) {\n            values[cursor] = item;\n          }\n        });\n        this.values = values;\n      } else {\n        next = this.iRefs[index + 1];\n        values[index] = value;\n        this.values = values;\n      }\n\n      if (next) {\n        var element = this.$refs[next][0];\n        element.focus();\n        element.select();\n      }\n\n      this.triggerChange(values);\n    },\n    onKeyDown: function onKeyDown(e) {\n      var index = parseInt(e.target.dataset.id);\n      var prevIndex = index - 1;\n      var nextIndex = index + 1;\n      var prev = this.iRefs[prevIndex];\n      var next = this.iRefs[nextIndex];\n\n      switch (e.keyCode) {\n        case KEY_CODE.backspace:\n          {\n            e.preventDefault();\n\n            var vals = _toConsumableArray(this.values);\n\n            if (this.values[index]) {\n              vals[index] = \"\";\n              this.values = vals;\n              this.triggerChange(vals);\n            } else if (prev) {\n              vals[prevIndex] = \"\";\n              this.$refs[prev][0].focus();\n              this.values = vals;\n              this.triggerChange(vals);\n            }\n\n            break;\n          }\n\n        case KEY_CODE.left:\n          e.preventDefault();\n\n          if (prev) {\n            this.$refs[prev][0].focus();\n          }\n\n          break;\n\n        case KEY_CODE.right:\n          e.preventDefault();\n\n          if (next) {\n            this.$refs[next][0].focus();\n          }\n\n          break;\n\n        case KEY_CODE.up:\n        case KEY_CODE.down:\n          e.preventDefault();\n          break;\n\n        default:\n          // this.handleKeys[index] = true;\n          break;\n      }\n    },\n    triggerChange: function triggerChange() {\n      var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.values;\n      var fields = this.fields;\n      var val = values.join(\"\");\n      this.$emit(\"change\", val);\n\n      if (val.length >= fields) {\n        this.$emit(\"complete\", val);\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./src/components/CodeInput.vue?vue&type=script&lang=js&\n /* harmony default export */ var components_CodeInputvue_type_script_lang_js_ = (CodeInputvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./src/components/CodeInput.vue?vue&type=style&index=0&id=e1087700&scoped=true&lang=css&\nvar CodeInputvue_type_style_index_0_id_e1087700_scoped_true_lang_css_ = __webpack_require__(\"efb8\");\n\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n\n// CONCATENATED MODULE: ./src/components/CodeInput.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar component = normalizeComponent(\n  components_CodeInputvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"e1087700\",\n  null\n  \n)\n\n/* harmony default export */ var CodeInput = (component.exports);\n// CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/entry-lib.js\n\n\n/* harmony default export */ var entry_lib = __webpack_exports__[\"default\"] = (CodeInput);\n\n\n\n/***/ })\n\n/******/ })[\"default\"];\n//# sourceMappingURL=index.common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue-verification-code-input/dist/index.common.js\n");

/***/ })

}]);